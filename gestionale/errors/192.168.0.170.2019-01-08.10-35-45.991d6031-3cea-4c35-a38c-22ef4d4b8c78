(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> year is out of range"
p3
sS'layer'
p4
S'C:\\workspace\\web2py\\applications\\gestionale\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\nfrom __future__ import division\nimport json\nimport csv\nfrom ddt import *\nfrom fattura import *\nfrom ordine_fornitore import *\nfrom controllo_produzione import *\nimport datetime\nfrom money import *\nfrom tornado.test.util_test import ImportObjectTest\nfrom HTMLParser import HTMLParser\nfrom calendar import monthrange\nimport gluon\nfrom datetime import timedelta\nimport wrapper\nimport subprocess\nfrom fatturaToXmlObj import *\n\n\nimport socket\nimport sys\nfrom pydal.objects import Row\n#from pyasn1.compat.octets import null\n#from attr.validators import instance_of\n\ndef send_prn(): \n\ts = socket.socket()\n\ts.connect(("192.168.0.208",9100))\n\tf = open ("/tmp/to#print.prn", "rb")\n\tl = f.read(1024)\n\twhile (l):\n\t    s.send(l)\n\t    l = f.read(1024)\n\ts.close()\n\nexport_classes = dict(json=False,tsv=False, xml=False,pdf=False) \n\ndef tabella_piano_dei_conti():\n      piano_dei_conti_form = SQLFORM(db.piano_dei_conti,formname=\'piano_dei_conti\',maxtextlength=4,formstyle = \'table3cols\')\n      #piano_dei_conti_form.element(\'.web2py_counter\', replace=None)\n                                   \n      piano_dei_conti_form.process(formname=\'piano_dei_conti\')\n      return dict(piano_dei_conti_form=piano_dei_conti_form)\n\n    \ndef ricerca_piano_dei_conti():\n     piano_dei_conti_form = SQLFORM.grid(db.piano_dei_conti,formname=\'piano_dei_conti\',maxtextlength=40,create=True,deletable=True,searchable=True,sortable=True,paginate=5,formstyle = \'table3cols\')\n     piano_dei_conti_form.element(\'.web2py_counter\', replace=None)\n     \n     return dict(piano_dei_conti_form=piano_dei_conti_form)\n    \n   \ndef anagrafica_articoli_2():\n    nome_listino = ""\n    nome_cliente = ""\n    id_cliente = request.args[0]\n    #print request.args\n    \n    q = db(db.anagrafica_articoli.id == request.args[0]).select().first()\n    nome_cliente = q[\'nome_cliente\']\n    nome_listino = q[\'nome_listino\']\n    db.articoli.anagrafica_articoli_id.default = id_cliente\n    query=db.articoli.anagrafica_articoli_id == id_cliente\n    db.articoli.anagrafica_articoli_id.readable = False\n    db.articoli.anagrafica_articoli_id.writeable = False\n    \n    \n    articoli_form2 = SQLFORM.grid(query = query,formname=\'articoli2\',maxtextlength=100,create=True,        deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\n    articoli_form2.element(\'.web2py_counter\', replace=None)\n    return locals()\n    #return dict(form_id = id_cliente,nome_listino = nome_listino, nome_cliente = nome_cliente,articoli_form2=articoli_form2)\n     \ndef aggiungi_articolo_a_listino_fornitori():\n    id_articolo = request.vars.articolo_id\n    row = db(db.anagrafica_articoli.id == id_articolo).select().first()\n    codice_articolo = row[\'codice_articolo\']\n    \n    db.articolo_in_listino_fornitori.id_articolo.default = id_articolo\n    db.articolo_in_listino_fornitori.codice_articolo.default = codice_articolo\n    db.articolo_in_listino_fornitori.codice_articolo.writable=False\n    db.articolo_in_listino_fornitori.id_articolo.writable = False\n    \n    query=(db.articolo_in_listino_fornitori.id_articolo ==id_articolo)\n    \n    fields=[db.articolo_in_listino_fornitori.nome_fornitore,db.articolo_in_listino_fornitori.listino,db.articolo_in_listino_fornitori.data_valuta,db.articolo_in_listino_fornitori.numero_pezzi,db.articolo_in_listino_fornitori.prezzo,db.articolo_in_listino_fornitori.note,db.articolo_in_listino_fornitori.variazione]\n    \n    \n    \n    form = SQLFORM.grid(query=query,formname=\'articoli3\',formstyle = \'table3cols\',fields=fields,paginate=5)\n    \n       \n    return locals()\n\n\ndef aggiungi_articolo_a_listino():\n    id_articolo = request.vars.articolo_id\n    row = db(db.anagrafica_articoli.id == id_articolo).select().first()\n    codice_articolo = row[\'codice_articolo\']\n    \n    db.articolo_in_listino.id_articolo.default = id_articolo\n    db.articolo_in_listino.codice_articolo.default = codice_articolo\n    db.articolo_in_listino.codice_articolo.writable=False\n    db.articolo_in_listino.id_articolo.writable = False\n    \n    query=(db.articolo_in_listino.id_articolo ==id_articolo)\n    \n    fields=[db.articolo_in_listino.nome_cliente,db.articolo_in_listino.listino,db.articolo_in_listino.data_valuta,db.articolo_in_listino.numero_pezzi,db.articolo_in_listino.prezzo,db.articolo_in_listino.note,db.articolo_in_listino.variazione]\n    \n    \n    \n    form = SQLFORM.grid(query=query,formname=\'articoli2\',formstyle = \'table3cols\',fields=fields,paginate=5)\n    \n       \n    return locals()\n\n    \n  \ndef ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(codice_articolo,id_riga_ordine):\n    rows = db((db.riserva_quantita.codice_articolo == codice_articolo) & (db.riserva_quantita.id_riga_ordine == id_riga_ordine)).select()\n    totale = 0\n    for row in rows:\n        totale += int(row.quantita)\n    \n    return str(totale)\n  \ndef ritorna_totale_prenotazione_da_codice_articolo(codice_articolo):\n    #print "qui"\n    rows = db(db.riserva_quantita.codice_articolo == codice_articolo).select()\n    totale = 0\n    for row in rows:\n        #print row.quantita\n        totale += int(row.quantita)\n    \n    return str(totale)\n \ndef ritorna_disponibilita_da_codice_articolo(giacenza,codice_articolo):\n    rows = db(db.riserva_quantita.codice_articolo == codice_articolo).select()\n    prenotato = 0\n    for row in rows:\n        prenotato += int(row.quantita)\n    \n    try:\n        giacenza = int(giacenza)\n    except:\n        giacenza = 0\n    \n    \n    disponibile = int(giacenza) - prenotato\n    #print prenotato\n    return str(disponibile)\n\ndef anagrafica_articoli():\n    \n    """\n    DA RIFARE TUTTO\n    """\n    \n    \n    """\n    Codice articolo\n    Tipo Articolo\n    Segnala prime tre produzioni (boolean)\n    Codice iva\n    Trattamento (si / no / vedi ordine cliente)\n    tipo lamiera\n    tipo ordine (vedi db.py)\n    Codice sottoconto\n    Free pass (boolean)\n    codice imballo\n    descrizione imballo\n    numero pezzi\n    \n    """\n    \n    db.anagrafica_articoli.prenotato = Field.Virtual(\'prenotato\', lambda row : ritorna_totale_prenotazione_da_codice_articolo(row.anagrafica_articoli.codice_articolo))\n    db.anagrafica_articoli.disponibile = Field.Virtual(\'disponibile\', lambda row : ritorna_disponibilita_da_codice_articolo(row.anagrafica_articoli.giacenza,row.anagrafica_articoli.codice_articolo))\n    fields =[db.anagrafica_articoli.id,db.anagrafica_articoli.codice_articolo,db.anagrafica_articoli.giacenza,db.anagrafica_articoli.prenotato,db.anagrafica_articoli.disponibile,db.anagrafica_articoli.descrizione,db.anagrafica_articoli.revisione,db.anagrafica_articoli.ubicazione,db.anagrafica_articoli.cartella_disegno,db.anagrafica_articoli.tipo_articolo,db.anagrafica_articoli.trattamento,db.anagrafica_articoli.tipo_ordine]\n    links = [lambda row: A(XML(\'Listino clienti\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_articolo_a_listino\',vars=dict(articolo_id = row.id))),lambda row: A(XML(\'Listino fornitori\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_articolo_a_listino_fornitori\',vars=dict(articolo_id = row.id)))]\n    articoli_form = SQLFORM.grid(db.anagrafica_articoli,formname=\'articoli1\',maxtextlength=100,create=True,        deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,links=links,fields=fields)\n    #articoli_form.element(\'.web2py_counter\', replace=None)\n    \n    """        \n    if articoli_form.process().accepted:\n        redirect(URL(\'anagrafica_articoli_2\',args=articoli_form.vars.id))\n    \n    art_form = SQLFORM.grid(db.articoli,formname=\'articoli\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n    \n    """\n    return dict(articoli_form = articoli_form)\n\n \ndef anagrafica_magazzini_interni():\n    anagrafica_magazzini_interni_form = SQLFORM.grid(db.anagrafica_magazzini_interni,formname=\'anagrafica_magazzini_interni\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n    anagrafica_magazzini_interni_form.element(\'.web2py_counter\', replace=None)\n\n    return dict(anagrafica_magazzini_interni_form = anagrafica_magazzini_interni_form)\n\ndef visualizza_articoli_in_listino():\n    listino_id = request.vars.listino_id\n    \n    row = db(db.anagrafica_listini.id == listino_id).select().first()\n    cliente=row[\'nome_cliente\']\n    listino=row[\'nome_listino\']\n    \n    #query =((db.articolo_in_listino.nome_cliente == cliente)) #,db.articolo_in_listino.nome_cliente == clientedb.articolo_in_listino.listino == listino,db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id\n    \n    rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id)).select(groupby=db.anagrafica_articoli.codice_articolo)\n    \n    #form=SQLFORM.grid(query=query,formname=\'anagrafica_listini\',maxtextlength=100,create=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n   \n    \n    return locals()\n\n\ndef anagrafica_listini():\n    links = [lambda row: A(XML(\'Visualizza articoli\'),_class=\'button btn btn-default\',_href=URL(\'visualizza_articoli_in_listino\',vars=dict(listino_id = row.id)))]\n    anagrafica_listini_form = SQLFORM.grid(db.anagrafica_listini,formname=\'anagrafica_listini\',maxtextlength=100,create=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links)\n    anagrafica_listini_form.element(\'.web2py_counter\', replace=None)\n\n    return dict(anagrafica_listini_form = anagrafica_listini_form)\n  \n  \ndef anagrafica_causali_trasporti():\n    \n    \n    form = SQLFORM.grid(db.causali_trasporti,formname=\'causali_trasporti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n    form.element(\'.web2py_counter\', replace=None)\n\n    return dict(form = form)\n    \ndef dettaglio_bolla():\n    ordine_id = request.args[0]\n       \n    row = db(db.ordine_cliente.id == ordine_id).select().first()\n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\n    nome_cliente = row[\'nome_cliente\']\n    data_inserimento = row[\'data_inserimento\']\n    listino = row[\'listino\']\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\n    listino = row[\'listino\']\n    magazzino_interno = row[\'magazzino_interno\']\n    numero_ordine = row[\'ultimo_codice_ordine\']\n       \n    db(db.numero_ordine_cliente_progressivo).delete()\n    db.numero_ordine_cliente_progressivo.insert(ultimo_codice_ordine=numero_ordine)\n    \n    numero_riga_corrente = db(db.righe_in_ordine_cliente.id_ordine_cliente==ordine_id).count()+1\n    db.righe_in_ordine_cliente.n_riga.default = numero_riga_corrente\n    db.righe_in_ordine_cliente.n_riga.writable = False\n    \n    db.righe_in_ordine_cliente.id_ordine_cliente.default = ordine_id\n    db.righe_in_ordine_cliente.id_ordine_cliente.writable = False\n    db.righe_in_ordine_cliente.prezzo.default = 0\n    #db.righe_in_ordine_cliente.prezzo.writable = False\n    #fields=[\'\']\n    \n    \n    fields=[db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.sconti,db.righe_in_ordine_cliente.codice_iva,db.righe_in_ordine_cliente.evasione]\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id,formname=\'aggiungi_righe_a_ordini_clienti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1],fields=fields)\n    #codici_iva_form.element(\'.web2py_counter\', replace=None)\n    \n    \n    form_dettaglio_bolla = SQLFORM(db.ddt_clienti,formname=\'ddt\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,formstyle = \'table3cols\')\n    #codici_iva_form.element(\'.web2py_counter\', replace=None)\n    return locals()\n\n@service.jsonrpc\n@service.jsonrpc2  \ndef aggiungi_ddt_a_fattura(args):\n    \n    ddt_id = args[\'0\']\n    row = db(db.ddt_cliente.id == ddt_id).select().first()\n    data_richiesta = row.data_richiesta.strftime("%d/%m/%Y")\n    if row.numero_ddt is not None:\n        db(db.ddt_da_fatturare.numero_ddt==row.numero_ddt).delete()\n        db.ddt_da_fatturare.insert(numero_ddt=row.numero_ddt,ddt_id=ddt_id,data_emissione=data_richiesta,user_id = auth.user_id,totale = calcola_totale_iva_inclusa_da_ddt(row.id))\n        return "ok"\n    else:\n        response.flash="DDT non completato"\n        return locals()\n\ndef return_ddts_for_row(row):\n    \n    \n    \n    ##print row\n    my_row=row\n    id_ordine = row.id_ordine_cliente\n    n_riga = row.n_riga\n    ##print n_riga\n    result = id_ordine + " " + n_riga\n    \n    try:\n        quantita_richiesta = int(row.quantita)\n    except Exception,e:\n    \t#print e.message\n        quantita_richiesta = 0\n        pass\n    \n    \n    \n    \n    quantita_prodotta = 0\n    id_riga_ordine=""\n    ddt_code = []\n    try:\n        saved_rows = db((db.saved_righe_in_ddt_cliente.id_ordine == id_ordine) & (db.saved_righe_in_ddt_cliente.n_riga == n_riga)).select()\n        #print "SAVED ---------------------------------"\n        #print "Id ordine : "+str(id_ordine)\n        #print "Numero riga : "+str(n_riga)\n        #print saved_rows\n          \n        if saved_rows is not None:\n           quantita_prodotta = 0 \n           \n           for row in saved_rows:\n               \n                if "commento" in row[\'codice_articolo\']:\n                \tddt_id = row.saved_ddt_id\n                \tnumero_ddt = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()["numero_ddt"]\n\t                to_add = "{0} \\n".format(numero_ddt)\n\t                ddt_code.append(to_add)\n                        #print "commento"\n                \n                try:    \n                  if not "commento" in row[\'codice_articolo\']:\n\t                 ddt_id = row.saved_ddt_id\n\t                 quantita = row.quantita\n\t                 quantita_prodotta += int(quantita)\n\t                 #print "z123"\n\t                 numero_ddt = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()["numero_ddt"]\n\t                 to_add = "{0} ({1})\\n".format(numero_ddt,quantita)\n\t                 ddt_code.append(to_add)\n\t        except Exception,e:\n\t            \t#print e\n\t                pass     \n\t       \n\t           \n           \n           \n           \n           """\n           #print "CIAOOOOOOOO"\n           \n           if quantita_prodotta >= quantita_richiesta:\n               #print "CHIUDERE LA RIGA"\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\n               riga.update_record(riga_emessa_in_ddt=\'T\')\n           else:\n               #print "RIAPRIRE LA RIGA"\n               ##print my_row.id\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\n               ##print riga\n               riga.update_record(riga_emessa_in_ddt=\'F\')\n           """\n    except Exception,e:\n    \t#print e.message\n    \t\n        pass\n    """\n    if ddt_id is not None:\n        ddt_id = ddt_id.saved_ddt_id\n        result = ddt_id\n    """\n    return ddt_code\n  \ndef return_ddts_for_row_id(row_id):\n    \n    \n    \n    data = db(db.righe_in_ordine_cliente.id == row_id).select().first()\n    id_ordine = data.id_ordine_cliente\n    n_riga = data.n_riga\n    result = id_ordine + " " + n_riga\n    quantita_richiesta = int(data.quantita)\n    \n    quantita_prodotta = 0\n    id_riga_ordine=""\n    ddt_code = []\n    try:\n        saved_rows = db((db.saved_righe_in_ddt_cliente.id_ordine == id_ordine) & (db.saved_righe_in_ddt_cliente.n_riga == n_riga)).select()\n        #print saved_rows\n        if saved_rows is not None:\n           quantita_prodotta = 0 \n           \n           for row in saved_rows:\n               ddt_id = row.saved_ddt_id\n               quantita = row.quantita\n               quantita_prodotta += int(quantita)\n               \n               numero_ddt = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()["numero_ddt"]\n               to_add = "{0} ({1})\\n".format(numero_ddt,quantita)\n               ddt_code.append(to_add)\n           \n           \n           \n           \n           """\n           #print "CIAOOOOOOOO"\n           \n           if quantita_prodotta >= quantita_richiesta:\n               #print "CHIUDERE LA RIGA"\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\n               riga.update_record(riga_emessa_in_ddt=\'T\')\n           else:\n               #print "RIAPRIRE LA RIGA"\n               ##print my_row.id\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\n               ##print riga\n               riga.update_record(riga_emessa_in_ddt=\'F\')\n           """\n    except\tException,e:\n    \t#print e.message\n        pass\n    """\n    if ddt_id is not None:\n        ddt_id = ddt_id.saved_ddt_id\n        result = ddt_id\n    """\n    return ddt_code\n  \n\ndef return_quantity_for_row_id(row_id):\n    \n    \n    \n    data = db(db.righe_in_ordine_cliente.id == row_id).select().first()\n    id_ordine = data.id_ordine_cliente\n    n_riga = data.n_riga\n    result = id_ordine + " " + n_riga\n    quantita_richiesta = int(data.quantita)\n    \n    quantita_prodotta = 0\n    id_riga_ordine=""\n    ddt_code = []\n    try:\n        saved_rows = db((db.saved_righe_in_ddt_cliente.id_ordine == id_ordine) & (db.saved_righe_in_ddt_cliente.n_riga == n_riga)).select()\n        #print saved_rows\n        if saved_rows is not None:\n           quantita_prodotta = 0 \n           \n           for row in saved_rows:\n               ddt_id = row.saved_ddt_id\n               quantita = row.quantita\n               quantita_prodotta += int(quantita)\n               \n               \n                             \n           \n    except:\n        pass\n    \n    return quantita_prodotta\n\ndef return_descrizione_da_codice_articolo(row):\n    codice_articolo = row.codice_articolo\n    \n    ##print row\n    \n    try:\n        descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()["descrizione"]\n        \n    except:\n        descrizione = ""    \n    \n    \n    return descrizione\n\n\ndef previeni_cencellazione(table_involved, id_of_the_deleted_record):\n    pass\n   \n\ndef update_order_price(form):\n\n\t\n\tid_riga_ordine = form.vars.id\n\tprezzo = form.vars.prezzo\n\trow = db(db.saved_righe_in_ddt_cliente.id_riga_ordine ==id_riga_ordine).select().first()\n\tif row:\n\t\trow.update_record(prezzo=prezzo)\n\t\n\t\n\t\n\t\n\t\n\t\n\ndef aggiungi_righe_a_ordini_clienti():\n    ordine_id = request.args[0]\n    \n    righe_in_ordine_cliente_form =""  \n    #print "ORDINE ID {0}".format(ordine_id)\n    row = db(db.ordine_cliente.id == ordine_id).select().first()\n    \n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\n    nome_cliente = row[\'nome_cliente\']\n    #print nome_cliente\n    data_inserimento = row[\'data_inserimento\']\n    listino = row[\'listino\']\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\n    listino = row[\'listino\']\n    magazzino_interno = row[\'magazzino_interno\']\n    numero_ordine = row[\'ultimo_codice_ordine\']\n    \n    r2 = db(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id).select()\n    """\n    for r in r2:\n        return_ddts_for_row(r)\n    """    \n    try:\n        for r in r2:\n            produzione = db(db.produzione_righe_per_ddt.id_riga_ordine == r.id).select()\n            prodotta = 0\n            for p in produzione:\n                prodotta += int(p.quantita_prodotta)\n            if prodotta >= int(r.quantita):\n                r.update_record(riga_emessa_in_ddt=\'T\')\n    except Exception,e:\n    \t#print "in saved_righe_in_ddt_cliente ECCEZZINE"\n        #print e\n        pass\n            \n   \n    db(db.numero_ordine_cliente_progressivo).delete()\n    db.numero_ordine_cliente_progressivo.insert(ultimo_codice_ordine=numero_ordine)\n    \n    #form_righe = SQLFORM.grid(db.righe_in_ordine_cliente,formname=\'righe_in_ordine_cliente\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n    #f = SQLFORM.grid(db.anagrafica_listini)\n    \n    numero_riga_corrente = db(db.righe_in_ordine_cliente.id_ordine_cliente==ordine_id).count()+1\n    db.righe_in_ordine_cliente.n_riga.default = numero_riga_corrente\n    db.righe_in_ordine_cliente.n_riga.writable = False\n    \n    db.righe_in_ordine_cliente.id_ordine_cliente.default = ordine_id\n    db.righe_in_ordine_cliente.id_ordine_cliente.writable = False\n    \n    db.righe_in_ordine_cliente.prezzo.default = 0\n    #db.righe_in_ordine_cliente.prezzo.writable = False\n    #fields=[\'\']\n    \n    try:\n        cliente = db(db.clienti.nome==nome_cliente).select().first()\n        db.righe_in_ordine_cliente.codice_iva.default=cliente.codice_iva\n    except:\n        msg="Cliente non trovato. Possibile cambio di anagrafica"\n        response.flash=msg\n        righe_in_ordine_cliente_form\n        new_order=False\n        return locals()\n    \n    \n    db.righe_in_ordine_cliente.ddt=Field.Virtual("DDT associati",lambda row: return_ddts_for_row(row.righe_in_ordine_cliente))\n    db.righe_in_ordine_cliente.descrizione=Field.Virtual("Descrizione",lambda row: return_descrizione_da_codice_articolo(row.righe_in_ordine_cliente))\n        #db.righe_in_ordine_cliente.riga_chiusa = Field.Virtual("Riga_chiusa", lambda row: row.righe_in_ordine_cliente.riga_emessa_in_ddt)\n        ##print db.righe_in_ordine_cliente.riga_chiusa \n    \n   \n    can_delete = False\n    if \'edit\' in request.args:\n    \t    #print "IN EDIT"\n            record = request.args\n            id_riga = request.args[3]\n            r3=""\n            riga = db(db.righe_in_ordine_cliente.id == id_riga).select().first()\n            if len(return_ddts_for_row(riga)) == 0:\n                can_delete = True\n    \n    fields=[db.righe_in_ordine_cliente.id_ordine_cliente,db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.descrizione,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.evasione,db.righe_in_ordine_cliente.ddt,db.righe_in_ordine_cliente.riga_emessa_in_ddt]\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id,formname=\'aggiungi_righe_a_ordini_clienti\',maxtextlength=100,create=True,     deletable=can_delete,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1],fields=fields,onupdate=update_order_price)\n    #print "---- qui --"    \n    \n    """\n    db.righe_in_ordine_cliente.riga_emessa_in_ddt.writable=False\n    """\n    try:\n        cliente = db(db.clienti.nome==nome_cliente).select().first()\n        db.righe_in_ordine_cliente.codice_iva.default=cliente.codice_iva\n        can_delete = False\n    \n        \n        db.righe_in_ordine_cliente.ddt=Field.Virtual("DDT associati",lambda row: return_ddts_for_row(row.righe_in_ordine_cliente))\n        db.righe_in_ordine_cliente.descrizione=Field.Virtual("Descrizione",lambda row: return_descrizione_da_codice_articolo(row.righe_in_ordine_cliente))\n        #db.righe_in_ordine_cliente.riga_chiusa = Field.Virtual("Riga_chiusa", lambda row: row.righe_in_ordine_cliente.riga_emessa_in_ddt)\n        ##print db.righe_in_ordine_cliente.riga_chiusa \n        if \'edit\' in request.args:\n            if len(db.righe_in_ordine_cliente.ddt)==0:\n                can_delete=True\n            \n        \n        fields=[db.righe_in_ordine_cliente.id_ordine_cliente,db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.descrizione,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.evasione,db.righe_in_ordine_cliente.ddt,db.righe_in_ordine_cliente.riga_emessa_in_ddt]\n        righe_in_ordine_cliente_form = SQLFORM.grid(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id,formname=\'aggiungi_righe_a_ordini_clienti\',maxtextlength=100,create=True,     deletable=can_delete,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1],fields=fields)\n        #codici_iva_form.element(\'.web2py_counter\', replace=None)\n        \n    except Exception,e:\n        #print "eccezzione qui98"\n        #print e\n        pass\n    \n    new_order = False\n    if \'new\' in request.args:\n        new_order = True\n        #anagrafica_form = SQLFORM.factory(db.anagrafica_articoli,formname="anagrafica_articoli",user_signature=True,args=[],sortable=True,paginate=5, formstyle = \'table3cols\')\n        \n    return locals()\n\n\n\ndef aggiungi_righe_a_ordini_fornitori():\n    ordine_id = request.args[0]\n    \n      \n    \n    row = db(db.ordine_fornitore.id == ordine_id).select().first()\n    \n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\n    nome_fornitore = row[\'nome_fornitore\']\n    data_inserimento = row[\'data_inserimento\']\n    listino = row[\'listino\']\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\n    listino = row[\'listino\']\n    magazzino_interno = row[\'magazzino_interno\']\n    numero_ordine = row[\'ultimo_codice_ordine\']\n    \n   \n    db(db.numero_ordine_fornitore_progressivo).delete()\n    db.numero_ordine_fornitore_progressivo.insert(ultimo_codice_ordine=numero_ordine)\n    \n    #form_righe = SQLFORM.grid(db.righe_in_ordine_cliente,formname=\'righe_in_ordine_cliente\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n    #f = SQLFORM.grid(db.anagrafica_listini)\n    \n    numero_riga_corrente = db(db.righe_in_ordine_fornitore.id_ordine_fornitore==ordine_id).count()+1\n    db.righe_in_ordine_fornitore.n_riga.default = numero_riga_corrente\n    db.righe_in_ordine_fornitore.n_riga.writable = False\n    \n    db.righe_in_ordine_fornitore.id_ordine_fornitore.default = ordine_id\n    db.righe_in_ordine_fornitore.id_ordine_fornitore.writable = False\n    \n    db.righe_in_ordine_fornitore.prezzo.default = 0\n    #db.righe_in_ordine_cliente.prezzo.writable = False\n    #fields=[\'\']\n    \n    \n    cliente = db(db.fornitori.nome==nome_fornitore).select().first()\n    db.righe_in_ordine_fornitore.codice_iva.default=cliente.codice_iva\n    \n    db.righe_in_ordine_fornitore.riga_emessa_in_ddt.readable=False\n    db.righe_in_ordine_fornitore.riga_emessa_in_ddt.writable=False\n    \n    db.righe_in_ordine_fornitore.descrizione=Field.Virtual("Descrizione",lambda row: return_descrizione_da_codice_articolo(row.righe_in_ordine_fornitore))\n    \n    fields=[db.righe_in_ordine_fornitore.n_riga,db.righe_in_ordine_fornitore.codice_articolo,db.righe_in_ordine_fornitore.descrizione,db.righe_in_ordine_fornitore.quantita,db.righe_in_ordine_fornitore.prezzo,db.righe_in_ordine_fornitore.evasione]\n\n\n\n    righe_in_ordine_fornitore_form = SQLFORM.grid(db.righe_in_ordine_fornitore.id_ordine_fornitore == ordine_id,formname=\'aggiungi_righe_a_ordini_fornitori\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1],fields=fields)\n    #codici_iva_form.element(\'.web2py_counter\', replace=None)\n    \n    new_order = False\n    if \'new\' in request.args:\n        new_order = True\n        #anagrafica_form = SQLFORM.factory(db.anagrafica_articoli,formname="anagrafica_articoli",user_signature=True,args=[],sortable=True,paginate=5, formstyle = \'table3cols\')\n        \n    return locals()\n\ndef articoli_per_ordini():\n    \n    cliente = request.vars[\'cliente\']\n    listino = request.vars[\'listino\']\n    #print cliente,listino\n    \n    \n    links=[lambda row: BUTTON("Aggiungi articolo",_onclick=XML(\'aggiungiArticolo(\\\'\'+str(row.codice_articolo)+\'\\\')\'),_class=\'button btn btn-default\')]\n    fields=[db.anagrafica_articoli.codice_articolo,db.anagrafica_articoli.descrizione]\n    \n    \n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id)).select(groupby=db.anagrafica_articoli.codice_articolo)\n    \n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id))\n    \n    \n    anagrafica_form = SQLFORM.grid(db.anagrafica_articoli,groupby=db.anagrafica_articoli.codice_articolo,formname="anagrafica_articoli",searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',create=False,deletable=False,editable=True,csv=False,fields=fields,links=links,user_signature=False,args=request.args[:1])\n    return locals()\n    \n\ndef articoli_per_ordini_fornitori():\n    \n    fornitore = request.vars[\'fornitore\']\n    listino = request.vars[\'listino\']\n   \n    \n    links=[lambda row: BUTTON("Aggiungi articolo",_onclick=XML(\'aggiungiArticolo(\\\'\'+str(row.codice_articolo)+\'\\\')\'),_class=\'button btn btn-default\')]\n    fields=[db.anagrafica_articoli.codice_articolo,db.anagrafica_articoli.descrizione]\n    \n    \n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id)).select(groupby=db.anagrafica_articoli.codice_articolo)\n    \n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id))\n    \n    \n    anagrafica_form = SQLFORM.grid(db.anagrafica_articoli,groupby=db.anagrafica_articoli.codice_articolo,formname="anagrafica_articoli",searchable=True,sortable=False,paginate=5, formstyle = \'table3cols\',create=False,deletable=False,editable=False,csv=False,fields=fields,links=links,user_signature=False,args=request.args[:1])\n    return locals()\n    \ndef vettori():\n    form = SQLFORM.grid(db.vettore)\n    return dict(form=form)\n\ndef ordini_fornitori():\n    """\n    Selezione fornitori\n    Inserire numerazione progressiva relativa all\'anno in corso\n    Data di inserimento modificabile\n    Inserire magazzino della carpal\n    Scelta listino relativo al cliente\n    Ordine riferimento cliente\n    Inserisco le righe di codice articolo e in automatico presento i dati presi da anagrafica articoli\n    chiedo unit\xc3\xa0 di misura\n    quantit\xc3\xa0 richiesta\n    Prezzo singolo pezzo\n    Codice iva\n    """\n    try:\n        row = db(db.ordine_fornitore).select().last()\n        numero_ordine = row.ultimo_codice_ordine\n    except:\n        numero_ordine = "0/17"\n        \n    \n    db(db.numero_ordine_fornitore_progressivo).delete()\n    db.numero_ordine_fornitore_progressivo.insert(ultimo_codice_ordine=numero_ordine)\n    \n    codice_ordine_attuale = db(db.numero_ordine_fornitore_progressivo).select().first()[\'ultimo_codice_ordine\']\n    \n    import time\n    anno_corrente = str(time.strftime("%y"))\n    s=codice_ordine_attuale.split("/")\n    try:\n        #print s\n        if s[1] != anno_corrente:\n            numero_ordine = 1\n        else:\n            numero_ordine = int(s[0]) +1\n    except Exception,e:\n        #print e\n        numero_ordine = 1\n        \n            \n    codice_ordine_attuale = str(numero_ordine)+"/"+anno_corrente\n    \n    \n    righe_in_ordine_cliente_form=""\n    db.ordine_fornitore.ultimo_codice_ordine.default=codice_ordine_attuale\n    db.ordine_fornitore.ultimo_codice_ordine.writable=False\n    #fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.nome_cliente,db.ordine_cliente.data_inserimento,db.ordine_cliente.listino,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente,db.ordine_cliente.magazzino_interno]\n    fields=[\'ultimo_codice_ordine\',\'nome_fornitore\',\'data_inserimento\',\'listino\',\'data_ordine_fornitore\',\'magazzino_interno\',\'pagamento\',\'trasporto_a_mezzo\',\'porto\',\'vettore\']\n    \n    ordini_fornitori_form = SQLFORM(db.ordine_fornitore,formname=\'ordini_fornitori\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,fields=fields)\n    #ordini_clienti_form.element(\'.web2py_counter\', replace=None)\n         \n    #ordini_clienti_form.element(\'nome_cliente\')[\'_on_change\']=\'change_me()\'\n    \n    if ordini_fornitori_form.process().accepted:\n        id_fornitore = db(db.fornitori.nome == ordini_fornitori_form.vars.nome_fornitore).select().first()\n        \n        row = db(db.ordine_fornitore.id == ordini_fornitori_form.vars.id).select().first()\n        row.update_record(id_fornitore = id_fornitore.id)\n    \n        redirect(URL(\'aggiungi_righe_a_ordini_fornitori\',args=ordini_fornitori_form.vars.id))\n        \n        \n    links=[lambda row: A(XML(\'Visualizza righe\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_righe_a_ordini_fornitori\',args=row.id)),lambda row: A(XML(\'Stampa\'),_onclick=XML(\'stampaOrdineFornitore(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n    \n    \n    db.ordine_fornitore.ddt_completato.writable=False\n    \n    fields = [db.ordine_fornitore.ultimo_codice_ordine,db.ordine_fornitore.nome_fornitore,db.ordine_fornitore.data_inserimento,db.ordine_fornitore.listino,db.ordine_fornitore.riferimento_ordine_cliente,db.ordine_fornitore.data_ordine_fornitore,db.ordine_fornitore.pagamento, db.ordine_fornitore.ddt_completato]\n    righe_in_ordine_fornitore_form = SQLFORM.grid(db.ordine_fornitore,formname=\'ordini_fornitori\',maxtextlength=100,create=False,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links,fields = fields)\n        \n    return dict(ordini_fornitori_form = ordini_fornitori_form,righe_in_ordine_fornitore_form=righe_in_ordine_fornitore_form)\n\n\n\ndef ordini_clienti():\n    """\n    Selezione cliente\n    Inserire numerazione progressiva relativa all\'anno in corso\n    Data di inserimento modificabile\n    Inserire magazzino della carpal\n    Scelta listino relativo al cliente\n    Ordine riferimento cliente\n    Inserisco le righe di codice articolo e in automatico presento i dati presi da anagrafica articoli\n    chiedo unit\xc3\xa0 di misura\n    quantit\xc3\xa0 richiesta\n    Prezzo singolo pezzo\n    Codice iva\n    """\n    row = db(db.ordine_cliente).select().last()\n    numero_ordine = row.ultimo_codice_ordine\n    \n    \n    db(db.numero_ordine_cliente_progressivo).delete()\n    db.numero_ordine_cliente_progressivo.insert(ultimo_codice_ordine=numero_ordine)\n    \n    codice_ordine_attuale = db(db.numero_ordine_cliente_progressivo).select().first()[\'ultimo_codice_ordine\']\n    \n    import time\n    anno_corrente = str(time.strftime("%y"))\n    s=codice_ordine_attuale.split("/")\n    try:\n        #print s\n        if s[1] != anno_corrente:\n            numero_ordine = 1\n        else:\n            numero_ordine = int(s[0]) +1\n    except Exception,e:\n        #print e\n        numero_ordine = 1\n        \n            \n    codice_ordine_attuale = str(numero_ordine)+"/"+anno_corrente\n    \n    \n    righe_in_ordine_cliente_form=""\n    db.ordine_cliente.ultimo_codice_ordine.default=codice_ordine_attuale\n    db.ordine_cliente.ultimo_codice_ordine.writable=False\n    #fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.nome_cliente,db.ordine_cliente.data_inserimento,db.ordine_cliente.listino,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente,db.ordine_cliente.magazzino_interno]\n    fields=[\'ultimo_codice_ordine\',\'nome_cliente\',\'data_inserimento\',\'listino\',\'riferimento_ordine_cliente\',\'data_ordine_cliente\',\'magazzino_interno\',\'pagamento\',\'ente\']\n    \n    ordini_clienti_form = SQLFORM(db.ordine_cliente,formname=\'ordini_clienti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,fields=fields)\n    #ordini_clienti_form.element(\'.web2py_counter\', replace=None)\n         \n    #ordini_clienti_form.element(\'nome_cliente\')[\'_on_change\']=\'change_me()\'\n    \n    if ordini_clienti_form.process().accepted:\n        id_cliente = db(db.clienti.nome == ordini_clienti_form.vars.nome_cliente).select().first()\n        print "Id cliente : ",id_cliente\n        row = db(db.ordine_cliente.id == ordini_clienti_form.vars.id).select().first()\n        row.update_record(id_cliente = id_cliente.id)\n    \n        redirect(URL(\'aggiungi_righe_a_ordini_clienti\',args=ordini_clienti_form.vars.id))\n       \n    \n        \n    links=[lambda row: A(XML(\'Visualizza righe\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_righe_a_ordini_clienti\',args=row.id))]\n    fields=[db.ordine_cliente.id,db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.nome_cliente,db.ordine_cliente.id_cliente,db.ordine_cliente.data_inserimento,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente,db.ordine_cliente.ddt_completato,db.ordine_cliente.pagamento,db.ordine_cliente.ente]\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.ordine_cliente,formname=\'ordini_clienti\',maxtextlength=100,create=False,editable=True, deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links,exportclasses=export_classes,fields=fields)\n        \n    return dict(ordini_clienti_form = ordini_clienti_form,righe_in_ordine_cliente_form=righe_in_ordine_cliente_form)\n\ndef return_imposta(valore,percentuale):\n    #print "IN RETURN IMPOSTA ",valore,percentuale\n    if percentuale > 0:\n        return round(valore * percentuale / 100,2)\n    else:\n        return 0\n   \ndef gestione_bolli():\n    form = SQLFORM.grid(db.bolli,csv=False,create=True,editable=True,searchable=False,deletable=False)\n    return locals()\n    pass \n    \ndef return_currency(c):\n     importo = Money(str(c),"EUR")\n     importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n     #print "IN RETURN CURRENCY"\n     #print importo\n     return importo\n     \n@service.jsonrpc\n@service.jsonrpc2\ndef stampa_ordine_fornitore(args):\n    \n    \n    id_ordine_fornitore=args[\'0\']\n    ##print "ID FORNITORE : ",id_cliente\n    \n    row = db(db.ordine_fornitore.id == id_ordine_fornitore).select().first()\n    id_cliente = row.id_fornitore\n    ultimo_codice_ordine = row.ultimo_codice_ordine\n    riferimento_ordine_cliente = row.riferimento_ordine_cliente\n    trasporto_a_mezzo = row.trasporto_a_mezzo\n    porto = row.porto\n    vettore = row.vettore\n    try:\n        domicilio = db(db.vettore.nome==vettore).select().first().domicilio\n    except:\n        domicilio = ""\n    """\n    Dati cliente\n    """\n    dati_cliente = db(db.fornitori.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    \n    \n    #print dati_cliente\n    \n    fattura = ORDINE_FORNITORE("ORDINE_FORNITORE",datetime.datetime.now().date().strftime("%d/%m/%Y"),ultimo_codice_ordine)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,pi_cliente,nazione_cliente,cf_cliente)\n    \n    \n    fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\n    \n    #ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    \n    """\n    Prendo le righe collegate all\'ordine fornitore ma le chiamo ddts_id per velocit\xc3\xa0 visto che ho fatto un copia e incolla dalla fattura\n    """\n    #ddts_id = db(db.righe_in_ordine_fornitore.id_ordine_fornitore==ordine_id).select()\n    \n    #for ddt_id in ddts_id:\n        \n        \n        \n    if True: #per non modificare l\'identazione    \n        rows = db(db.righe_in_ordine_fornitore.id_ordine_fornitore==id_ordine_fornitore).select()\n        \n        for row in rows:\n            """\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\n\n            """\n            \n            """\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\n            """\n            \n            id_ordine = row.id_ordine_fornitore\n            try:\n                  pagamento = db(db.ordine_fornitore.id == id_ordine).select().first()["pagamento"]\n                  #print "pagamento = ",pagamento\n                  if pagamento is None:\n                        pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                        \n                  giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                  scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                  scadenza = scadenza.strftime("%d/%m/%Y")\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\n            except:\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n            saved_importo = 0\n            #print "Aggiunta rig"\n            sconti = row.sconti\n            if row.sconti is None:\n                \n                sconti=""\n            if "commento" not in row.codice_articolo:\n                try:\n                    importo = saved_importo = float(row.quantita) * float(row.prezzo)\n                    importo = Money(str(importo),"EUR")\n                    importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                    prezzo = str(row.prezzo).replace(".",",")\n                except:\n                    importo = "0"\n                    prezzo = "0"\n            else:\n                importo = "0"\n                prezzo = "0"\n            \n            \n            \n            codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n            percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n            \n           \n            \n            \n            \n            \n            \n            if "commento" not in row.codice_articolo:\n                row.descrizione = db(db.anagrafica_articoli.codice_articolo == row.codice_articolo).select().first().descrizione\n                row.riferimento_ordine_cliente = riferimento_ordine_cliente\n                row.u_m = "Nr."\n                importo_totale +=saved_importo\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                if not codice_iva in lista_codici_iva:\n                    lista_codici_iva[codice_iva] = saved_importo\n                else:\n                    lista_codici_iva[codice_iva] += saved_importo\n                row.evasione = row.evasione.strftime("%d/%m/%Y")\n            else:\n                row.descrizione = row.commento\n                row.codice_articolo = ""\n                row.riferimento_ordine_cliente =""\n                row.u_m =""\n                row.quantita =""\n                row.sconti =""\n                row.prezzo =""\n                importo =""\n                codice_iva =""\n                prezzo=""\n                row.evasione = ""    \n                \n            #row.u_m = db(db.anagrafica_articoli.codice_articolo == row.codice_articolo).select().first().u_m\n            \n           \n            \n            try:\n                fattura.add_row(row.codice_articolo,row.descrizione,row.evasione,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\n            except Exception,e:\n                #print "Eccezzione "\n                #print e\n                pass\n    \n    \n    ##print lista_codici_iva\n    \n    \n    \n    bollo_presente = False\n    bollo = 0\n    importo_totale = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n        importo_totale += importo_netto + imposta_iva        \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale\n              \n    importo_totale = Money(str(importo_totale),"EUR")\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n    fattura.totale(str(importo_totale))\n    \n    #db.fatture_salvate.insert(data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = ddt_id.id,totale = importo_totale_da_salvare)     \n        \n        \n    fattura.more_info="Trasporto a mezzo  : "+str(trasporto_a_mezzo)+" Porto : "+str(porto)\n    fattura.more_info_2="Vettore : "+str(vettore)+"  "+str(domicilio)\n   \n    \n    \n    #fattura.footer("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\n    """\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\n    fattura.totale("14567645")\n    """\n    fattura.insert_rows()\n    \n        \n    fattura.create_pdf()\n\n\ndef gestione_lavorazioni():\n\tform = SQLFORM.grid(db.lavorazioni,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\n\treturn locals()\n\n@service.jsonrpc\n@service.jsonrpc2\ndef stampa_rcp(args):\n    \n    id_riga_in_produzione=args[\'0\']\n    row = db(db.articoli_in_produzione.id == id_riga_in_produzione).select().first()\n    \n    scadenza=datetime.datetime.strptime(str(row.data_consegna),"%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")\n    cliente=row.cliente\n    riferimento_ordine=row.riferimento_ordine\n    codice_ordine=row.codice_ordine\n    codice_articolo=row.codice_articolo\n    descrizione=row.descrizione\n    saldo=row.qta_saldo\n    id_riga=row.id_riga\n    \n    dettaglio_ordine = db(db.ordine_cliente.ultimo_codice_ordine==codice_ordine).select().first()\n    \n    #print dettaglio_ordine\n    try:\n        ente=dettaglio_ordine.ente\n        if ente is None:\n            ente="Nessuno"\n    except:\n        ente="Nessuno"\n\n    #print "Ente : ",ente\n    try:\n        revisione = str(db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().revisione)\n        #print "revisione = "+ revisione\n    except Exception,e:\n    \t#print e.message\n        pass\n    \n    \n    p = CONTROLLO_PRODUZIONE("Microcarp S.r.l.","Registro dei Controlli in Produzione")\n    p.intestazione(cliente,riferimento_ordine, codice_articolo,scadenza,revisione, saldo)\n       \n    p.footer(str(id_riga),ente)\n   \n   \n    lavorazioni=db(db.lavorazioni).select()\n    \n    for lavorazione in lavorazioni:\n       \n        p.add_row(lavorazione.nome,lavorazione.controllo)\n    \n    p.insert_rows()\n    p.create_pdf()\n    \n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura(args):\n    \n    \n    id_cliente=args[\'0\']\n    #print "ID CLIENTE : ",id_cliente\n    \n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    \n    """\n    Dati cliente\n    """\n    \n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    iban_cliente = dati_cliente.codice_iban\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    \n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\n    annotazioni=dati_cliente.annotazioni\n    \n    \n    \n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    for r in ddts_id:\n        data_scelta = r.data_emissione\n        \n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\n    #print "MESE : "+str(m.month)\n    \n    day_start,day_end = monthrange(m.year, m.month)\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\n    \n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\n    \n    \n    fattura = FATTURA("FATTURA DIFFERITA",start_date.strftime("%d/%m/%Y"),numero_fattura_da_salvare)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\n    \n    \n    try:\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\n    \n    except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n    \n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n    \n    scritta_esenzione = False\n    \n    for ddt_id in ddts_id:\n        \n        \n        lista_ddt.append(ddt_id.ddt_id)\n        \n        riferimento_ddt = "Rif. DDT : " + ddt_id.numero_ddt + " del " + ddt_id.data_emissione\n        fattura.add_row("",riferimento_ddt,"","","","","","","")\n        \n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id.ddt_id).select()\n        #print "DDT ID : ",ddt_id.ddt_id\n        \n        for row in rows:\n            """\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\n\n            """\n            \n            """\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\n            """\n            if not "commento" in row.codice_articolo:\n                id_ordine = row.id_ordine\n                try:\n                      try:\n                          pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\n                          #print "pagamento = ",pagamento\n                      except:\n                          pagamento = None\n                          \n                      if pagamento is None:\n                            pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                       \n                      if "F.M." in pagamento:\n                          fine_mese = True\n                      else:\n                          fine_mese = False\n                          \n                       \n                      \n                        \n                      \n                      \n                      if not fine_mese:\n                           try:\n                              giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                          \n                              if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                                \t   \t\n                              scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                              scadenza_salvata = scadenza\n                              scadenza = scadenza.strftime("%d/%m/%Y")\n                           except:\n                               response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                               return locals()\n                      else:\n                          \n                           if ("M.S." or "ms") in pagamento:\n                               \n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                               giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                               \n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                               \n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                               scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                               scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                               scadenza = scadenza.strftime("%d/%m/%Y") \n                               \n                           else:\n                               #Fine mese senza M.S.               \n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           \n                          \n                          \n                           pass\n                      \n                      \n                      fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),pagamento,str(scadenza))\n                except Exception,e:\n                      #print e\n                      response.flash="Controllare il tipo di pagamento in anagrafica"\n                      return locals()\n                \n                #print "Aggiunta rig"\n                sconti = row.sconti\n                if row.sconti is None:\n                    \n                    sconti=""\n                    \n                try:\n                    if row.prezzo == "0":\n                        row.prezzo = ""\n                    f = float(row.prezzo)\n                    #print "SONO QUI : PREZZO = ".format(f)\n                except:\n                    msg = "Prezzo non presente " + riferimento_ddt + " Cod.Art : " + row.codice_articolo\n                    response.flash=msg\n                    return locals()\n                try:\n                \tf=float(row.quantita)\n                except:\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo + " Qta : " +row.qta\n                \tresponse.flash=msg\n                \treturn locals()\n                \tpass\n                \n                importo = saved_importo = float(row.quantita) * float(row.prezzo)\n                importo = Money(str(importo),"EUR")\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                prezzo = str(row.prezzo).replace(".",",")\n                \n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                \n                #print "VALLLLE " + row.codice_iva\n                \n                descrizione_codice_iva = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine, db.righe_in_ordine_cliente.n_riga==row.n_riga).select().first()["codice_iva"]\n                codice_iva=db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["codice_iva"]\n                \n                \n                row.codice_iva=codice_iva\n                \n                \n                if "Esenzione" in descrizione_codice_iva:\n                    scritta_esenzione = True\n                \n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["percentuale_iva"]\n                \n                importo_totale +=saved_importo\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                \n                if not codice_iva in lista_codici_iva:\n                    lista_codici_iva[codice_iva] = saved_importo\n                else:\n                    lista_codici_iva[codice_iva] += saved_importo\n            \n            \n            else:\n            \t"""\n            \tPasso il commento ma resetto tutti i campi\n            \t"""\n            \trow.riferimento_ordine=""\n            \trow.u_m=""\n            \trow.quantita=""\n            \tprezzo=""\n            \tsconti=""\n            \timporto=""\n            \tcodice_iva=""\n            \trow.codice_articolo=""\n            \t#row.descrizione=row.commento\n            \t\n            \n            \n                \n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\n            \n            \n            \n            \n            r = db(db.ddt_cliente.id == ddt_id.ddt_id).select().first()\n            r.update_record(fattura_emessa = "T")\n    \n    #print lista_codici_iva\n    \n    \n    if scritta_esenzione:\n        fattura.add_row("","","","","","","","","")\n        fattura.add_row("","","","","","","","","")\n        \n        scritte = scritta_esenzione_cliente.split(",")\n        \n        for scritta in scritte:\n            fattura.add_row("",scritta,"","","","","","","")\n    \n    \n    \n    bollo_presente = False\n    bollo = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n                \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale +imposta_iva\n    \n    if not "/" in pagamento:\n              \n     \timporto_totale = Money(str(importo_totale),"EUR")\n      \timporto_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n     \tfattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n      \tfattura.totale(str(ritorna_prezzo_europeo(importo_totale_da_salvare)))\n    \n     \tscadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n      \tif "r.b." in pagamento.lower() or "riba" in pagamento.lower():\n          riba=True\n        else:\n          riba=False\n        db.fatture_salvate.insert(scadenza=scadenza,nome_cliente=nome_cliente,data_fattura = start_date,numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare,richiede_riba=riba,riba_emessa=False,user_id=auth.user_id)     \n    \n    else:\n    \t### Devo mettere due fatture con il pagamento e scadenza corretti\n    \t\n    \t\n    \t\n    \tfirst_half = round(importo_totale_da_salvare / 2,2)\n        second_half= importo_totale_da_salvare - first_half\n        \n        s=pagamento\n        \n        st = int(s[s.index("/")+1:s.index("/")+4]) - int(s[s.index("/")-3:s.index("/")])\n        second_date = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n        first_date = second_date - datetime.timedelta(days = int(st) +1)\n        \n        if "F.M" in pagamento:\n        \t      pass\n        \t      first_date = first_date.strftime("%d/%m/%Y")\n                  #day_start,day_end = monthrange(first_date.year, first_date.month)\n                  #first_date = str(day_end)+"/"+str(first_date.month)+"/"+str(first_date.year)\n              \n        else:\n                  first_date = first_date.strftime("%d/%m/%Y")\n                  \n        second_date = second_date.strftime("%d/%m/%Y")\n    \t\n    \tif "r.b." in pagamento.lower() or "riba" in pagamento.lower():\n          riba=True\n        else:\n          riba=False\n          \n        first_date = datetime.datetime.strptime(first_date,"%d/%m/%Y")\n        second_date = datetime.datetime.strptime(second_date,"%d/%m/%Y")\n        \n        \n        importo_totale = Money(str(importo_totale),"EUR")\n      \timporto_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n     \tfattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n      \tfattura.totale(str(ritorna_prezzo_europeo(importo_totale_da_salvare)))\n        \n        db.fatture_salvate.insert(scadenza=first_date,nome_cliente=nome_cliente,data_fattura = start_date,numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = first_half,richiede_riba=riba,riba_emessa=False,user_id=auth.user_id)\n        db.fatture_salvate.insert(scadenza=second_date,nome_cliente=nome_cliente,data_fattura = start_date,numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = second_half,richiede_riba=riba,riba_emessa=False,user_id=auth.user_id)\n        \n    \t\n    \n    \n    #print "SCADENZA {0}".format(scadenza)    \n        \n    \n   \n    \n    """\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\n    fattura.totale("14567645")\n    """\n    \n    fattura.add_row("","","","","","","","","")\n    fattura.add_row("",annotazioni,"","","","","","","")\n    \n    fattura.insert_rows()\n    fattura.create_pdf()\n    \n    db(db.fattura).delete()\n    db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\n    db(db.ddt_da_fatturare.user_id == auth.user_id).delete()\n   \ndef return_scadenza(fattura_id):\n    ddts = db(db.fatture_salvate.id == fattura_id).select().first()["id_ddt"]\n    ddts_list = eval(ddts)\n    scadenza=""\n    start_date = datetime.datetime.strptime("28/02/2017","%d/%m/%Y")\n    for ddt in ddts_list:\n        \n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id ==ddt).select()\n        #print "DDT ID : ",ddt\n        \n        for row in rows:\n            """\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\n\n            """\n            \n            """\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\n            """\n            \n            id_ordine = row.id_ordine\n            try:\n                  try:\n                      pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\n                      #print "pagamento = ",pagamento\n                  except:\n                      pagamento = None\n                      \n                  if pagamento is None:\n                        pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                   \n                  if "F.M." in pagamento:\n                      fine_mese = True\n                  else:\n                      fine_mese = False\n                      \n                   \n                  \n                    \n                  \n                  \n                  if not fine_mese:\n                       try:\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                      \n                      \n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                          scadenza_salvata = scadenza\n                          scadenza = scadenza.strftime("%d/%m/%Y")\n                       except:\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                           return locals()\n                  else:\n                      \n                       if "M.S." in pagamento:\n                           \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                           scadenza = scadenza.date() + datetime.timedelta(days = 10)\n                           scadenza = scadenza.strftime("%d/%m/%Y") \n                           \n                       else:\n                                          \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                       \n                      \n                      \n            except Exception,e:\n                 #print e\n                 pass          \n        \n        \n    \n    \n    return scadenza\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_preview(args):\n    \n    \n    id_cliente=args[\'0\']\n    ##print "ID CLIENTE : ",id_cliente\n    \n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    \n    ##print "qui"\n    \n    """\n    Dati cliente\n    """\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    iban_cliente = dati_cliente.codice_iban\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\n    \n    annotazioni=dati_cliente.annotazioni\n    \n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    for r in ddts_id:\n        data_scelta = r.data_emissione\n        \n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\n    #print "MESE : "+str(m.month)\n    \n    day_start,day_end = monthrange(m.year, m.month)\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\n    \n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\n    \n    \n    \n    \n    fattura = FATTURA("FATTURA DIFFERITA",start_date.strftime("%d/%m/%Y"),numero_fattura_da_salvare,anteprima=True)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\n    \n    \n    \n    try:\n        ##print "IBAN : ",iban_cliente\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),"PAGAMENTO","SCADENZA")\n    \n    except:\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n    \n    \n    \n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n    for ddt_id in ddts_id:\n        \n        \n        lista_ddt.append(ddt_id.ddt_id)\n        riferimento_ddt = "Rif. DDT : " + ddt_id.numero_ddt + " del " + ddt_id.data_emissione\n        fattura.add_row("",riferimento_ddt,"","","","","","","")\n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id.ddt_id).select()\n        #print "DDT ID : ",ddt_id.ddt_id\n        \n        scritta_esenzione = False\n        \n        for row in rows:\n            #print row\n            """\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\n\n            """\n            \n            """\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\n            """\n            if not "commento" in row.codice_articolo:\n                id_ordine = row.id_ordine\n                try:\n                      \n                      try:\n                          pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\n                          #print "pagamento = ",pagamento\n                      except:\n                          pagamento = None\n                      \n                      \n                      \n                      if pagamento is None:\n                            pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                       \n                      if "F.M." in pagamento:\n                          fine_mese = True\n                      else:\n                          fine_mese = False\n                          \n                       \n                      \n                        \n                    \n                     \n                      if not fine_mese:\n                          \n                          try:\n                              giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                              \n                              if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                          \n                              scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                              scadenza_salvata = scadenza\n                              scadenza = scadenza.strftime("%d/%m/%Y")\n                          except:\n                               response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                               return locals()\n                              \n                      else:\n                          \n                           if ("M.S." or "ms") in pagamento:\n                               \n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                               \n                               giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                               scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                               scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                               scadenza = scadenza.strftime("%d/%m/%Y") \n                               \n                           else:\n                               #Fine mese senza M.S.               \n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                               \n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                              \n                                       \n                          \n                           \n                      \n                      \n                      fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),pagamento,str(scadenza))\n                except Exception,e:\n                      #print e\n                      response.flash="Controllare il tipo di pagamento in anagrafica"\n                      return locals()\n                \n                #print "Aggiunta rig"\n                sconti = row.sconti\n                if row.sconti is None:\n                    \n                    sconti=""\n                \n                try:\n                    if row.prezzo == "0":\n                        row.prezzo = ""\n                    f = float(row.prezzo)\n                    #print "SONO QUI : PREZZO = ".format(f)\n                except:\n                    msg = "Prezzo non presente " + riferimento_ddt + " Cod.Art : " + row.codice_articolo\n                    response.flash=msg\n                    return locals()\n                   \n                try:\n                \tf=float(row.quantita)\n                except:\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo + " Qta : "\n                \tresponse.flash=msg\n                \treturn locals()\n                \tpass\n                \n                importo = saved_importo = float(row.quantita) * float(row.prezzo)\n                \n                importo = Money(str(importo),"EUR")\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                prezzo = str(row.prezzo).replace(".",",")\n                \n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                \n                #print "VALLLLE " + row.codice_iva\n                \n                descrizione_codice_iva = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine, db.righe_in_ordine_cliente.n_riga==row.n_riga).select().first()["codice_iva"]\n                codice_iva=db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["codice_iva"]\n                \n                \n                row.codice_iva=codice_iva\n                \n                \n                #print "Nuovo codice iva : "+row.codice_iva\n                \n                if "Esenzione" in descrizione_codice_iva:\n                    scritta_esenzione = True\n                \n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["percentuale_iva"]\n                \n                importo_totale +=saved_importo\n                \n               \n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                \n                if not codice_iva in lista_codici_iva:\n                    lista_codici_iva[codice_iva] = saved_importo\n                else:\n                    lista_codici_iva[codice_iva] += saved_importo\n                \n             \n                \n            else:\n            \t"""\n            \tPasso il commento ma resetto tutti i campi\n            \t"""\n            \t#print row\n            \trow.riferimento_ordine=""\n            \trow.u_m=""\n            \trow.quantita=""\n            \tprezzo=""\n            \tsconti=""\n            \timporto=""\n            \tcodice_iva=""\n            \trow.codice_articolo=""\n            \t#row.descrizione=row.commento\n            \t\n            \t\n            \t\n            \t\n            \t\n            \n            \n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\n        \n    \n    \n    #print lista_codici_iva\n    \n    \n    if scritta_esenzione:\n        fattura.add_row("","","","","","","","","")\n        fattura.add_row("","","","","","","","","")\n        \n        scritte = scritta_esenzione_cliente.split(",")\n        \n        for scritta in scritte:\n            fattura.add_row("",scritta,"","","","","","","")\n            \n        \n        \n       \n    \n    \n    \n    bollo_presente = False\n    bollo = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        #print row.codice_iva\n        #print codice_iva\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        #print dettaglio_iva\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n                \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale +imposta_iva\n    #print "Imposta iva {0}".format(imposta_iva)\n    #print "Importo calcolato {0}".format(importo_totale_da_salvare)\n    \n              \n    importo_totale = Money(str(importo_totale),"EUR")\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n    fattura.totale(str(ritorna_prezzo_europeo(importo_totale_da_salvare)))\n    \n    #db.fatture_salvate.insert(scadenza=scadenza_salvata,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \n    \n    ##print "SCADENZA {0}".format(scadenza)    \n        \n    \n   \n    \n    """\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\n    fattura.totale("14567645")\n    """\n    \n    fattura.add_row("","","","","","","","","")\n    fattura.add_row("",annotazioni,"","","","","","","")\n    \n    fattura.insert_rows()\n    fattura.create_pdf()\n    \n    #db(db.fattura).delete()\n    #db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_preview_istantanea(args):\n    \n    \n    id_cliente=args[\'0\']\n    #print "ID CLIENTE : ",id_cliente\n    \n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    \n   \n    """\n    Dati cliente\n    """\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    annotazioni=dati_cliente.annotazioni\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\n\n\n    scritta_esenzione = False\n    #print "1"\n    #print dettagli_banca\n    #print "2"\n    \n    start_date = datetime.datetime.now()\n    \n    fattura = FATTURA("FATTURA IMMEDIATA",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare,anteprima=True)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\n    \n    try:\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\n        \n    except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\n                  return locals()\n    \n    \n    \n    \n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n\n    scritta_esenzione = False\n    \n\n    if True:\n        \n        rows = db(db.righe_in_fattura_istantanea).select()\n        \n        for row in rows:\n            \n            try:\n                 \n                  \n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                        \n                  if "F.M." in pagamento:\n                      fine_mese = True\n                  else:\n                      fine_mese = False\n                      \n                   \n                  \n                    \n                  \n                  \n                  if not fine_mese:\n                       try:\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                          if start_date.date().month==12 or start_date.date().month==1:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                      \n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                          scadenza_salvata = scadenza\n                          scadenza = scadenza.strftime("%d/%m/%Y")\n                       except:\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                           return locals()\n                  else:\n                      \n                       if ("M.S." or "ms") in pagamento:\n                           \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                           scadenza = scadenza.strftime("%d/%m/%Y") \n                           \n                       else:\n                           #Fine mese senza M.S.               \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           \n                           if start_date.date().month==12 or start_date.date().month==1:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                           \n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                       \n                      \n                      \n                       pass \n                   \n                   \n                  \n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\n            except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n            \n            \n            sconti = row.sconti\n            if row.sconti is None:\n                \n                sconti=""\n            \n            if len(row.codice_articolo) > 0 and not \'commento\' in row.codice_articolo:\n                try:\n                    if row.prezzo == "0":\n                        row.prezzo = ""\n                    f = float(row.prezzo)\n                    #print "SONO QUI : PREZZO = ".format(f)\n                except:\n                    msg = "Prezzo non presente Cod.Art : " + row.codice_articolo\n                    response.flash=msg\n                    return locals()\n                   \n                try:\n                \tf=float(row.qta)\n                except:\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\n                \tresponse.flash=msg\n                \treturn locals()\n                \tpass\n            \n                importo = saved_importo = float(row.qta) * float(row.prezzo)\n                importo = Money(str(importo),"EUR")\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                prezzo = str(row.prezzo).replace(".",",")\n                \n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n                descrizione_codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["descrizione_codice_iva"]\n                if "Esenzione" in descrizione_codice_iva:\n                    scritta_esenzione = True\n                \n                importo_totale +=saved_importo\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                \n                if not codice_iva in lista_codici_iva:\n                    lista_codici_iva[codice_iva] = saved_importo\n                else:\n                    lista_codici_iva[codice_iva] += saved_importo\n            \n            else:\n                row.u_m,row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","","",""\n            \trow.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","",""\n                row.descrizione=row.commento\n                row.u_m=""\n            \n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\n        \n    \n    \n    #print lista_codici_iva\n\n\n    if scritta_esenzione:\n        fattura.add_row("","","","","","","","","")\n        fattura.add_row("","","","","","","","","")\n        \n        scritte = scritta_esenzione_cliente.split(",")\n        \n        for scritta in scritte:\n            fattura.add_row("",scritta,"","","","","","","")\n    \n    \n    scadenza=""\n    bollo_presente = False\n    bollo = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n                \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale +imposta_iva\n    \n    \n              \n    importo_totale = Money(str(importo_totale),"EUR")\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n    fattura.totale(str(importo_totale_da_salvare))\n    \n    #db.fatture_salvate.insert(scadenza=scadenza_salvata,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \n    \n    #print "SCADENZA {0}".format(scadenza)    \n        \n    \n   \n    \n    """\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\n    fattura.totale("14567645")\n    """\n    fattura.add_row("","","","","","","","","")\n    fattura.add_row("",annotazioni,"","","","","","","")\n    fattura.insert_rows()\n    fattura.create_pdf()\n    \n    #db(db.fattura).delete()\n    #db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_preview_istantanea_accredito(args):\n    \n    #print "In preview instantanea accredito"\n    id_cliente=args[\'0\']\n    #print "ID CLIENTE : ",id_cliente\n    \n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    \n   \n    """\n    Dati cliente\n    """\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    annotazioni=dati_cliente.annotazioni\n    \n    \n    #print "1"\n    #print dettagli_banca\n    #print "2"\n    \n    \n    start_date = datetime.datetime.now()\n    \n    fattura = FATTURA("NOTA DI ACCREDITO",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare,anteprima=True)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\n    \n    try:\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\n        \n    except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\n                  return locals()\n    \n    \n    \n    \n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n    if True:\n        \n        rows = db(db.righe_in_fattura_istantanea).select()\n        \n        for row in rows:\n            \n            try:\n                 \n                  \n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                        \n                  if "F.M." in pagamento:\n                      fine_mese = True\n                  else:\n                      fine_mese = False\n                      \n                   \n                  \n                    \n                  \n                  \n                  if not fine_mese:\n                       try:\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                      \n                      \n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                          scadenza_salvata = scadenza\n                          scadenza = scadenza.strftime("%d/%m/%Y")\n                       except:\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                           return locals()\n                  else:\n                      \n                       if ("M.S." or "ms") in pagamento:\n                           \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                           scadenza = scadenza.strftime("%d/%m/%Y") \n                           \n                       else:\n                           #Fine mese senza M.S.               \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                       \n                      \n                      \n                       pass \n                   \n                   \n                  \n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\n            except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n            \n            \n            sconti = row.sconti\n            if row.sconti is None:\n                \n                sconti=""\n            \n            if len(row.codice_articolo) > 0 and not \'commento\' in row.codice_articolo:\n                try:\n                    if row.prezzo == "0":\n                        row.prezzo = ""\n                    f = float(row.prezzo)\n                    #print "SONO QUI : PREZZO = ".format(f)\n                except:\n                    msg = "Prezzo non presente   Cod.Art : " + row.codice_articolo\n                    response.flash=msg\n                    return locals()\n            \n                try:\n                \tf=float(row.qta)\n                except:\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\n                \tresponse.flash=msg\n                \treturn locals()\n                \tpass\n                \t\n                \n                importo = saved_importo = float(row.qta) * float(row.prezzo)\n                importo = Money(str(importo),"EUR")\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                prezzo = str(row.prezzo).replace(".",",")\n                \n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n                \n                importo_totale +=saved_importo\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                \n                if not codice_iva in lista_codici_iva:\n                    lista_codici_iva[codice_iva] = saved_importo\n                else:\n                    lista_codici_iva[codice_iva] += saved_importo\n            \n            else:\n                row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","",""\n                row.descrizione=row.commento\n            \n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\n        \n    \n    \n    #print lista_codici_iva\n    \n    \n    scadenza=""\n    bollo_presente = False\n    bollo = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n                \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale +imposta_iva\n    \n    \n    #print "Importo totale "+str(importo_totale_da_salvare)      \n    importo_totale = Money(str(importo_totale),"EUR")\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n    fattura.totale(str(importo_totale_da_salvare))\n    \n    #db.fatture_salvate.insert(scadenza=scadenza_salvata,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \n    \n    #print "SCADENZA {0}".format(scadenza)    \n        \n    \n   \n    \n    """\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\n    fattura.totale("14567645")\n    """\n    fattura.add_row("","","","","","","","","")\n    fattura.add_row("",annotazioni,"","","","","","","")\n    \n    fattura.insert_rows()\n    fattura.create_pdf()\n    \n    #db(db.fattura).delete()\n    #db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_istantanea(args):\n    \n    \n    id_cliente=args[\'0\']\n    #print "ID CLIENTE : ",id_cliente\n    \n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    \n   \n    """\n    Dati cliente\n    """\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    annotazioni=dati_cliente.annotazioni\n    \n    scritta_esenzione = False\n    #print "1"\n    #print dettagli_banca\n    #print "2"\n    \n    start_date = datetime.datetime.now()\n    \n    fattura = FATTURA("FATTURA IMMEDIATA",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\n    \n    try:\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\n        \n    except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\n                  return locals()\n    \n    \n    \n    \n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n    if True:\n        \n        rows = db(db.righe_in_fattura_istantanea).select()\n        \n        for row in rows:\n            \n            try:\n                 \n                  \n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                        \n                  if "F.M." in pagamento:\n                      fine_mese = True\n                  else:\n                      fine_mese = False\n                      \n                   \n                  \n                    \n                  \n                  \n                  if not fine_mese:\n                       try:\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                      \n                      \n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                          scadenza_salvata = scadenza\n                          scadenza = scadenza.strftime("%d/%m/%Y")\n                       except:\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                           return locals()\n                  else:\n                      \n                       if ("M.S." or "ms") in pagamento:\n                           \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                           scadenza = scadenza.strftime("%d/%m/%Y") \n                           \n                       else:\n                           #Fine mese senza M.S.               \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                       \n                      \n                      \n                       pass \n                   \n                   \n                  \n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\n            except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n            \n            \n            sconti = row.sconti\n            if row.sconti is None:\n                \n                sconti=""\n            \n            if len(row.codice_articolo) > 0 and \'commento\' not in row.codice_articolo:\n                try:\n                    if row.prezzo == "0":\n                        row.prezzo = ""\n                    f = float(row.prezzo)\n                    #print "SONO QUI : PREZZO = ".format(f)\n                except:\n                    msg = "Prezzo non presente  Cod.Art : " + row.codice_articolo\n                    response.flash=msg\n                    return locals()\n                   \n                try:\n                \tf=float(row.qta)\n                except:\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\n                \tresponse.flash=msg\n                \t#print "!QWUEIQWEUQWUE"\n                \treturn locals()\n                \tpass\n            \n                importo = saved_importo = float(row.qta) * float(row.prezzo)\n                importo = Money(str(importo),"EUR")\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                prezzo = str(row.prezzo).replace(".",",")\n                \n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n\n                descrizione_codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["descrizione_codice_iva"]\n                if "Esenzione" in descrizione_codice_iva:\n                    scritta_esenzione = True\n               \n                \n                importo_totale +=saved_importo\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                \n                if not codice_iva in lista_codici_iva:\n                    lista_codici_iva[codice_iva] = saved_importo\n                else:\n                    lista_codici_iva[codice_iva] += saved_importo\n            \n            else:\n                row.u_m,row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","","",""\n                row.descrizione=row.commento\n            \n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\n        \n    \n    if scritta_esenzione:\n        scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\n        fattura.add_row("","","","","","","","","")\n        fattura.add_row("","","","","","","","","")\n        scritte = scritta_esenzione_cliente.split(",")\n        \n        for scritta in scritte:\n            fattura.add_row("",scritta,"","","","","","","")\n    #print lista_codici_iva\n    \n    \n    \n    bollo_presente = False\n    bollo = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n                \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale +imposta_iva\n    \n    \n              \n    importo_totale = Money(str(importo_totale),"EUR")\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n    fattura.totale(str(importo_totale_da_salvare))\n    \n    lista_ddt=[] #Fattura senza ddt = istantanea\n    \n    db.fatture_salvate.insert(scadenza=scadenza,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \n    \n    #print "SCADENZA {0}".format(scadenza)    \n        \n    \n   \n    \n    """\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\n    fattura.totale("14567645")\n    """\n    fattura.add_row("","","","","","","","","")\n    fattura.add_row("",annotazioni,"","","","","","","")\n    \n    fattura.insert_rows()\n    fattura.create_pdf()\n    \n    db(db.fattura).delete()\n    db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_istantanea_accredito(args):\n    \n    \n    id_cliente=args[\'0\']\n    #print "ID CLIENTE : ",id_cliente\n    \n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    \n   \n    """\n    Dati cliente\n    """\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    annotazioni=dati_cliente.annotazioni\n    \n    \n    #print "1"\n    #print dettagli_banca\n    #print "2"\n    \n    start_date = datetime.datetime.now()\n    \n    fattura = FATTURA("NOTA DI ACCREDITO",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\n    \n    try:\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\n        \n    except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\n                  return locals()\n    \n    \n    \n    \n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n    if True:\n        \n        rows = db(db.righe_in_fattura_istantanea).select()\n        \n        for row in rows:\n            \n            try:\n                 \n                  \n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                        \n                  if "F.M." in pagamento:\n                      fine_mese = True\n                  else:\n                      fine_mese = False\n                      \n                   \n                  \n                    \n                  \n                  \n                  if not fine_mese:\n                       try:\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                      \n                      \n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                          scadenza_salvata = scadenza\n                          scadenza = scadenza.strftime("%d/%m/%Y")\n                       except:\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                           return locals()\n                  else:\n                      \n                       if ("M.S." or "ms") in pagamento:\n                           \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                           scadenza = scadenza.strftime("%d/%m/%Y") \n                           \n                       else:\n                           #Fine mese senza M.S.               \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                       \n                      \n                      \n                       pass \n                   \n                   \n                  \n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\n            except Exception,e:\n                  #print e\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n            \n            \n            sconti = row.sconti\n            if row.sconti is None:\n                \n                sconti=""\n            \n            if len(row.codice_articolo) > 0 and not \'commento\' in row.codice_articolo:\n                try:\n                    if row.prezzo == "0":\n                        row.prezzo = ""\n                    f = float(row.prezzo)\n                    #print "SONO QUI : PREZZO = ".format(f)\n                except:\n                    msg = "Prezzo non presente  Cod.Art : " + row.codice_articolo\n                    response.flash=msg\n                    return locals()\n                   \n                   \n                try:\n                \tf=float(row.qta)\n                except:\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\n                \tresponse.flash=msg\n                \treturn locals()\n                \tpass\n            \n                importo = saved_importo = float(row.qta) * float(row.prezzo)\n                importo = Money(str(importo),"EUR")\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                prezzo = str(row.prezzo).replace(".",",")\n                \n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n                \n                importo_totale +=saved_importo\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                \n                if not codice_iva in lista_codici_iva:\n                    lista_codici_iva[codice_iva] = saved_importo\n                else:\n                    lista_codici_iva[codice_iva] += saved_importo\n            \n            else:\n                row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","",""\n                row.descrizione=row.commento\n                row.u_m=""\n            \n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\n        \n    \n    \n    #print lista_codici_iva\n    \n    \n    \n    bollo_presente = False\n    bollo = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n                \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale +imposta_iva\n    \n    \n              \n    importo_totale = Money(str(importo_totale),"EUR")\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n    fattura.totale(str(importo_totale_da_salvare))\n    \n    lista_ddt=[] #Fattura senza ddt = istantanea\n    \n    db.fatture_salvate.insert(scadenza=scadenza,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \n    \n    #print "SCADENZA {0}".format(scadenza)    \n        \n    \n   \n    \n    """\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\n    fattura.totale("14567645")\n    """\n    fattura.add_row("","","","","","","","","")\n    fattura.add_row("",annotazioni,"","","","","","","")\n    fattura.insert_rows()\n    fattura.create_pdf()\n    \n    db(db.fattura).delete()\n    db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\n\ndef ritorna_righe_in_ddt(id_ddt):\n    righe = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt).select()\n    r=[]\n    \n    for riga in righe:\n        r.append(riga.codice_articolo+"\\n")\n    \n    return r\n\ndef del_saved_rows(table, row_id):\n    db(db.saved_righe_in_ddt_cliente.saved_ddt_id == row_id).delete()\n    return "ok"\n\ndef del_ddt_clienti():\n    db.ddt_cliente.righe=Field.Virtual("righe", lambda row: ritorna_righe_in_ddt(row.ddt_cliente.id))\n    \n    fields = [db.ddt_cliente.nome_cliente,db.ddt_cliente.data_richiesta,db.ddt_cliente.numero_ddt,db.ddt_cliente.righe]\n    form = SQLFORM.grid(db.ddt_cliente,formname=\'del\',maxtextlength=100,create=False,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,fields=fields,ondelete=del_saved_rows)\n    return locals()\n\ndef controllo_errori():\n    db(db.errori).delete()\n    \n    \n    \n    clienti = db(db.clienti).select()\n    for cliente in clienti:\n        if cliente.codice_banca is None or len(cliente.codice_banca)<1:\n            errore = "Codice banca assente per il cliente {0}".format(cliente.nome)\n            db.errori.insert(tipo_errore = errore)\n        else:\n             banca_cliente =cliente.codice_banca\n             dati_banca_cliente = db(db.anagrafica_banche.descrizione == banca_cliente).select().first()\n             if dati_banca_cliente is None:\n\t\t     errore = "Banca non in anagrafica per il cliente {0}".format(cliente.nome)\n\t\t     db.errori.insert(tipo_errore = errore)\n             \n            \n            \n        if cliente.citta is None or len(cliente.citta)<1:\n            errore = "Citt\xc3\xa0 assente per il cliente {0}".format(cliente.nome)\n            db.errori.insert(tipo_errore = errore)\n            \n        if cliente.pagamento is None or len(cliente.pagamento)<1:\n            errore = "Pagamento assente per il cliente {0}".format(cliente.nome)\n            db.errori.insert(tipo_errore = errore)\n    \n    \n    clienti = db(db.fornitori).select()\n    for cliente in clienti:\n        if cliente.codice_banca is None or len(cliente.codice_banca)<1:\n            errore = "Codice banca assente per il fornitore {0}".format(cliente.nome)\n            db.errori.insert(tipo_errore = errore)\n            \n        if cliente.citta is None or len(cliente.citta)<1:\n            errore = "Citt\xc3\xa0 assente per il fornitore {0}".format(cliente.nome)\n            db.errori.insert(tipo_errore = errore)\n            \n        if cliente.pagamento is None or len(cliente.pagamento)<1:\n            errore = "Pagamento assente per il fornitore {0}".format(cliente.nome)\n            db.errori.insert(tipo_errore = errore)\n    \n    \n    clienti = db(db.anagrafica_banche).select()\n    for cliente in clienti:\n        if cliente.codice_abi is None or len(cliente.codice_abi)!=5:\n            errore = "Lunghezza codice ABI non corretta per la banca {0}".format(cliente.descrizione)\n            db.errori.insert(tipo_errore = errore)\n            \n        if cliente.codice_cab is None or len(cliente.codice_cab)!=5:\n            errore = "Lunghezza codice CAB non corretta per la banca {0}".format(cliente.descrizione)\n            db.errori.insert(tipo_errore = errore)\n            \n        \n    \n        """\n        if cliente.domicilio is None or len(cliente.domicilio)<1:\n            errore = "Domicilio assente per il fornitore {0}".format(cliente.nome)\n            db.errori.insert(tipo_errore = errore)\n        """\n        \n    count = db.saved_ddt.numero_ddt.count()\n    ddts = db().select(db.saved_ddt.numero_ddt,groupby = db.saved_ddt.numero_ddt, having=count > 1)\n    \n    for ddt in ddts:\n        errore = "DDT duplicato numero {0} del {1} per il cliente {2}".format(ddt.numero_ddt,ritorna_data_inserimento(ddt.numero_ddt),ritorna_cliente_da_numero_ddt(ddt.numero_ddt))\n        db.errori.insert(tipo_errore = errore)\n    \n    \n    \n    pagamenti = db(db.ordine_cliente).select()\n    for pagamento in pagamenti:\n        if db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento.pagamento).isempty():\n             if pagamento.pagamento is None:\n                 errore = "Pagamento non esistente per ordine cliente {0}. Verr\xc3\xa0 usato il pagamento associato al cliente".format(pagamento.ultimo_codice_ordine)\n             else:\n                 errore = "Pagamento \'{0}\' ordine cliente {1} non esistente in anagrafica pagamenti".format(pagamento.pagamento,pagamento.ultimo_codice_ordine)\n             db.errori.insert(tipo_errore = errore)\n    \n    ddts=db(db.saved_ddt).select()\n    for ddt in ddts:\n        if db(db.ddt_cliente.id ==ddt.saved_ddt_id).isempty():\n            #db(db.saved_ddt.id == ddt.id).delete()\n            errore = "Cancellato ddt orfano salvato {0}".format(ddt.id)\n            db.errori.insert(tipo_errore = errore)\n       \n       \n    ordini=db(db.ordine_cliente).select()\n    for ordine in ordini:\n        if db(db.righe_in_ordine_cliente.id_ordine_cliente == ordine.id).isempty():\n            #db(db.saved_ddt.id == ddt.id).delete()\n            errore = "Ordine cliente {0} senza righe associate".format(ordine.ultimo_codice_ordine)\n            db.errori.insert(tipo_errore = errore) \n            \n        if tutte_le_righe_completate_in_ordine_id(ordine.id):\n            #print "ORDINE ID : ",ordine.id\n            ordine.update_record(ddt_completato=\'T\')\n        else:\n             ordine.update_record(ddt_completato=\'F\')\n             \n    articoli=db(db.anagrafica_articoli).select()\n    for articolo in articoli:\n        \n             \n            #articolo.update_record(tipo_articolo="Prodotto finito",tipo_ordine="Ordine acquisto",codice_sottoconto="8820125")\n            \n            if articolo.giacenza is None:\n                errore = "Articolo {0} senza giacenza".format(articolo.codice_articolo)\n                db.errori.insert(tipo_errore = errore)\n                articolo.update_record(giacenza=0)\n              \n            try:\n                if int(articolo.giacenza) < 0:\n                    errore = "Articolo {0} con giacenza negativa".format(articolo.codice_articolo)\n                    db.errori.insert(tipo_errore = errore)\n                    #articolo.update_record(giacenza=0)\n            except:\n            \terrore = "Articolo {0} con giacenza in errore".format(articolo.codice_articolo)\n                db.errori.insert(tipo_errore = errore)\n                articolo.update_record(giacenza=0)\n                pass\n            \n            if articolo.codice_iva is None:\n                errore = "Articolo {0} senza iva".format(articolo.codice_articolo)\n                db.errori.insert(tipo_errore = errore)\n                #articolo.update_record(giacenza=0)\n                \n            if articolo.trattamento is None:\n                errore = "Articolo {0} senza trattamento".format(articolo.codice_articolo)\n                db.errori.insert(tipo_errore = errore)\n                articolo.update_record(trattamento="Si")   \n               \n                           \n            if articolo.giacenza == "5000":\n                errore = "Articolo {0} senza giacenza".format(articolo.codice_articolo)\n                db.errori.insert(tipo_errore = errore)\n                articolo.update_record(giacenza=0)                              \n    \n    \n    anagrafica_banche_azienda = db(db.anagrafica_banche_azienda).select()\n    if anagrafica_banche_azienda is None:\n        errore = "INSERIRE ANAGRAFICA NOSTRA BANCA PER RIBA"\n        db.errori.insert(tipo_errore = errore)\n        \n    \n    """\n    per rimuovere il "|" dai ddt fattura\n    Commentare una volta eseguita questa routine!!\n    \n    fatture = db(db.fatture_salvate).select()\n    for fattura in fatture:\n        saved_date = fattura.scadenza\n        data_fattura = fattura.data_fattura\n        \n        \n        \n        if "|" in fattura.id_ddt:\n            #print "ok"\n            lista_ddt = fattura.id_ddt.split("|")\n            \n            lista_ddt = filter(None,lista_ddt)\n            #print lista_ddt\n            fattura.data_fattura=datetime.datetime.strptime("12/01/1979","%d/%m/%Y")\n            fattura.update_record(id_ddt=str(lista_ddt))\n            #print fattura\n            #db(db.fatture_salvate.id==fattura.id).update(id_ddt=lista_ddt)\n        \n        \n        if saved_date is None:\n            #print "Scadenza trovata = {0} ".format(return_scadenza(fattura.id))\n            fattura.update_record(scadenza=datetime.datetime.strptime(return_scadenza(fattura.id),"%d/%m/%Y"))\n        \n        ##print data_fattura\n        if fattura.id <= 100:\n           fattura.update_record(data_fattura=datetime.datetime.strptime("28/02/2017","%d/%m/%Y")) \n        \n            \n        #print fattura.id\n        pagamento,scadenza = ritorna_tipo_pagamento_da_fattura(fattura.id)\n        #print "si"\n        if "R.B." in pagamento:\n            fattura.update_record(richiede_riba=\'T\')\n        else:\n            fattura.update_record(richiede_riba=\'F\')\n            \n            \n     """     \n    """\n    rows=db(db.saved_righe_in_ddt_cliente).select()\n    for row in rows:\n        count_ddt = db(db.ddt_cliente.id == row.saved_ddt_id).count()\n        if count == 0:\n             errore = "Trovata riga non associata a ddt : id_riga = {0}".format(row.id)\n             db.errori.insert(tipo_errore = errore)\n             db(db.saved_righe_in_ddt_cliente.id == row.id).delete()\n             \n    """\n        \n    form = SQLFORM.grid(db.errori,maxtextlength=500,editable=False,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False)\n    \n    \n    return locals()\n\n\ndef ritorna_data_inserimento(ddt_id):\n    data = db(db.saved_ddt.numero_ddt == ddt_id).select().first()["data_inserimento"]\n    data_ddt=datetime.datetime.strptime(data[0:10],"%Y-%m-%d").date()\n    data_ddt=data_ddt.strftime("%d/%m/%Y")\n    return data_ddt\n\ndef ritorna_cliente_da_numero_ddt(ddt_id):\n    #ddt_id = db(db.saved_ddt.numero_ddt == ddt_id).select().first()["id"]\n    #print ddt_id\n    try:\n        nome_cliente = db(db.ddt_cliente.numero_ddt == ddt_id).select()["nome_cliente"]\n        \n    except:\n        nome_cliente = "NON ASSEGNATO"\n    return nome_cliente\n\n@service.jsonrpc\n@service.jsonrpc2\ndef insert_ddt_preview(*args):\n    \n    \n    id_ddt=args[0]\n    consegna = args[1]\n    trasporto = args[2]\n    ditta = args[3]\n    domicilio = args[4]\n    aspetto = args[5]\n    colli = args[6]\n    porto = args[7]\n    annotazioni = args[8]\n    peso = args[9]\n    causale = args[10]\n    data_scelta = args[11]\n    \n    \n    \n    \n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\n    \n    id_cliente = ddt_id.id_cliente\n    nome_cliente = ddt_id.nome_cliente\n    \n    row = db(db.clienti.id==id_cliente).select().first()\n    \n    try:\n        consegna = consegna.split(",")\n    except:\n        consegna = "Come intestazione ,,,,,,".split(",")\n    """\n    Insert into saved ddt table\n    \n    """\n    \n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\n    n = numero_ddt_salvato.split("/")[0]\n    a = numero_ddt_salvato.split("/")[1]\n    new_n = str(int(n) + 1)\n    numero_ddt_corrente = new_n + "/" + a\n    \n    #ddt_id.update_record(numero_ddt=numero_ddt_corrente)\n    \n    \n    #db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\n    #row2 = db(db.ddt).select().first()\n    #row2.update_record(numero_ddt = numero_ddt_corrente)\n    \n    \n    \n    if len(data_scelta)>0:\n        d = data_scelta\n    else:\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\n    \n    pa = DDT(d,numero_ddt_corrente,"Cliente",anteprima=True)\n    #print "DDT CORRENTE : ",numero_ddt_corrente\n    pa.rows=[]\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\n    try:\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\n    except:\n           pa.consegna("null","null","null","null","null")\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\n    \n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\n    \n    #tutte_le_righe_completate = True\n    \n    try:\n      for row in rows:\n         \n         id_ordine = row["id_ordine"]\n         codice_articolo = row["codice_articolo"]\n         codice_ordine = row["codice_ordine"]\n         \n         if "commento" not in codice_articolo:\n             quantita = row[\'quantita_prodotta\']\n             prezzo = row[\'prezzo\']\n            \n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\n            \n            \n             n_riga = row["n_riga"]\n             codice_iva = row["codice_iva"]\n             evasione = row["evasione"]\n             id_riga_ordine = row["id_riga_ordine"]\n        \n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\n         \n             if q is not None:\n                 try:\n                     quantita_richiesta = int(row["quantita_richiesta"])\n                     quantita_prodotta = int(row["quantita_prodotta"])\n                     quantita_prodotta_fino_ad_ora = 0\n             \n                     quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta) + quantita_prodotta\n                     #r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\n                     #r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\n                 except Exception,e:\n                     response.flash="Controlla le quantit\xc3\xa0"\n                     return "ok"\n                     #print e\n                     \n             else:\n                 """\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\n                 """\n                 #print "E\' la prima volta che inserisco la riga della quantita"\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\n                 quantita_prodotta = int(row["quantita_prodotta"])\n                 quantita_richiesta = int(row["quantita_richiesta"])\n                 #db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\n                 \n             \n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\n                     #print "Chiudo la riga"\n                     #to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n                     #to_update.update_record(riga_emessa_in_ddt = True)\n                     pass\n                 else:\n                   #tutte_le_righe_completate = Fals\n                   pass\n             \n                 #print "SONO QUII"\n                 ##print "{0}".format(tutte_le_righe_completate)\n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\n         \n         \n         \n             \n                  \n         ##print "CODICE ARTICOLO : ",codice_articolo\n         if len(codice_articolo)>0:\n               \n               if "commento" not in codice_articolo:\n               \n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n               \n               else:\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\n                   descrizione = d\n                   row.codice_articolo=" "\n                   n_riga=" "\n                   riferimento_ordine=" "\n                   quantita_prodotta=0\n                   prezzo=" "\n                   evasione=" "\n                   row["u_m"]=" "\n                   \n                   \n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\n               \n               #db.saved_righe_in_ddt_cliente.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\n         else:\n               descrizione =row.descrizione\n               pa.add_row(row.codice_articolo,descrizione,"","","")\n    \n         \n      \n          \n      \n    except Exception,e:\n        \n        response.flash="Errore inserimento ddt {0}".format(e)\n        return locals()     \n        \n         ##print row\n    \n    #p.insert_rows()\n    pa.insert_rows()\n    #print pa.rows\n    pa.create_pdf()\n    \n    ##print request.folder\n    #redirect(URL(\'ddt_clienti\'))\n    return "ok"\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef insert_ddt(*args):\n    \n    \n    id_ddt=args[0]\n    consegna = args[1]\n    trasporto = args[2]\n    ditta = args[3]\n    domicilio = args[4]\n    aspetto = args[5]\n    colli = args[6]\n    porto = args[7]\n    annotazioni = args[8]\n    peso = args[9]\n    causale = args[10]\n    data_scelta = args[11]\n    #print consegna\n    \n    \n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\n    \n    ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id,consegna=str(consegna))\n    \n    #print "Aggiornato"\n    #return locals()\n    id_cliente = ddt_id.id_cliente\n    nome_cliente = ddt_id.nome_cliente\n    \n    row = db(db.clienti.id==id_cliente).select().first()\n    \n    \n    \n    try:\n        consegna = consegna.split(",")\n    except:\n        consegna = "Come intestazione ,,,,,,".split(",")\n    """\n    Insert into saved ddt table\n    \n    """\n    \n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\n    n = numero_ddt_salvato.split("/")[0]\n    a = numero_ddt_salvato.split("/")[1]\n    new_n = str(int(n) + 1)\n    numero_ddt_corrente = new_n + "/" + a\n    \n    ddt_id.update_record(numero_ddt=numero_ddt_corrente)\n    \n    \n    \n    db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\n    row2 = db(db.ddt).select().first()\n    row2.update_record(numero_ddt = numero_ddt_corrente)\n    \n    \n    \n    if len(data_scelta)>0:\n        d = data_scelta\n    else:\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\n    \n    pa = DDT(d,numero_ddt_corrente,"Cliente")\n    #print "DDT CORRENTE : ",numero_ddt_corrente\n    pa.rows=[]\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\n    try:\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\n    except:\n           pa.consegna("null","null","null","null","null")\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\n    \n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\n    \n    #tutte_le_righe_completate = True\n    \n    try:\n      for row in rows:\n         \n         id_ordine = row["id_ordine"]\n         codice_articolo = row["codice_articolo"]\n         codice_ordine = row["codice_ordine"]\n         \n         if "commento" in codice_articolo:\n             id_riga_ordine = row["id_riga_ordine"]\n             evasione = row["evasione"]\n             n_riga = row["n_riga"]\n             \n         \n         elif "commento" not in codice_articolo:\n             quantita = row[\'quantita_prodotta\']\n             prezzo = row[\'prezzo\']\n            \n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\n            \n            \n             n_riga = row["n_riga"]\n             codice_iva = row["codice_iva"]\n             evasione = row["evasione"]\n             id_riga_ordine = row["id_riga_ordine"]\n        \n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\n         \n             if q is not None:\n                 try:\n                     quantita_richiesta = int(row["quantita_richiesta"])\n                     quantita_prodotta = int(row["quantita_prodotta"])\n                     quantita_prodotta_fino_ad_ora = 0\n             \n                     quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta) + quantita_prodotta\n                     r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\n                     r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\n                     \n                     if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\n                         #print "Chiudo la riga"\n                         to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n                         to_update.update_record(riga_emessa_in_ddt = True)\n                         db(db.riserva_quantita.id_riga_ordine==id_riga_ordine).delete()\n                     \n                 except Exception,e:\n                     response.flash="Controlla le quantit\xc3\xa0"\n                     return "ok"\n                     #print e\n                     \n             else:\n                 """\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\n                 """\n                 #print "E\' la prima volta che inserisco la riga della quantita"\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\n                 quantita_prodotta = int(row["quantita_prodotta"])\n                 quantita_richiesta = int(row["quantita_richiesta"])\n                 db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\n                 \n             \n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\n                     #print "Chiudo la riga"\n                     to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n                     to_update.update_record(riga_emessa_in_ddt = True)\n                     #db(db.riserva_quantita.id_riga_ordine==id_riga_ordine).delete()\n                 \n                 else:\n                   #tutte_le_righe_completate = Fals\n                   pass\n             \n                 #print "SONO QUII"\n                 ##print "{0}".format(tutte_le_righe_completate)\n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\n         \n         \n         \n             \n                  \n         ##print "CODICE ARTICOLO : ",codice_articolo\n         if len(codice_articolo)>0:\n               \n               if "commento" not in codice_articolo:\n               \n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n                   \n                   da_rimuovere = int(quantita_prodotta) * -1\n                   db.riserva_quantita.insert(codice_articolo = row.codice_articolo,quantita = da_rimuovere,id_riga_ordine = id_riga_ordine,user_id=auth.user_id)\n                   \n                   rimuovi_giacenza(codice_articolo,row.quantita_prodotta)\n               \n                   """Metto negativo per liberare la prenotazione articolo"""\n               \n               else:\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\n                   descrizione = d\n                   row.codice_articolo=" "\n                   #n_riga=" "\n                   riferimento_ordine=" "\n                   quantita_prodotta=0\n                   prezzo=" "\n                   evasione=" "\n                   row["u_m"]=" "\n                   \n                   \n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\n               \n               db.saved_righe_in_ddt_cliente.insert(id_riga_ordine=id_riga_ordine,saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\n               \n               \n              \n               \n               \n               \n               \n               \n         else:\n               descrizione =row.descrizione\n               pa.add_row(row.codice_articolo,descrizione,"","","")\n    \n         \n      \n         ##print descrizione\n      """\n      if tutte_le_righe_completate:\n             ordine = db(db.ordine_cliente.id == id_ordine).select().first()\n             ordine.update_record(ddt_completato = True)\n      """\n      if tutte_le_righe_completate():\n          ordine = db(db.ordine_cliente.id == id_ordine).select().first()\n          ordine.update_record(ddt_completato = True)\n          \n      \n    except Exception,e:\n        \n        response.flash="Errore inserimento ddt {0}".format(e)\n        return locals()     \n        \n         ##print row\n    \n    #p.insert_rows()\n    pa.insert_rows()\n    #print pa.rows\n    pa.create_pdf()\n    \n    ##print request.folder\n    redirect(URL(\'ddt_clienti\'))\n    return "ok"\n\n\ndef rimuovi_giacenza(codice_articolo,quantita_prodotta):\n    \n    #print codice_articolo,quantita_prodotta\n    row = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\n    #print row\n    attuale = int(row.giacenza)\n    da_aggiornare = str(attuale - int(quantita_prodotta))\n    \n    #print "Attuale : {0} Da aggiornare = {1}".format(attuale,da_aggiornare)\n    \n    row.update_record(giacenza = da_aggiornare)\n    \n    \n    \n\ndef manutenzione_righe_ordini_clienti():\n    \n    form = SQLFORM.grid(db.righe_in_ordine_cliente)\n    return locals()\n\n@service.jsonrpc\n@service.jsonrpc2\ndef insert_mod_ddt(*args):\n    \n    \n    id_ddt=args[0]\n    consegna = args[1]\n    trasporto = args[2]\n    ditta = args[3]\n    domicilio = args[4]\n    aspetto = args[5]\n    colli = args[6]\n    porto = args[7]\n    annotazioni = args[8]\n    peso = args[9]\n    causale = args[10]\n    \n    #print "Consegna ",consegna\n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\n    #print ddt_id\n    ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id,consegna=consegna)\n    \n    #print "CIAOOOO ",ddt_id\n    \n    #return locals()\n    id_cliente = ddt_id.id_cliente\n    nome_cliente = ddt_id.nome_cliente\n    \n    row = db(db.clienti.id==id_cliente).select().first()\n    \n    \n    \n    try:\n        consegna = consegna.split(",")\n    except:\n        consegna = "Come intestazione ,,,,,,".split(",")\n    """\n    Insert into saved ddt table\n    \n    """\n    \n    \n    numero_ddt_corrente = ddt_id.numero_ddt\n        \n    #print numero_ddt_corrente\n    #db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\n    \n    data_scelta=""\n    if len(data_scelta)>0:\n        d = data_scelta\n    else:\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\n    \n    pa = DDT(d,numero_ddt_corrente,"Cliente")\n    #print "DDT CORRENTE : ",numero_ddt_corrente\n    pa.rows=[]\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\n    try:\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\n    except:\n           pa.consegna("null","null","null","null","null")\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\n    \n    #print "ciao ",ddt_id\n    \n    """\n    1) salvare le righe del ddt in una tabella per creare UNDO\n    2) cancellare i riferimenti a saved_righe_in_ddt_cliente\n    3) inserire le righe ddt as usual\n    """\n    produzione_da_rimuovere=0\n    old_rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id ==ddt_id.id).select()\n    \n    #print old_rows\n    for r in old_rows:\n        #print old_rows\n        db.saved_righe_in_ddt_cliente_undo.insert(**db.saved_righe_in_ddt_cliente._filter_fields(r))\n        db(db.saved_righe_in_ddt_cliente.id == r.id).delete()\n        produzione_da_rimuovere = r.quantita\n        """\n        Ritornare id riga ordine anche se NULL\n        """\n        \n        if r.id_riga_ordine is None or len(r.id_riga_ordine)<1:\n                id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == r.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==r.n_riga)).select().first()["id"]\n        else:\n                id_riga_ordine = r.id_riga_ordine\n        \n        db((db.produzione_righe_per_ddt.quantita_prodotta == produzione_da_rimuovere) & (db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine)).delete()\n   \n    #return ""\n    \n    \n    #tutte_le_righe_completate = True\n    \n    \n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\n    db(db.saved_righe_in_ddt_cliente.saved_ddt_id ==ddt_id.id).delete()\n    try:\n      for row in rows:\n         \n         id_ordine = row["id_ordine"]\n         codice_articolo = row["codice_articolo"]\n         codice_ordine = row["codice_ordine"]\n         \n         \n         if row.id_riga_ordine is None or len(row.id_riga_ordine)<1:\n                id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == row.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==row.n_riga)).select().first()["id"]\n         else:\n                id_riga_ordine = row.id_riga_ordine\n                \n         #print "ID RIGA ORDINE ",id_riga_ordine\n         \n         \n         if "commento" not in codice_articolo:\n             quantita = row[\'quantita_prodotta\']\n             prezzo = row[\'prezzo\']\n            \n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\n            \n            \n             n_riga = row["n_riga"]\n             codice_iva = row["codice_iva"]\n             evasione = row["evasione"]\n             #id_riga_ordine = row["id_riga_ordine"]\n             \n             #print id_riga_ordine\n             \n                    \n             \n             \n             """\n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\n             #print "Quantita trovata gi\xc3\xa0 prodotta : ",q\n             if q is not None:\n                 try:\n                     quantita_richiesta = int(row["quantita_richiesta"])\n                     quantita_prodotta = int(row["quantita_prodotta"])\n                     quantita_prodotta_fino_ad_ora = 0\n             \n                     quantita_prodotta_fino_ad_ora =  quantita_prodotta\n                     r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\n                     r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\n                 except Exception,e:\n                     response.flash="Controlla le quantit\xc3\xa0"\n                     #print e\n                     return "ok"\n                     \n                     \n             else:\n             """\n             if True:\n                 """\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\n                 """\n                 #print "E\' la prima volta che inserisco la riga della quantita"\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\n                 quantita_prodotta = int(row["quantita_prodotta"])\n                 quantita_richiesta = int(row["quantita_richiesta"])\n                 db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\n                 \n                 #print "qui"\n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\n                     #print "Chiudo la riga"\n                     to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n                     to_update.update_record(riga_emessa_in_ddt = \'T\')\n                     db.riserva_quantita.insert\n                     \n                     rimuovi_giacenza(codice_articolo,row.quantita_prodotta)\n               \n                     """Metto negativo per liberare la prenotazione articolo"""\n                 \n                 else:\n                   #print "Riapro la riga"\n                   #print "ID RIGA ORDINE : ",id_riga_ordine\n                   to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n                   #print to_update.id\n                   to_update.update_record(riga_emessa_in_ddt = \'F\')\n                   \n                   \n                   \n                   \n                 da_rimuovere = int(quantita_prodotta_fino_ad_ora) * -1\n                 db.riserva_quantita.insert(codice_articolo = row.codice_articolo,quantita = da_rimuovere,id_riga_ordine = id_riga_ordine,user_id=auth.user_id)\n                 db.riserva_quantita.insert(codice_articolo = row.codice_articolo,quantita = quantita_prodotta_fino_ad_ora,id_riga_ordine = id_riga_ordine,user_id=auth.user_id)\n                   \n                            \n                 giacenza = int(produzione_da_rimuovere)\n                 \n                 #print "produzione da rimuovere = ",giacenza\n                 vecchia_giacenza = int(db(db.anagrafica_articoli.codice_articolo ==codice_articolo ).select().first()["giacenza"])\n                 #print "vecchia giacenza ",vecchia_giacenza\n                 \n                 \n                 nuova_giacenza = vecchia_giacenza - giacenza\n                 \n                 #print "nuova giacenza ",nuova_giacenza\n                 \n                 nuova_giacenza +=  int(quantita_prodotta_fino_ad_ora)\n                 \n                 #print "nuova giacenza 2 ",nuova_giacenza\n                 g = db(db.anagrafica_articoli.codice_articolo ==codice_articolo).select().first()\n                 g.update_record(giacenza = str(nuova_giacenza))\n                 \n                 \n                 \n                 \n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\n         \n         \n         \n             \n                  \n         ##print "CODICE ARTICOLO : ",codice_articolo\n         if len(codice_articolo)>0:\n               \n               if "commento" not in codice_articolo:\n               \n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n               \n               else:\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\n                   descrizione = d\n                   row.codice_articolo=" "\n                   n_riga=" "\n                   riferimento_ordine=" "\n                   quantita_prodotta=0\n                   prezzo=" "\n                   evasione=" "\n                   row["u_m"]=" "\n                   \n                   \n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\n               \n               db.saved_righe_in_ddt_cliente.insert(id_riga_ordine=row.id_riga_ordine,saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\n         else:\n               descrizione =row.descrizione\n               pa.add_row(row.codice_articolo,descrizione,"","","")\n    \n         \n      \n         ##print descrizione\n      """\n      if tutte_le_righe_completate:\n             ordine = db(db.ordine_cliente.id == id_ordine).select().first()\n             ordine.update_record(ddt_completato = True)\n      """\n      if tutte_le_righe_completate():\n          ordine = db(db.ordine_cliente.id == id_ordine).select().first()\n          ordine.update_record(ddt_completato = True)\n      else:\n          ordine = db(db.ordine_cliente.id == id_ordine).select().first()\n          ordine.update_record(ddt_completato = False)\n          \n          \n      \n    except Exception,e:\n        \n        response.flash="Errore inserimento ddt {0}".format(e)\n        return locals()     \n        \n         ##print row\n    \n    #p.insert_rows()\n    pa.insert_rows()\n    #print pa.rows\n    pa.create_pdf()\n    \n    ##print request.folder\n    redirect(URL(\'ddt_clienti\'))\n    return "ok"\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef insert_mod_ddt_preview(*args):\n    \n    \n    id_ddt=args[0]\n    consegna = args[1]\n    trasporto = args[2]\n    ditta = args[3]\n    domicilio = args[4]\n    aspetto = args[5]\n    colli = args[6]\n    porto = args[7]\n    annotazioni = args[8]\n    peso = args[9]\n    causale = args[10]\n    \n    \n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\n    \n    #ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id)\n    \n    #print "CIAOOOO ",ddt_id\n    \n    id_cliente = ddt_id.id_cliente\n    nome_cliente = ddt_id.nome_cliente\n    \n    row = db(db.clienti.id==id_cliente).select().first()\n    \n    \n    \n    try:\n        consegna = consegna.split(",")\n    except:\n        consegna = "Come intestazione ,,,,,,".split(",")\n    """\n    Insert into saved ddt table\n    \n    """\n    \n    \n    numero_ddt_corrente = ddt_id.numero_ddt\n        \n    #print numero_ddt_corrente\n    #db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\n    \n    data_scelta =""\n    \n    if len(data_scelta)>0:\n        d = data_scelta\n    else:\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\n    \n    pa = DDT(d,numero_ddt_corrente,"Cliente",anteprima=True)\n    #print "DDT CORRENTE : ",numero_ddt_corrente\n    pa.rows=[]\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\n    try:\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\n    except:\n           pa.consegna("null","null","null","null","null")\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\n    \n    #print "ciao ",ddt_id\n    \n    """\n    1) salvare le righe del ddt in una tabella per creare UNDO\n    2) cancellare i riferimenti a saved_righe_in_ddt_cliente\n    3) inserire le righe ddt as usual\n    """\n        \n   \n    #return ""\n    \n    \n    #tutte_le_righe_completate = True\n    \n    \n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\n    try:\n      for row in rows:\n         \n         id_ordine = row["id_ordine"]\n         codice_articolo = row["codice_articolo"]\n         codice_ordine = row["codice_ordine"]\n         \n         if "commento" not in codice_articolo:\n             quantita = row[\'quantita_prodotta\']\n             prezzo = row[\'prezzo\']\n            \n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\n            \n            \n             n_riga = row["n_riga"]\n             codice_iva = row["codice_iva"]\n             evasione = row["evasione"]\n             id_riga_ordine = row["id_riga_ordine"]\n             ##print row\n        \n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\n             #print "Quantita trovata gi\xc3\xa0 prodotta : ",q\n             if q is not None:\n                 try:\n                     quantita_richiesta = int(row["quantita_richiesta"])\n                     quantita_prodotta = int(row["quantita_prodotta"])\n                     quantita_prodotta_fino_ad_ora = 0\n             \n                     quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta) + quantita_prodotta\n                     #r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\n                     #r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\n                 except Exception,e:\n                     response.flash="Controlla le quantit\xc3\xa0"\n                     #print e\n                     return "ok"\n                     \n                     \n             else:\n                 """\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\n                 """\n                 #print "E\' la prima volta che inserisco la riga della quantita"\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\n                 quantita_prodotta = int(row["quantita_prodotta"])\n                 quantita_richiesta = int(row["quantita_richiesta"])\n                 db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\n                 \n             \n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\n                     #print "Chiudo la riga"\n                     #to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n                     #to_update.update_record(riga_emessa_in_ddt = True)\n                     pass\n                 else:\n                   #tutte_le_righe_completate = Fals\n                   pass\n             \n                 #print "SONO QUII"\n                 ##print "{0}".format(tutte_le_righe_completate)\n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\n         \n         \n         \n             \n                  \n         ##print "CODICE ARTICOLO : ",codice_articolo\n         if len(codice_articolo)>0:\n               \n               if "commento" not in codice_articolo:\n               \n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n               \n               else:\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\n                   #print "COMMENTO {0}, RIGA ORDINE {1}".format(d,row.id_riga_ordine)\n                   \n                   descrizione = d\n                   row.codice_articolo=" "\n                   n_riga=" "\n                   riferimento_ordine=" "\n                   quantita_prodotta=0\n                   prezzo=" "\n                   evasione=" "\n                   row["u_m"]=" "\n                   \n                   \n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\n               \n               #db.saved_righe_in_ddt_cliente.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\n         else:\n               descrizione =row.descrizione\n               pa.add_row(row.codice_articolo,descrizione,"","","")\n    \n         \n      \n         ##print descrizione\n      """\n      if tutte_le_righe_completate:\n             ordine = db(db.ordine_cliente.id == id_ordine).select().first()\n             ordine.update_record(ddt_completato = True)\n      \n      \n      """\n          \n      \n    except Exception,e:\n        \n        response.flash="Errore inserimento ddt {0}".format(e)\n        return locals()     \n        \n         ##print row\n    \n    #p.insert_rows()\n    pa.insert_rows()\n    #print pa.rows\n    pa.create_pdf()\n    \n    ##print request.folder\n    redirect(URL(\'ddt_clienti\'))\n    return "ok"\n\n\ndef tutte_le_righe_completate():\n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\n    \n    righe_completate = True\n    #print "IN TUTTE LE RIGHE COMPLETATE -----------------"\n    try:\n      for row in rows:\n         \n         \n         if row.id_riga_ordine is None or len(row.id_riga_ordine)<1:\n                id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == row.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==row.n_riga)).select().first()["id"]\n         else:\n                id_riga_ordine = row.id_riga_ordine\n         \n         \n         #print row\n         #print "-----"\n         \n         \n         \n         \n         codice_articolo = row["codice_articolo"]\n         \n         if "commento" not in codice_articolo:\n            riga = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n            #print riga\n            if not riga.riga_emessa_in_ddt:\n                 #print "non tutte le righe sono state completate"     \n                 righe_completate = False    \n             \n                \n    except Exception,e:\n         #print e\n                     #quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\n         pass\n    return righe_completate\n    \n\ndef riga_completata(id_riga_ordine):\n    row = db(db.righe_in_ordine_cliente.id == id_riga_ordine ).select().first()\n    #print row\n    return row.riga_emessa_in_ddt\n\n\n\ndef tutte_le_righe_completate_in_ordine_id(id_ordine):\n    rows = db(db.righe_in_ordine_cliente.id_ordine_cliente == id_ordine).select()\n    \n    righe_completate = True\n   \n    try:\n      for row in rows:\n                \n         codice_articolo = row["codice_articolo"]\n         \n         if "commento" not in codice_articolo:\n            \n            \n            if not row.riga_emessa_in_ddt:\n                 #print "non tutte le righe sono state completate"     \n                 righe_completate = False    \n             \n                \n    except Exception,e:\n         #print e\n         #quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\n         pass\n    return righe_completate\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef insert_ddt_fornitori(*args):\n    \n    \n    id_ddt=args[0]\n    consegna = args[1]\n    trasporto = args[2]\n    ditta = args[3]\n    domicilio = args[4]\n    aspetto = args[5]\n    colli = args[6]\n    porto = args[7]\n    annotazioni = args[8]\n    peso = args[9]\n    causale = args[10]\n    data_scelta = args[11]\n    \n    if len(data_scelta)>0:\n        d = data_scelta\n    else:\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\n    \n    \n    #print args\n    ddt_id = db(db.ddt_fornitore.id == id_ddt).select().first()\n    \n    ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id)\n    \n    id_fornitore = ddt_id.id_fornitore\n    nome_fornitore = ddt_id.nome_fornitore\n    \n    row = db(db.fornitori.id==id_fornitore).select().first()\n    \n    consegna = consegna.split(",")\n    \n    """\n    Insert into saved ddt table\n    \n    """\n    \n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\n    n = numero_ddt_salvato.split("/")[0]\n    a = numero_ddt_salvato.split("/")[1]\n    new_n = str(int(n) + 1)\n    numero_ddt_corrente = new_n + "/" + a\n    \n    ddt_id.update_record(numero_ddt=numero_ddt_corrente)\n    \n    \n    db.saved_ddt_fornitori.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = d, user_id = auth.user_id)\n    row2 = db(db.ddt).select().first()\n    row2.update_record(numero_ddt = numero_ddt_corrente)\n    \n    \n    \n    \n    pa = DDT(d,numero_ddt_corrente,"Fornitore")\n    #print "DDT CORRENTE : ",numero_ddt_corrente\n    pa.rows=[]\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\n    try:\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\n    except:\n           pa.consegna("null","null","null","null","null")\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\n    \n    rows = db(db.righe_in_ddt_fornitore.user_id == auth.user_id).select()\n    \n    for row in rows:\n         quantita = row[\'quantita\']\n         prezzo = row[\'prezzo\']\n         codice_articolo = row["codice_articolo"]\n         riferimento_ordine = row["codice_ordine"]+" - POS."+row["n_riga"]\n         id_ordine = row["id_ordine"]\n         codice_ordine = row["codice_ordine"]\n         n_riga = row["n_riga"]\n         codice_iva = row["codice_iva"]\n         evasione = row["evasione"]\n\n         ordine=db(db.ordine_fornitore.id == id_ordine).select().first()\n         ordine.update_record(ddt_completato = True)\n         \n         ##print "CODICE ARTICOLO : ",codice_articolo\n         if len(codice_articolo)>0:\n               #descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n               \n               if "commento" not in codice_articolo:\n               \n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n               \n               else:\n                   descrizione = row.descrizione\n                   row.codice_articolo=""\n                   n_riga=""\n                   \n               \n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],row["quantita"])\n               db.saved_righe_in_ddt_fornitore.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\n         else:\n               descrizione =row.descrizione\n               pa.add_row(row.codice_articolo,descrizione,"","","")\n         ##print descrizione\n         \n        \n         ##print row\n    \n    #p.insert_rows()\n    pa.insert_rows()\n    pa.create_pdf()\n\n    \n    \n    ##print request.folder\n    redirect(URL(\'ddt_fornitori\'))\n    return "ok"\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef insert_ddt_fornitori_preview(*args):\n    \n    \n    id_ddt=args[0]\n    consegna = args[1]\n    trasporto = args[2]\n    ditta = args[3]\n    domicilio = args[4]\n    aspetto = args[5]\n    colli = args[6]\n    porto = args[7]\n    annotazioni = args[8]\n    peso = args[9]\n    causale = args[10]\n    data_scelta = args[11]\n    \n    if len(data_scelta)>0:\n        d = data_scelta\n    else:\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\n    \n    \n    #print args\n    ddt_id = db(db.ddt_fornitore.id == id_ddt).select().first()\n    \n    id_fornitore = ddt_id.id_fornitore\n    nome_fornitore = ddt_id.nome_fornitore\n    \n    row = db(db.fornitori.id==id_fornitore).select().first()\n    \n    consegna = consegna.split(",")\n    \n    """\n    Insert into saved ddt table\n    \n    """\n    \n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\n    n = numero_ddt_salvato.split("/")[0]\n    a = numero_ddt_salvato.split("/")[1]\n    new_n = str(int(n) + 1)\n    numero_ddt_corrente = new_n + "/" + a\n    \n    #ddt_id.update_record(numero_ddt=numero_ddt_corrente)\n    \n    \n    #db.saved_ddt_fornitori.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\n    row2 = db(db.ddt).select().first()\n    #row2.update_record(numero_ddt = numero_ddt_corrente)\n    \n    \n    \n    \n    pa = DDT(d,numero_ddt_corrente,"Fornitore",anteprima=True)\n    #print "DDT CORRENTE : ",numero_ddt_corrente\n    pa.rows=[]\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\n    try:\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\n    except:\n           pa.consegna("null","null","null","null","null")\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\n    \n    rows = db(db.righe_in_ddt_fornitore.user_id == auth.user_id).select()\n    \n    for row in rows:\n         quantita = row[\'quantita\']\n         prezzo = row[\'prezzo\']\n         codice_articolo = row["codice_articolo"]\n         riferimento_ordine = row["codice_ordine"]+" - POS."+row["n_riga"]\n         id_ordine = row["id_ordine"]\n         codice_ordine = row["codice_ordine"]\n         n_riga = row["n_riga"]\n         codice_iva = row["codice_iva"]\n         evasione = row["evasione"]\n         \n         ##print "CODICE ARTICOLO : ",codice_articolo\n         if len(codice_articolo)>0:\n               #descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n               \n               if "commento" not in codice_articolo:\n               \n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\n               \n               else:\n                   descrizione = row.descrizione\n                   row.codice_articolo=""\n                   n_riga=""\n                   \n               \n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],row["quantita"])\n               #db.saved_righe_in_ddt_fornitore.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\n         else:\n               descrizione =row.descrizione\n               pa.add_row(row.codice_articolo,descrizione,"","","")\n         ##print descrizione\n         \n        \n         ##print row\n    \n    #p.insert_rows()\n    pa.insert_rows()\n    pa.create_pdf()\n    \n    ##print request.folder\n  \n    return "ok"\n\n\ndef fatture_per_riba():\n    fields=[db.fatture_scelte.numero_fattura,db.fatture_scelte.totale]\n    form = SQLFORM.grid(db.fatture_scelte,create=False,editable=False,deletable=True,csv=False,fields=fields)\n    return locals()\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef aggiungi_fattura(args):\n    id_fattura = args[\'0\']\n    fattura = db(db.fatture_salvate.id ==id_fattura).select().first()\n    \n    db((db.fatture_scelte.id_fattura == id_fattura) & (db.fatture_scelte.user_id == auth.user_id)).delete()\n    db.fatture_scelte.insert(scadenza=fattura.scadenza,id_cliente=fattura.id_cliente,cliente=fattura.nome_cliente,id_fattura=fattura.id,numero_fattura=fattura.numero_fattura,totale=fattura.totale,user_id = auth.user_id)\n    \n    return "ok"\n    \n\n@service.jsonrpc\n@service.jsonrpc2\ndef add_row_to_ddt(args):\n    \n    id_ordine = args[\'0\']\n    \n    #ritorna_quantita_saldo\n    \n    #auth.user_id\n    #print "ID ORDINE : ",id_ordine\n    \n    db((db.righe_in_ddt_cliente.user_id == auth.user_id) & (db.righe_in_ddt_cliente.id_ordine == id_ordine)).delete()\n    \n    \n    row = db(db.ordine_cliente.id == id_ordine).select().first()\n    \n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\n    nome_cliente = row[\'nome_cliente\']\n    data_inserimento = row[\'data_inserimento\']\n    listino = row[\'listino\']\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\n    listino = row[\'listino\']\n    magazzino_interno = row[\'magazzino_interno\']\n    numero_ordine = row[\'ultimo_codice_ordine\']\n    saldo=0\n    quantita_da_produrre=0\n    \n    \n    rows = db((db.righe_in_ordine_cliente.id_ordine_cliente == id_ordine),(db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\')).select()\n    for row in rows:\n        #print "riga emessa in DDT"+str(row.riga_emessa_in_ddt)\n        if "commento" in row.codice_articolo:\n            quantita_da_produrre = prenotato = quantita_prodotta = saldo = 0\n            db.righe_in_ddt_cliente.insert(saldo=0,codice_ordine=numero_ordine,quantita_richiesta=0,quantita_prodotta = 0, prezzo=0,sconti=0,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_cliente,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,id_riga_ordine=row.id) \n            pass\n        \n        elif not row.riga_emessa_in_ddt:\n            \n            """\n            Vado a vedere la quantit\xc3\xa0 attualmente prodotta salvata nella tabella "produzione_righe_per_ddt"\n            """\n            row_id = row.id\n            dettagli_produzione_riga = db(db.produzione_righe_per_ddt.id_riga_ordine == row.id).select().first()\n            \n            if dettagli_produzione_riga is not None:\n                #print "Riga trovata"\n                """\n                Se ho trovato la riga vuol dire che \xc3\xa8 stata immessa una quantit\xc3\xa0 in saldo.\n                Vado a recuperare la quantit\xc3\xa0 prodotta\n                """\n                #quantita_da_produrre= int(row.quantita) - int(dettagli_produzione_riga.quantita_prodotta)\n                \n                quantita_da_produrre = prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(row.codice_articolo,row_id) \n                \n                \n                quantita_prodotta = dettagli_produzione_riga.quantita_prodotta\n                saldo=ritorna_quantita_saldo(row_id)\n                \n            else:\n                #print "Riga non trovata"\n                """\n                Metto la quantita prodotta = alla quantita richiesta per velocizzare l\'inserimento\n                row.quantita \xc3\xa8 l\'iniziale quantita richiesta nell\'ordine\n                """\n                quantita_da_produrre = prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(row.codice_articolo,row_id) \n                quantita_prodotta = 0\n                saldo=ritorna_quantita_saldo(row_id)\n                \n            \n            \n            \n            \n            db.righe_in_ddt_cliente.insert(saldo=saldo,codice_ordine=numero_ordine,quantita_richiesta=row.quantita,quantita_prodotta = quantita_da_produrre, prezzo=row.prezzo,sconti=row.sconti,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_cliente,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,id_riga_ordine=row.id)\n    \n    \n    return "ok"\n\n@service.jsonrpc\n@service.jsonrpc2\ndef add_row_to_ddt_mod(args):\n    \n    \n    id_ordine = args[\'0\']\n    \n    #auth.user_id\n    #print "ID ORDINE : ",id_ordine\n    \n    db((db.righe_in_ddt_cliente.user_id == auth.user_id) & (db.righe_in_ddt_cliente.id_ordine == id_ordine)).delete()\n    \n    \n    row = db(db.ordine_cliente.id == id_ordine).select().first()\n    \n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\n    nome_cliente = row[\'nome_cliente\']\n    data_inserimento = row[\'data_inserimento\']\n    listino = row[\'listino\']\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\n    listino = row[\'listino\']\n    magazzino_interno = row[\'magazzino_interno\']\n    numero_ordine = row[\'ultimo_codice_ordine\']\n    \n    rows = db(db.righe_in_ordine_cliente.id_ordine_cliente == id_ordine).select()\n    \n    quantita_prodotta=0\n    row_id=0\n    #print rows\n    for row in rows:\n        \n        \n        #print str(row.riga_emessa_in_ddt)\n        #print type(row.riga_emessa_in_ddt)\n        \n        if "commento" in row.codice_articolo:\n            quantita_da_produrre = prenotato = quantita_prodotta = saldo = 0\n            \n            pass\n        \n        elif not row.riga_emessa_in_ddt:\n            """\n            Vado a vedere la quantit\xc3\xa0 attualmente prodotta salvata nella tabella "produzione_righe_per_ddt"\n            """\n            row_id = row.id\n            dettagli_produzione_riga = db(db.produzione_righe_per_ddt.id_riga_ordine == row.id).select().first()\n            if dettagli_produzione_riga is not None:\n                #print "Riga trovata"\n                """\n                Se ho trovato la riga vuol dire che \xc3\xa8 stata immessa una quantit\xc3\xa0 in saldo.\n                Vado a recuperare la quantit\xc3\xa0 prodotta\n                """\n                quantita_da_produrre= int(row.quantita) - int(dettagli_produzione_riga.quantita_prodotta)\n                quantita_prodotta = dettagli_produzione_riga.quantita_prodotta\n                \n            else:\n                #print "Riga non trovata"\n                """\n                Metto la quantita prodotta = alla quantita richiesta per velocizzare l\'inserimento\n                row.quantita \xc3\xa8 l\'iniziale quantita richiesta nell\'ordine\n                """\n                quantita_da_produrre = 0\n                quantita_prodotta = 0\n            \n            \n         \n        quantita = 0  \n            \n        if row.quantita:\n        \tquantita = row.quantita\n        \n        #print row\n        \t\n        db.righe_in_ddt_cliente.insert(saldo=ritorna_quantita_saldo(row_id),codice_ordine=numero_ordine,quantita_richiesta=quantita,quantita_prodotta = quantita_prodotta, prezzo=row.prezzo,sconti=row.sconti,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_cliente,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,id_riga_ordine=row.id)\n    \n    \n    return "ok"\n\ndef ritorna_quantita_richiesta_da_riga_salvata(id_riga_salvata):\n    \n    #print "IN RITORNA QUANTITA DA RIGA SALVATA ",id_riga_salvata\n    try:\n        riga_salvata = db(db.righe_in_ordine_cliente.id == id_riga_salvata).select().first()\n                \n        #print "ECCOLO E ",riga_salvata\n    except Exception,e:\n        #print e\n        riga_salvata.quantita = 0\n        \n    return riga_salvata.quantita\n    return 0\n    \n\n@service.jsonrpc\n@service.jsonrpc2\ndef add_row_to_ddt_fornitori(args):\n    \n    id_ordine = args[\'0\']\n    \n    #auth.user_id\n    #print "ID ORDINE : ",id_ordine\n    \n    db((db.righe_in_ddt_fornitore.user_id == auth.user_id) & (db.righe_in_ddt_fornitore.id_ordine == id_ordine)).delete()\n    \n    \n    row = db(db.ordine_fornitore.id == id_ordine).select().first()\n    \n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\n    nome_fornitore = row[\'nome_fornitore\']\n    data_inserimento = row[\'data_inserimento\']\n    listino = row[\'listino\']\n    riferimento_ordine_fornitore = ""#row[\'riferimento_ordine_fornitore\']\n    listino = row[\'listino\']\n    magazzino_interno = row[\'magazzino_interno\']\n    numero_ordine = row[\'ultimo_codice_ordine\']\n    \n    rows = db((db.righe_in_ordine_fornitore.id_ordine_fornitore == id_ordine),(db.righe_in_ordine_fornitore.riga_emessa_in_ddt == \'F\')).select()\n    for row in rows:\n        \n        \n        #print str(row.riga_emessa_in_ddt)\n        #print type(row.riga_emessa_in_ddt)\n        if not row.riga_emessa_in_ddt:\n                       \n            \n            db.righe_in_ddt_fornitore.insert(codice_ordine=numero_ordine,quantita=row.quantita,prezzo=row.prezzo,sconti=row.sconti,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_fornitore,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,descrizione=row.commento)\n    \n    \n    return "ok"\n\ndef return_fatture_in_scadenza():\n    try:\n        month = int(request.vars[\'m\'])\n    except:\n        month = datetime.datetime.now().month\n      \n        \n    day_start,day_end = monthrange(datetime.datetime.now().year, month)\n    day_start = 1\n    \n    st = str(day_start)+"/"+str(month)+"/"+str(datetime.datetime.now().year)\n    start_date = datetime.datetime(datetime.datetime.now().year,month,day_start)\n    end_date = datetime.datetime(datetime.datetime.now().year,month,day_end)\n    #print start_date,end_date\n    \n    \n    fields=[db.fatture_salvate.nome_cliente,db.fatture_salvate.numero_fattura,db.fatture_salvate.scadenza,db.fatture_salvate.totale]\n    links=[lambda row: BUTTON("Aggiungi fattura",_onclick=XML(\'aggiungiFatturaAEffetti(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n    form = SQLFORM.grid(db.fatture_salvate.scadenza <=end_date,user_signature=True,args=request.args[:1],create=False,editable=True,deletable=False,links=links,fields=fields,csv=False)\n    return dict(form=form)\n\ndef return_scadenziario():\n    try:\n        month = int(request.vars[\'m\'])\n    except:\n        month = datetime.datetime.now().month\n      \n    year = int(datetime.datetime.now().year)\n\t\t\t\n    \n    if  datetime.datetime.now().month > month:\n    \tyear = year +1\n    \t\n    #year=str(year)\n    \t\n    \n    day_start,day_end = monthrange(year, month)\n    day_start = 1\n    \n    st = str(day_start)+"/"+str(month)+"/"+str(year)\n    start_date = datetime.datetime(year,month,day_start)\n    end_date = datetime.datetime(year,month,day_end)\n    #print start_date,end_date\n    \n    db(db.scadenziario).delete()\n    \n    rows = db((db.righe_in_ordine_cliente.evasione >=start_date) & (db.righe_in_ordine_cliente.evasione <=end_date) & (db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo) & (db.righe_in_ordine_cliente.id_ordine_cliente == db.ordine_cliente.id)).select(orderby = db.righe_in_ordine_cliente.evasione)\n    for row in rows:\n         ##print row\n         \n         quantita_prodotta_fino_ad_ora = 0\n         q = db(db.produzione_righe_per_ddt.id_riga_ordine == row.righe_in_ordine_cliente.id).select().first()\n         \n         if q is not None:\n             quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta)\n             quantita_da_produrre = int(row.righe_in_ordine_cliente.quantita) - quantita_prodotta_fino_ad_ora\n         else:\n             quantita_da_produrre = row.righe_in_ordine_cliente.quantita\n         \n         row.quantita_da_produrre = quantita_da_produrre\n         \n         #print row.righe_in_ordine_cliente.prezzo\n         \n         \n         \n         try:\n             prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\n             #print prezzo\n             \n             prezzo = Money(str(prezzo),"EUR")\n             prezzo = prezzo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n             #prezzo = str(row.prezzo).replace(".",",")\n             """\n             prezzo=0\n             """\n             #prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\n         except:\n             prezzo="Null"\n             \n         if "commento" not in row.righe_in_ordine_cliente.codice_articolo:\n             if quantita_da_produrre >0:\n                 db.scadenziario.insert(data_consegna = row.righe_in_ordine_cliente.evasione,cliente= row.ordine_cliente.nome_cliente,riferimento_ordine=row.ordine_cliente.riferimento_ordine_cliente,codice_ordine = row.ordine_cliente.ultimo_codice_ordine,codice_articolo = row.anagrafica_articoli.codice_articolo,descrizione = row.anagrafica_articoli.descrizione,qta_ordine = row.righe_in_ordine_cliente.quantita,qta_saldo = quantita_da_produrre,prezzo=prezzo,id_riga=row.righe_in_ordine_cliente.id)\n    \n    db.scadenziario.id.readable = False\n    form = SQLFORM.grid(db.scadenziario,user_signature=True,args=request.args[:1],create=False,editable=False,deletable=False)\n    return dict(form=form)\n\n\ndef ritorna_quantita_saldo(id_riga_ordine_cliente):\n    \n    quantita_prodotta_fino_ad_ora = 0\n    q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine_cliente).select().first()\n    quantita_da_produrre = 0\n    \n    riga = db(db.righe_in_ordine_cliente.id == id_riga_ordine_cliente).select().first()\n    \n    quantita_riga=0\n    if riga:\n     \tquantita_riga = int(riga.quantita)\n    \n    \n    #print "ID RIGA ORDINE ",id_riga_ordine_cliente\n    #print "quantita riga : ",quantita_riga\n    \n    if q is not None:\n             quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta)\n             #print "Prodotta fino ad ora ",quantita_prodotta_fino_ad_ora\n             quantita_da_produrre = quantita_riga - quantita_prodotta_fino_ad_ora\n    else:\n             quantita_da_produrre = quantita_riga\n         \n            \n    \n    return str(quantita_da_produrre)\n\n\ndef articoli_in_produzione():\n    db.articoli_in_produzione.id.readable = False\n    links=[lambda row: A(XML(\'Stampa RCP\'),_class=\'button btn btn-default\',_onClick=XML(\'stampaRcp(\'+str(row.id)+\')\'))]\n    form = SQLFORM.grid(db.articoli_in_produzione,create=False,editable=False,deletable=False,maxtextlength=100,paginate=5,links=links)\n    return dict(form=form)\n\n\ndef articoli_in_produzione_cron():\n  \n  \n    def ritorna_dettaglio_cliente(id_ordine,ordini_clienti):\n    \t\n    \t##print "IN RITORNA DETTAGLIO"\n        ##print "ID ORDINE CERCATO ",id_ordine\n    \t\n    \tfor ordine_cliente in ordini_clienti:\n    \t\t##print "ORDINE ID : ",ordine_cliente.id\n    \t\tif str(ordine_cliente.id) == str(id_ordine):\n    \t\t\t##print "TROVATO"\n    \t\t\t##print ordine_cliente\n    \t\t\treturn ordine_cliente\n    \t\t    \n    \t\t\n    \treturn None\n  \n    #print "qui"\n    db(db.articoli_in_produzione).delete()\n    #print "qui2"\n    #rows = db((db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo) & (db.righe_in_ordine_cliente.id_ordine_cliente == db.ordine_cliente.id)).select(orderby = db.righe_in_ordine_cliente.evasione)\n    #rows = db((db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo) & (db.righe_in_ordine_cliente.id_ordine_cliente == db.ordine_cliente.id)).select()\n    \n    \n    rows=db((db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo)).select(orderby = db.righe_in_ordine_cliente.evasione)\n    #print rows\n    \n    dati_clienti =  db(db.ordine_cliente).select()\n\n    \n\n    iterazione=0\n    for row in rows:\n         #print iterazione\n         iterazione+=1\n         \n         \n         dettaglio_cliente = ritorna_dettaglio_cliente(row.righe_in_ordine_cliente.id_ordine_cliente,dati_clienti)\n         #( db(db.ordine_cliente.id == db.righe_in_ordine_cliente.id_ordine_cliente).select().first()\n         \n         if dettaglio_cliente is not None:\n\t         quantita_prodotta_fino_ad_ora = 0\n\t         q = db(db.produzione_righe_per_ddt.id_riga_ordine == row.righe_in_ordine_cliente.id).select().first()\n\t         \n\t         if q is not None:\n\t             quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta)\n\t             #print "Fino ad ora ",quantita_prodotta_fino_ad_ora\n\t             \n\t             quantita_da_produrre = int(row.righe_in_ordine_cliente.quantita) - quantita_prodotta_fino_ad_ora\n\t         else:\n\t             quantita_da_produrre = row.righe_in_ordine_cliente.quantita\n\t         \n\t         row.quantita_da_produrre = quantita_da_produrre\n\t         \n\t         #print row.righe_in_ordine_cliente.prezzo\n\t         \n\t         \n\t         \n\t         try:\n\t             prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\n\t             ##print prezzo\n\t             \n\t             prezzo = Money(str(prezzo),"EUR")\n\t             prezzo = prezzo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n\t             #prezzo = str(row.prezzo).replace(".",",")\n\t             """\n\t             prezzo=0\n\t             """\n\t             #prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\n\t         except:\n\t             prezzo="Null"\n\t             #print "Eccezzione"\n\t             \n\t         if "commento" not in row.righe_in_ordine_cliente.codice_articolo:\n\t             if quantita_da_produrre > 0:\n\t                 #print "Inserisco"\n\t                 dettaglio_cliente\n\t                 #dettaglio_cliente = dettaglio_cliente.ordine_cliente\n\t                 db.articoli_in_produzione.insert(data_consegna = row.righe_in_ordine_cliente.evasione,cliente= dettaglio_cliente.nome_cliente,riferimento_ordine=dettaglio_cliente.riferimento_ordine_cliente,codice_ordine = dettaglio_cliente.ultimo_codice_ordine,codice_articolo = row.anagrafica_articoli.codice_articolo,descrizione = row.anagrafica_articoli.descrizione,qta_ordine = row.righe_in_ordine_cliente.quantita,qta_saldo = quantita_da_produrre,prezzo=prezzo,id_riga=str(row.righe_in_ordine_cliente.id))\n    \n    return locals()\n\ndef scadenziario():\n    current_month = 1\n    return locals()\n\ndef gestione_numero_fattura():\n    form = SQLFORM.grid(db.fattura,csv=False,create=False,editable=True,searchable=False)\n    return locals()\n\ndef gestione_numero_ddt():\n    form = SQLFORM.grid(db.ddt,csv=False,create=False,editable=True,searchable=False,deletable=False)\n    return locals()\n\ndef ritorna_numero_ddt_da_ddt_id(id):\n    ddt_id = db(db.ddt_da_fatturare.id==id).select()\n    #print ddt_id\n    #numero_ddt = db(db.ddt_cliente.ddt_id == ddt_id).select().first()["numero_ddt"]\n    return ddt_id\n\ndef ddt_da_fatturare():\n    \n    db.ddt_da_fatturare.user_id.default = auth.user_id\n    #db.ddt_da_fatturare.numero_ddt = Field.Virtual("Numero_ddt",lambda row:ritorna_numero_ddt_da_ddt_id(row.ddt_da_fatturare.id))\n    fields = [db.ddt_da_fatturare.numero_ddt,db.ddt_da_fatturare.data_emissione,db.ddt_da_fatturare.totale]\n    form = SQLFORM.grid(db.ddt_da_fatturare,fields=fields,csv=False,create=False,editable=False,searchable=False)\n    return locals()\n\ndef righe_in_ddt_cliente():\n    \n    db.righe_in_ddt_cliente.user_id.default = auth.user_id\n    db.righe_in_ddt_cliente.quantita_richiesta.writable=False\n    db.righe_in_ddt_cliente.quantita_richiesta.readonly=True\n    \n    if len(request.args) > 1 and (\'edit\' in request.args):\n         #print "ECCOLO"\n         fields = [db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo]\n         form = SQLFORM.grid(db.righe_in_ddt_cliente,fields=fields,csv=False,user_signature=True,args=request.args[:1])\n    else:       \n    \n         fields = [db.righe_in_ddt_cliente.codice_ordine,db.righe_in_ddt_cliente.codice_articolo,db.righe_in_ddt_cliente.n_riga,db.righe_in_ddt_cliente.riferimento_ordine,db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.saldo,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo,db.righe_in_ddt_cliente.evasione]\n         form = SQLFORM.grid(db.righe_in_ddt_cliente.user_id==auth.user_id,fields=fields,csv=False)\n         \n    return locals()\n\ndef righe_in_ddt_cliente_mod():\n    \n    db.righe_in_ddt_cliente.user_id.default = auth.user_id\n    db.righe_in_ddt_cliente.quantita_richiesta.writable=False\n    db.righe_in_ddt_cliente.quantita_richiesta.readonly=True\n    \n    if len(request.args) > 1 and (\'edit\' in request.args):\n         #print "ECCOLO"\n         fields = [db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo]\n         form = SQLFORM.grid(db.righe_in_ddt_cliente,fields=fields,csv=False,user_signature=True,args=request.args[:1])\n    else:       \n    \n         fields = [db.righe_in_ddt_cliente.codice_ordine,db.righe_in_ddt_cliente.codice_articolo,db.righe_in_ddt_cliente.n_riga,db.righe_in_ddt_cliente.riferimento_ordine,db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.saldo,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo,db.righe_in_ddt_cliente.evasione]\n         form = SQLFORM.grid(db.righe_in_ddt_cliente.user_id==auth.user_id,fields=fields,csv=False)\n         \n         \n    return locals()\n\ndef righe_in_ddt_fornitore():\n    \n    db.righe_in_ddt_fornitore.user_id.default = auth.user_id\n    fields = [db.righe_in_ddt_fornitore.codice_ordine,db.righe_in_ddt_fornitore.codice_articolo,db.righe_in_ddt_fornitore.n_riga,db.righe_in_ddt_fornitore.riferimento_ordine,db.righe_in_ddt_fornitore.u_m,db.righe_in_ddt_fornitore.quantita,db.righe_in_ddt_fornitore.prezzo,db.righe_in_ddt_fornitore.sconti,db.righe_in_ddt_fornitore.codice_iva,db.righe_in_ddt_fornitore.evasione]\n    form = SQLFORM.grid(db.righe_in_ddt_fornitore.user_id == auth.user_id,fields=fields,csv=False)\n    return locals()\n\ndef aspetto_esteriore_dei_beni():\n    form = SQLFORM.grid(db.aspetto_esteriore_dei_beni)\n    return locals()\n\ndef causali():\n    form = SQLFORM.grid(db.causali)\n    return locals()\n\ndef porto():\n    form = SQLFORM.grid(db.porto)\n    return locals()\n\ndef modifica_ddt():\n    \n    \n    errore = False\n    try:\n        ddt_id = request.vars.a\n        id_cliente = request.vars.b\n        \n        #print "DDT ID : "+ddt_id\n        nome_cliente = db(db.clienti.id==id_cliente).select().first()["nome"]\n        \n        db(db.righe_in_ddt_cliente.user_id==auth.user_id).delete() \n        \n        \n        d = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()\n        numero_ddt_corrente = numero_ddt=d["numero_ddt"]\n        data_ddt=datetime.datetime.strptime(d["data_inserimento"][0:10],"%Y-%m-%d").date()\n        \n        data_ddt=data_ddt.strftime("%d/%m/%Y")\n        \n        righe_form="ok"\n        \n        \n        db(db.righe_in_ddt_cliente).delete()\n        ##print "SONO QUI"\n        \n        query=db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id).select()\n        \n        for r in query:\n            \n            \n            if "commento" in r.codice_articolo:\n                quantita_da_produrre = prenotato = quantita_prodotta = saldo = 0\n            \n                pass\n            \n            elif "commento" not in r.codice_articolo:\n                #print "prima"\n                """\n                Vado a vedere la quantit\xc3\xa0 attualmente prodotta salvata nella tabella "produzione_righe_per_ddt"\n                """\n                ##print "RIGA VEFIASDFA"\n                ##print "ciao"\n                if r.id_riga_ordine is None or len(r.id_riga_ordine)<1:\n                    #print "riciao"\n                    id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == r.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==r.n_riga)).select().first()\n                    if id_riga_ordine is not None:\n                        id_riga_ordine = id_riga_ordine["id"]\n                    else:\n                        errore = True\n                        #print r\n                        msg = "La riga {0} dell\'ordine {1} \xc3\xa8 stata cancellata dalle righe dell\'ordine".format(r.n_riga,r.id_ordine)\n                        response.flash=msg\n                else:\n                    #print "provo"\n                    id_riga_ordine = r.id_riga_ordine\n                    \n                #print "ID RIGA ORDINE ",id_riga_ordine\n                \n                row_id = r.id\n                dettagli_produzione_riga = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\n                dettagli_produzione_riga = db((db.saved_righe_in_ddt_cliente.id_riga_ordine == id_riga_ordine) &  (db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id)).select().first()\n                #print dettagli_produzione_riga\n                if dettagli_produzione_riga is not None:\n                    #print "Riga trovata"\n                    """\n                    Se ho trovato la riga vuol dire che \xc3\xa8 stata immessa una quantit\xc3\xa0 in saldo.\n                    Vado a recuperare la quantit\xc3\xa0 prodotta\n                    """\n                    #quantita_da_produrre= int(ritorna_quantita_richiesta_da_riga_salvata(id_riga_ordine)) - int(dettagli_produzione_riga.quantita_prodotta)\n                    \n                    #quantita_da_produrre= int(dettagli_produzione_riga.quantita_prodotta)\n                    quantita_da_produrre= int(dettagli_produzione_riga.quantita)\n                    \n                    #print "quantita da produrre ",quantita_da_produrre\n                    quantita_prodotta = dettagli_produzione_riga.quantita\n                    \n                else:\n                    #print "Riga non trovata"\n                    """\n                    Metto la quantita prodotta = alla quantita richiesta per velocizzare l\'inserimento\n                    row.quantita \xc3\xa8 l\'iniziale quantita richiesta nell\'ordine\n                    """\n                    #quantita_da_produrre = r.quantita\n                    quantita_da_produrre = 0\n                    quantita_prodotta = 0\n            \n            \n            \n                \n            db.righe_in_ddt_cliente.insert(saldo=ritorna_quantita_saldo(id_riga_ordine),user_id = auth.user_id,codice_articolo = r.codice_articolo,descrizione=r.descrizione,riferimento_ordine=r.riferimento_ordine,u_m=r.u_m,prezzo=r.prezzo,sconti=r.sconti,codice_iva=r.codice_iva,n_riga=r.n_riga,evasione=r.evasione,id_ordine=r.id_ordine,codice_ordine=r.codice_ordine,quantita_richiesta=ritorna_quantita_richiesta_da_riga_salvata(id_riga_ordine),quantita_prodotta=quantita_da_produrre,id_riga_ordine=r.id_riga_ordine)\n        \n        \n        #print "SONO QUIkk"\n        #print ddt_id\n        ordine_id = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id).select().first()["id_ordine"]\n        #print "SONO QUI2"\n        numero_riga_corrente = db(db.righe_in_ordine_cliente.id_ordine_cliente==ordine_id).count()+1\n        db.righe_in_ordine_cliente.n_riga.default = numero_riga_corrente\n        db.righe_in_ordine_cliente.n_riga.writable = False\n        \n        db.righe_in_ordine_cliente.id_ordine_cliente.default = ordine_id\n        db.righe_in_ordine_cliente.id_ordine_cliente.writable = False\n        \n        db.righe_in_ordine_cliente.prezzo.default = 0\n        #db.righe_in_ordine_cliente.prezzo.writable = False\n        #fields=[\'\']\n        \n        \n        cliente = db(db.clienti.id == id_cliente).select().first()\n        db.righe_in_ordine_cliente.codice_iva.default=cliente.codice_iva\n       \n        ddt_id2 = db(db.ddt_cliente.id == ddt_id).select()\n        \n        links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRigheMod(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n        fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente]\n        query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\n        #query=(db.ordine_cliente.ddt_completato == \'0\')\n        \n        righe_in_ordine_cliente_form = SQLFORM.grid(query=query,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\n        \n        \n        \n        \n        \n        luoghi = []\n        \n        row = db(db.clienti.id == id_cliente).select().first()\n        \n        error = False\n        if row.citta is None:\n            response.flash="Il cliente non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\n            error=True\n        \n        try:\n            if len(row.luogo_consegna_1) > 0:\n                luoghi.append(row.luogo_consegna_1)\n                \n            if len(row.luogo_consegna_2) > 0:\n                luoghi.append(row.luogo_consegna_2)\n            \n            if len(row.luogo_consegna_3) > 0:\n                luoghi.append(row.luogo_consegna_3)\n            \n            if len(row.luogo_consegna_4) > 0:\n                luoghi.append(row.luogo_consegna_4)\n            \n            if len(row.luogo_consegna_5) > 0:\n                luoghi.append(row.luogo_consegna_5)\n                \n                \n            if len(row.luogo_consegna_6) > 0:\n                luoghi.append(row.luogo_consegna_6)\n        except:\n            luoghi.append("Cliente,,,,,,")\n            \n        trasporto_a_mezzo = Set()\n        trasporto_a_mezzo.add("Mittente")\n        trasporto_a_mezzo.add("Destinatario")\n        trasporto_a_mezzo.add("Vettore")\n        \n        aspetto_esteriore_dei_beni = Set()\n        rows = db(db.aspetto_esteriore_dei_beni).select()\n        for row in rows:\n            aspetto_esteriore_dei_beni.add(row.nome)\n            \n        causali = Set()\n        rows = db(db.causali).select()\n        for row in rows:\n            causali.add(row.nome)\n            \n            \n        porto = Set()\n        rows = db(db.porto).select()\n        for row in rows:\n            porto.add(row.nome)\n    except Exception, e:\n        #print e\n        errore=True;\n    \n    return locals()\n\n\ndef fatturazione_istantanea_2():\n \n    #print request.args\n    id_cliente = request.args[0]\n    #print request.args[0]\n    #print "ID CLIENTE = {0}".format(id_cliente)\n    \n    nome_cliente =db(db.clienti.id==id_cliente).select().first()["nome"]\n    \n    #print nome_cliente\n    form_righe = form = SQLFORM.grid(db.righe_in_fattura_istantanea,formname=\'mod\',maxtextlength=100,create=True,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1])    \n    \n    new_order = False\n    if \'new\' in request.args:\n        new_order = True\n    \n    return locals()\n\ndef nota_di_accredito_2():\n \n    id_cliente = request.args[0]\n    #print request.args[0]\n    #print "ID CLIENTE = {0}".format(id_cliente)\n    \n    nome_cliente =db(db.clienti.id==id_cliente).select().first()["nome"]\n    \n    #print nome_cliente\n    form_righe = form = SQLFORM.grid(db.righe_in_fattura_istantanea,formname=\'mod\',maxtextlength=100,create=True,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1])    \n\n    new_order = False\n    if \'new\' in request.args:\n        new_order = True\n    return locals()\n\n\ndef mod_ddt_clienti_2():\n \n    id_cliente = request.args[0]\n    nome_cliente =db(db.clienti.id==id_cliente).select().first()["nome"]    \n  \n    \n    """\n    Ritornare i ddt collegati al cliente\n    """\n    db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\n    \n    fields = [db.ddt_cliente.numero_ddt,db.ddt_cliente.data_richiesta]\n    query=((db.ddt_cliente.id_cliente == id_cliente) & (db.ddt_cliente.numero_ddt !="None")) \n    links=[lambda row: A("Modifica",_href=URL(\'modifica_ddt\',vars=dict(a=row.id,b=id_cliente)),_class=\'button btn btn-default\')]\n    form = SQLFORM.grid(query=query,formname=\'mod\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,fields=fields,user_signature=True,args=request.args[:1],links=links)\n    #form ="hello"\n    return locals()\n\ndef mod_ddt_clienti_3():\n    id_ddt = request.args[0]\n    \n    #db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\n    \n    \n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\n    id_cliente = ddt_id.id_cliente\n    nome_cliente = ddt_id.nome_cliente\n    \n    \n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\n    n = numero_ddt_salvato.split("/")[0]\n    a = numero_ddt_salvato.split("/")[1]\n    new_n = str(int(n) + 1)\n    numero_ddt_corrente = new_n + "/" + a\n    \n    #print "ID CLIENTE IN DDT2 = ",id_cliente\n    \n    \n    luoghi = []\n    \n    row = db(db.clienti.id == id_cliente).select().first()\n    \n    error = False\n    if row.citta is None:\n        response.flash="Il cliente non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\n        error=True\n    \n    try:\n        if len(row.luogo_consegna_1) > 0:\n            luoghi.append(row.luogo_consegna_1)\n            \n        if len(row.luogo_consegna_2) > 0:\n            luoghi.append(row.luogo_consegna_2)\n        \n        if len(row.luogo_consegna_3) > 0:\n            luoghi.append(row.luogo_consegna_3)\n        \n        if len(row.luogo_consegna_4) > 0:\n            luoghi.append(row.luogo_consegna_4)\n        \n        if len(row.luogo_consegna_5) > 0:\n            luoghi.append(row.luogo_consegna_5)\n            \n        if len(row.luogo_consegna_6) > 0:\n            luoghi.append(row.luogo_consegna_6)\n    except:\n        luoghi.append("Cliente,,,,,,")\n        \n    trasporto_a_mezzo = Set()\n    trasporto_a_mezzo.add("Mittente")\n    trasporto_a_mezzo.add("Destinatario")\n    trasporto_a_mezzo.add("Vettore")\n    \n    aspetto_esteriore_dei_beni = Set()\n    rows = db(db.aspetto_esteriore_dei_beni).select()\n    for row in rows:\n        aspetto_esteriore_dei_beni.add(row.nome)\n        \n    causali = Set()\n    rows = db(db.causali).select()\n    for row in rows:\n        causali.add(row.nome)\n        \n        \n    porto = Set()\n    rows = db(db.porto).select()\n    for row in rows:\n        porto.add(row.nome)\n    \n    \n\n    ddt_id2 = db(db.ddt_cliente.id == id_ddt).select()\n    \n    links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRighe(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n    fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente]\n    query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\n    \n    righe_in_ordine_cliente_form = SQLFORM.grid(query=query,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\n    \n    \n    \n    \n    return locals()\n\n\ndef ddt_clienti_2():\n    id_ddt = request.args[0]\n    \n    #db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\n    \n    \n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\n    id_cliente = ddt_id.id_cliente\n    nome_cliente = ddt_id.nome_cliente\n    \n    \n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\n    n = numero_ddt_salvato.split("/")[0]\n    a = numero_ddt_salvato.split("/")[1]\n    new_n = str(int(n) + 1)\n    numero_ddt_corrente = new_n + "/" + a\n    \n    #print "ID CLIENTE IN DDT2 = ",id_cliente\n    \n    \n    luoghi = []\n    \n    row = db(db.clienti.id == id_cliente).select().first()\n    \n    error = False\n    if row.citta is None:\n        response.flash="Il cliente non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\n        error=True\n    \n    try:\n        if len(row.luogo_consegna_1) > 0:\n            luoghi.append(row.luogo_consegna_1)\n            \n        if len(row.luogo_consegna_2) > 0:\n            luoghi.append(row.luogo_consegna_2)\n        \n        if len(row.luogo_consegna_3) > 0:\n            luoghi.append(row.luogo_consegna_3)\n        \n        if len(row.luogo_consegna_4) > 0:\n            luoghi.append(row.luogo_consegna_4)\n        \n        if len(row.luogo_consegna_5) > 0:\n            luoghi.append(row.luogo_consegna_5)\n        \n        if len(row.luogo_consegna_6) > 0:\n            luoghi.append(row.luogo_consegna_6)\n    except:\n        luoghi.append("Cliente,,,,,,")\n    \n    \n    selected_trasporto = row.trasporto_a_mezzo\n    selected_causale = row.causale_trasporto\n    selected_porto=row.porto\n    selected_vettore=row.vettore\n    \n    ##print selected_causale\n    \n        \n    trasporto_a_mezzo = Set()\n    trasporto_a_mezzo.add("Mittente")\n    trasporto_a_mezzo.add("Destinatario")\n    trasporto_a_mezzo.add("Vettore")\n    \n    aspetto_esteriore_dei_beni = Set()\n    rows = db(db.aspetto_esteriore_dei_beni).select()\n    for row in rows:\n        aspetto_esteriore_dei_beni.add(row.nome)\n        \n    causali = Set()\n    rows = db(db.causali).select()\n    for row in rows:\n        causali.add(row.nome)\n        \n        \n    porto = Set()\n    rows = db(db.porto).select()\n    for row in rows:\n        porto.add(row.nome)\n    \n    \n\n    ddt_id2 = db(db.ddt_cliente.id == id_ddt).select()\n    \n    links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRighe(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n    fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente]\n    query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\n    \n    righe_in_ordine_cliente_form = SQLFORM.grid(query=query,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\n    \n    \n    \n    \n    return locals()\n\ndef ddt_fornitori_2():\n    id_ddt = request.args[0]\n    \n    db(db.righe_in_ddt_fornitore.user_id == auth.user_id).delete()\n    \n    \n    ddt_id = db(db.ddt_fornitore.id == id_ddt).select().first()\n    id_fornitore = ddt_id.id_fornitore\n    nome_fornitore = ddt_id.nome_fornitore\n    \n    try:\n        numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\n        n = numero_ddt_salvato.split("/")[0]\n        a = numero_ddt_salvato.split("/")[1]\n        new_n = str(int(n) + 1)\n        numero_ddt_corrente = new_n + "/" + a\n    except:\n        db.ddt.insert(numero_ddt="0/17")\n        numero_ddt_corrente = "1/17"\n    \n    \n    row = db(db.fornitori.id == id_fornitore).select().first()\n    \n    error = False\n    if row.citta is None:\n        response.flash="Il fornitore non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\n        error=True\n    \n    \n    luoghi = []\n    \n   \n    \n    try:\n        if len(row.luogo_consegna_1) is not Null:\n            luoghi.append(row.luogo_consegna_1)\n        \n        if len(row.luogo_consegna_2) is not Null:\n            luoghi.append(row.luogo_consegna_2)\n    except:\n        luoghi.append("Indirizzo fornitore,,,,,")\n   \n        \n       \n    trasporto_a_mezzo = Set()\n    trasporto_a_mezzo.add("Mittente")\n    trasporto_a_mezzo.add("Destinatario")\n    trasporto_a_mezzo.add("Vettore")\n    \n    aspetto_esteriore_dei_beni = Set()\n    rows = db(db.aspetto_esteriore_dei_beni).select()\n    for row in rows:\n        aspetto_esteriore_dei_beni.add(row.nome)\n        \n    causali = Set()\n    rows = db(db.causali).select()\n    for row in rows:\n        causali.add(row.nome)\n        \n        \n    porto = Set()\n    rows = db(db.porto).select()\n    for row in rows:\n        porto.add(row.nome)\n\n    ddt_id2 = db(db.ddt_cliente.id == id_ddt).select()\n    \n    links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRigheFornitore(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n    fields=[db.ordine_fornitore.ultimo_codice_ordine,db.ordine_fornitore.riferimento_ordine_cliente,db.ordine_fornitore.data_ordine_fornitore]\n    query=((db.ordine_fornitore.id_fornitore== id_fornitore) & (db.ordine_fornitore.ddt_completato ==\'F\'))\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\n    \n    righe_in_ordine_fornitore_form = SQLFORM.grid(query=query,formname=\'ordini_fornitorii_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\n    \n    \n    \n    \n    return locals()\n\n\n\n\n\ndef crea_riba():\n    \n    current_month = 1\n    \n    return locals()\n    \n\n@service.jsonrpc\n@service.jsonrpc2\ndef ristampa_fattura_da_id(args):\n    \n    \n    \n    id_fattura=args[\'0\']\n    dati_fattura = db(db.fatture_salvate.id == id_fattura).select().first()\n    \n    #print dati_fattura\n    \n    id_cliente = dati_fattura.id_cliente\n    \n    ddts_id = dati_fattura.id_ddt\n    #response.flash = ddts_id\n    \n    \n    numero_fattura_da_salvare = dati_fattura.numero_fattura\n     \n    """\n    Dati cliente\n    """\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    \n    \n    \n    fattura = FATTURA("FATTURA DIFFERITA",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare)\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\n    \n    \n    fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADEMZA")\n    \n    \n    \n    ddts_id = eval(ddts_id)\n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    \n    lista_ddt = []\n    for ddt_id in ddts_id:\n        \n        \n        lista_ddt.append(ddt_id)\n        \n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id).select()\n        #print "DDT ID : ",ddt_id\n        for row in rows:\n            \n            \n            id_ordine = row.id_ordine\n            try:\n                  pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\n                  #print "pagamento = ",pagamento\n                  if pagamento is None:\n                        pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                        \n                  giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                  scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                  scadenza = scadenza.strftime("%d/%m/%Y")\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\n            except:\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\n                  return locals()\n            \n            #print "Aggiunta rig"\n            sconti = row.sconti\n            if row.sconti is None:\n                \n                sconti=""\n            \n            importo = saved_importo = float(row.quantita) * float(row.prezzo)\n            importo = Money(str(importo),"EUR")\n            importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n            prezzo = str(row.prezzo).replace(".",",")\n            \n            codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n            percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n            \n            importo_totale +=saved_importo\n            imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n            \n            if not codice_iva in lista_codici_iva:\n                lista_codici_iva[codice_iva] = saved_importo\n            else:\n                lista_codici_iva[codice_iva] += saved_importo\n            \n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\n        \n    \n    \n    #print lista_codici_iva\n    \n    \n    \n    bollo_presente = False\n    bollo = 0\n    for k,v in lista_codici_iva.iteritems():\n        codice_iva = k\n        importo_netto = v\n        #print "LISTA CODICI : ",codice_iva,importo_netto\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\n        percentuale_iva = dettaglio_iva.percentuale_iva\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\n        imposta_iva = return_imposta(v,percentuale_iva)\n        if dettaglio_iva.bollo_su_importi_esenti is True:\n            if not bollo_presente:\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n                bollo_presente = True\n                \n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\n        bollo = 0\n                \n                \n    if bollo_presente:\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\n        importo_totale += float(bollo)\n     \n    importo_totale_da_salvare = importo_totale +imposta_iva\n    \n    \n              \n    importo_totale = Money(str(importo_totale),"EUR")\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    \n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \n    fattura.totale(str(importo_totale_da_salvare))\n    \n    #db.fatture_salvate.insert(nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \n        \n        \n    \n   \n    \n   \n    fattura.insert_rows()\n    fattura.create_pdf()\n    \n\ndef ristampa_fattura():\n      \n    links=[lambda row: BUTTON("Ristampa",_onclick=XML(\'ristampaFattura(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n    fields=[db.fatture_salvate.data_fattura,db.fatture_salvate.numero_fattura,db.fatture_salvate.nome_cliente,db.fatture_salvate.totale]\n    fatture_da_ristampare = SQLFORM.grid(db.fatture_salvate,formname=\'fatture_salvate\',maxtextlength=100,create=False,editable=False,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,fields=fields)\n    return locals()\n\ndef fatturazione_differita_2():\n    id_fattura = request.args[0]\n    \n    fattura = db(db.fattura_cliente.id == id_fattura).select().first()\n    id_cliente = fattura.id_cliente\n    dal = fattura.dal\n    al_fixed = fattura.al\n    al = fattura.al + datetime.timedelta(days=2)\n    nome_cliente = fattura.nome_cliente\n    \n    \n    """\n    """\n        \n    #print "ID CLIENTE IN FATTURA DIFFERITA = ",id_cliente\n    \n    """\n    Select all ddts of the selected client.\n    """\n    #print fattura.dal,al\n    ddts_id = ((db.ddt_cliente.id_cliente == id_cliente) & (db.ddt_cliente.data_richiesta >= fattura.dal) & (db.ddt_cliente.data_richiesta <= al) & (db.ddt_cliente.fattura_emessa == \'F\') & (db.ddt_cliente.numero_ddt != \'None\'))\n    #ddts_id = ((db.ddt_cliente.id_cliente == id_cliente) & (db.ddt_cliente.data_richiesta >= fattura.dal) & (db.ddt_cliente.data_richiesta <= al) & (db.ddt_cliente.numero_ddt != \'None\'))\n    \n\n    \n    links=[lambda row: BUTTON("Aggiungi DDT",_onclick=XML(\'aggiungiDDT(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n    db.ddt_cliente.totale = Field.Virtual("Totale", lambda row: calcola_totale_iva_inclusa_da_ddt(row.ddt_cliente.id))\n    #db.ddt_cliente.totale = Field.Virtual("Totale", lambda row: 0)\n    fields=[db.ddt_cliente.data_richiesta,db.ddt_cliente.numero_ddt,db.ddt_cliente.totale]\n    #query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\n    print "---------------"\n    ddt_da_fatturare = SQLFORM.grid(query=ddts_id,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=False,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\n    \n   \n    \n    return locals()\n\ndef calcola_totale_per_mese_da_ddt_cliente():\n    current_month = 1\n    return locals()\n\ndef calcola_totale_per_anno():\n\tcurrent_year=2018\n\treturn locals()\n\ndef calcola_totale_per_anno_data():\n\t\n\tlista=[]\n\triga=[]\n\triga.append("Cliente")\n\triga.append("Totale")\n\tlista.append(riga)\n    \n\ttry:\n\t\tyear = int(request.vars[\'y\'])\n\texcept:\n\t\tyear = datetime.datetime.now().year\n\t  \n\t\t\n\t#day_start,day_end = monthrange(datetime.datetime.now().year, month)\n\t#day_start = 1\n\t\n\t#st = str(day_start)+"/"+str(month)+"/"+str(datetime.datetime.now().year)\n\tstart_date = datetime.datetime(year,1,1)\n\tend_date = datetime.datetime(year,12,31).date()\n\t#print start_date,end_date\n\t\n\t   \n\t\n\n\trows1= db(db.clienti).select()\n\t\n\tdb(db.totali_ddt_mese_).delete()\n\tdb.totali_ddt_mese_.id.readable=False;\n\t\n\ttotalissimo=0\n\tnome_cliente=""\n\tfor r1 in rows1:\n\t\t\n\t\ttry:\n\t\t\triga=[]\n\t\t\ttotale = 0\n\t\t\tddts = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\')).select()\n\t\t\t\n\t\t\t\n\t\t   \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tfor ddt in ddts:\n\t\t\t\t\t\t  \n\t\t\t   \n\t\t\t\tnome_cliente = ddt.nome_cliente\n\t\t\t\t#print "NOME CLIENTE = ",nome_cliente,ddt.id\n\t\t\t\ttotale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\n\t\t\tif totale > 0:\t\n\t\t\t\triga.append(nome_cliente)\n\t\t\t\triga.append(totale)\n\t\t\t\tlista.append(riga)\n\t\t\t\tdb.totali_ddt_mese_.insert(cliente=nome_cliente,totale=ritorna_prezzo_europeo(totale))\n\t\t\t\ttotalissimo +=totale\n\t\texcept Exception,e:\n\t\t\t#print "ECCEZZIONE ",e\n\t\t\tpass\n\t\t\t\n\t##print lista\n\tform = SQLFORM.grid(db.totali_ddt_mese_,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\n\treturn dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))\n\t\n\t\n\t\n\treturn locals()\n\ndef calcola_totale_per_anno_leonardo():\n\tcurrent_year=1\n\treturn locals()\n\ndef calcola_totale_per_anno_leonardo_data():\n    \n    \n    lista=[]\n    \n    riga=[]\n    riga.append("Cliente")\n    riga.append("Totale")\n    lista.append(riga)\n    \n    \n    form=""\n    totalissimo=1000\n    \n    \n    try:\n        year = int(request.vars[\'y\'])\n    except:\n        year = datetime.datetime.now().year\n      \n        \n    #day_start,day_end = monthrange(datetime.datetime.now().year, month)\n    day_start = 1\n    \n    st = str(day_start)+"/"+str(1)+"/"+str(year)\n    start_date = datetime.datetime(year,1,day_start)\n    end_date = datetime.datetime(year,12,31).date() + timedelta(days=1)\n    #print start_date,end_date\n    \n    #return dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))   \n    \n\n    rows1= db(db.clienti.id==41).select()\n    \n    db(db.totali_ddt_anno_).delete()\n    db.totali_ddt_anno_.id.readable=False;\n    \n    totalissimo=0\n    nome_cliente=""\n    for r1 in rows1:\n        \n        try:\n            riga=[]\n            totale = 0\n            dest1 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'CHIETI\'))).select()\n            dest2 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'BISENZIO\'))).select()\n            dest3 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'BAINSIZZA\'))).select()\n            dest4 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'NERVIANO\'))).select()\n            dest5 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'ADRIATICA\'))).select()\n            \n            riga=[]\n            totale=0\n            for ddt in dest1:\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\n            if totale > 0:    \n                consegna=\'CHIETI\'\n                riga.append(consegna)\n                riga.append(totale)\n                lista.append(riga)\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\n                totalissimo +=totale\n            \n            riga=[]\n            totale=0\n            for ddt in dest2:\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\n            if totale > 0:    \n                consegna=\'CAMPI BISENZIO\'\n                riga.append(consegna)\n                riga.append(totale)\n                lista.append(riga)\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\n                totalissimo +=totale\n            \n            riga=[]\n            totale=0                \n            for ddt in dest3:\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\n            if totale > 0:    \n                consegna=\'BORGO BAINSIZZA\'\n                riga.append(consegna)\n                riga.append(totale)\n                lista.append(riga)\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\n                totalissimo +=totale\n            \n            riga=[]\n            totale=0\n            for ddt in dest4:\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\n            if totale > 0:    \n                consegna=\'NERVIANO\'\n                riga.append(consegna)\n                riga.append(totale)\n                lista.append(riga)\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\n                totalissimo +=totale\n            \n            riga=[]\n            totale=0\n            for ddt in dest5:\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\n            if totale > 0:    \n                consegna=\'FOCACCIA GROUP SRL\'\n                riga.append(consegna)\n                riga.append(totale)\n                lista.append(riga)\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\n                totalissimo +=totale\n                \n            \n        except Exception,e:\n            #print "ECCEZZIONE ",e\n            pass\n            \n    #print lista\n    form = SQLFORM.grid(db.totali_ddt_anno_,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\n    return dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))\n\n\ndef calcola_totale_per_mese_da_ddt_cliente_data():\n    \n    \n    lista=[]\n    \n    riga=[]\n    riga.append("Cliente")\n    riga.append("Totale")\n    lista.append(riga)\n    \n    try:\n        month = int(request.vars[\'m\'])\n    except:\n        month = datetime.datetime.now().month\n      \n        \n    day_start,day_end = monthrange(datetime.datetime.now().year, month)\n    day_start = 1\n    \n    st = str(day_start)+"/"+str(month)+"/"+str(datetime.datetime.now().year)\n    start_date = datetime.datetime(datetime.datetime.now().year,month,day_start)\n    end_date = datetime.datetime(datetime.datetime.now().year,month,day_end).date() + timedelta(days=1)\n    #print start_date,end_date\n    \n       \n    \n\n    rows1= db(db.clienti).select()\n    \n    db(db.totali_ddt_mese_).delete()\n    db.totali_ddt_mese_.id.readable=False;\n    \n    totalissimo=0\n    nome_cliente=""\n    for r1 in rows1:\n        \n        try:\n            riga=[]\n            totale = 0\n            ddts = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\')).select()\n            \n            \n           \n            \n            \n            \n            for ddt in ddts:\n                          \n               \n                nome_cliente = ddt.nome_cliente\n                #print "NOME CLIENTE = ",nome_cliente,ddt.id\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\n            if totale > 0:    \n                riga.append(nome_cliente)\n                riga.append(totale)\n                lista.append(riga)\n                db.totali_ddt_mese_.insert(cliente=nome_cliente,totale=ritorna_prezzo_europeo(totale))\n                totalissimo +=totale\n        except Exception,e:\n            #print "ECCEZZIONE ",e\n            pass\n            \n    ##print lista\n    form = SQLFORM.grid(db.totali_ddt_mese_,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\n    return dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))\n    \n    \n    \ndef ritorna_prezzo_europeo(importo):\n    importo = Money(str(importo),"EUR")\n    importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n    return importo\n\n\ndef ritorna_int_calcola_totale_iva_esclusa_da_ddt(id_ddt):\n    \n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt).select()\n        ##print "DDT ID : ",id_ddt\n        totale = 0\n        importo_totale = 0\n        imposta_totale = 0\n        \n        for row in rows:\n            if not "commento" in row.codice_articolo:             \n                id_ordine = row.id_ordine\n                try:\n                      importo = saved_importo = float(row.quantita) * float(row.prezzo)\n                      importo = Money(str(importo),"EUR")\n                      importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                      prezzo = str(row.prezzo).replace(".",",")\n                      \n                      #codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                      #percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n                      \n                      importo_totale += saved_importo\n                      #imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                except:\n                      pass\n                       \n            \n         \n        \n    \n    \n        totale = importo_totale+imposta_totale\n       \n        #print "DDT NUMERO : {0} TOTALE {1}".format(id_ddt,totale)\n        \n        return totale    \n\ndef ritorna_int_calcola_totale_iva_inclusa_da_ddt(id_ddt):\n    \n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt).select()\n        ##print "DDT ID : ",id_ddt\n        totale = 0\n        importo_totale = 0\n        imposta_totale = 0\n        \n        for row in rows:\n            if not "commento" in row.codice_articolo:             \n                id_ordine = row.id_ordine\n                try:\n                      importo = saved_importo = float(row.quantita) * float(row.prezzo)\n                      importo = Money(str(importo),"EUR")\n                      importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                      prezzo = str(row.prezzo).replace(".",",")\n                      \n                      codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                      percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n                      \n                      importo_totale += saved_importo\n                      imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n                except:\n                      pass\n                       \n            \n         \n        \n    \n    \n        totale = importo_totale+imposta_totale\n       \n        #print "DDT NUMERO : {0} TOTALE {1}".format(id_ddt,totale)\n        \n        return totale\n        \n        \n\ndef calcola_totale_iva_inclusa_da_ddt(id_ddt):\n\n        print "Dentro qui"\n        print "DDT ID : ",id_ddt\n        rows = db((db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt) & (db.saved_righe_in_ddt_cliente.codice_articolo !="commento")).select()\n        print "DDT ID : ",id_ddt\n        totale = 0\n        importo_totale = 0\n        imposta_totale = 0\n        print "sono qui"\n        for row in rows:\n                        \n            id_ordine = row.id_ordine\n            try:\n                importo = saved_importo = float(row.quantita) * float(row.prezzo)\n                importo = Money(str(importo),"EUR")\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n                prezzo = str(row.prezzo).replace(".",",")\n                \n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\n            \n                    \n                importo_totale += saved_importo\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\n            except Exception,e:\n                print e\n                pass\n                \n            \n         \n        \n    \n    \n        totale = importo_totale+imposta_totale\n        totale = Money(str(totale),"EUR")\n        totale = totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\n        print "Totale calcolato = ",totale\n        return totale\n        \n\ndef fatturazione_differita():\n    fields = [\'nome_cliente\',\'dal\',\'al\']\n    cliente_form = SQLFORM(db.fattura_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\n    \n    if cliente_form.process().accepted:\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\n        #print "ID CLIENTE = ",id_cliente\n        db(db.ddt_da_fatturare.user_id == auth.user_id).delete()\n        row = db(db.fattura_cliente.id == cliente_form.vars.id).select().first()\n        row.update_record(id_cliente = id_cliente.id)\n        redirect(URL(\'fatturazione_differita_2\',args=cliente_form.vars.id))\n    \n    return locals()\n\n\ndef fatturazione_istantanea():\n    \n    fields = [\'nome_cliente\']\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\n    \n    if cliente_form.process().accepted:\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\n        #print "ID CLIENTE = ",id_cliente\n        #print cliente_form.vars.id #LAST IMSERTED ID\n        \n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\n        #print "SELECTED ROW : ",row\n        row.update_record(id_cliente = id_cliente.id)\n        db(db.righe_in_fattura_istantanea).delete()\n        redirect(URL(\'fatturazione_istantanea_2\',args=id_cliente.id))\n    \n    return locals()\n\ndef nota_di_accredito():\n    \n    fields = [\'nome_cliente\']\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\n    \n    if cliente_form.process().accepted:\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\n        #print "ID CLIENTE = ",id_cliente\n        #print cliente_form.vars.id #LAST IMSERTED ID\n        \n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\n        #print "SELECTED ROW : ",row\n        row.update_record(id_cliente = id_cliente.id)\n        db(db.righe_in_fattura_istantanea).delete()\n        redirect(URL(\'nota_di_accredito_2\',args=id_cliente.id))\n        \n    return locals()\n\ndef ddt_clienti():\n    \n    fields = [\'nome_cliente\']\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\n    \n    if cliente_form.process().accepted:\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\n        #print "ID CLIENTE = ",id_cliente\n        #print cliente_form.vars.id #LAST IMSERTED ID\n        \n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\n        #print "SELECTED ROW : ",row\n        row.update_record(id_cliente = id_cliente.id)\n        db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\n        redirect(URL(\'ddt_clienti_2\',args=cliente_form.vars.id))\n    \n    return locals()\n    \ndef mod_ddt_clienti():\n    \n    fields = [\'nome_cliente\']\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form_mod\',formstyle = \'table3cols\',fields=fields)\n    \n    if cliente_form.process().accepted:\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\n        #print "ID CLIENTE = ",id_cliente\n        #print cliente_form.vars.id #LAST IMSERTED ID\n        \n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\n        #print "SELECTED ROW : ",row\n        #row.update_record(id_cliente = id_cliente.id)\n        #db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\n        redirect(URL(\'mod_ddt_clienti_2\',args=id_cliente.id))\n    \n    return locals()\n\ndef ddt_fornitori():\n    \n    fields = [\'nome_fornitore\']\n    \n    fornitore_form = SQLFORM(db.ddt_fornitore,formname=\'fornitore_form\',formstyle = \'table3cols\',fields=fields)\n    \n    if fornitore_form.process().accepted:\n        #print fornitore_form.vars.nome_fornitore\n        id_fornitore = db(db.fornitori.nome == fornitore_form.vars.nome_fornitore).select().first()\n       \n        \n        row = db(db.ddt_fornitore.id == fornitore_form.vars.id).select().first()\n        #print "SELECTED ROW : ",row\n        row.update_record(id_fornitore = id_fornitore.id)\n        redirect(URL(\'ddt_fornitori_2\',args=fornitore_form.vars.id))\n    \n    return locals()\n\ndef ddt_clienti_old():\n    \n    links=[lambda row: A(XML(\'Crea bolla\'),_class=\'button btn btn-default\',_href=URL(\'dettaglio_bolla\',args=row.id))]\n    fields=[db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.sconti,db.righe_in_ordine_cliente.codice_iva,db.righe_in_ordine_cliente.evasione]\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.ordine_cliente,formname=\'ordini_clienti\',maxtextlength=100,create=False,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links)\n    \n    return dict(righe_in_ordine_cliente_form=righe_in_ordine_cliente_form)\n\ndef gestione_piano_dei_conti():\n  \n    \n    return dict(message="ok")\n\ndef anagrafica_codici_iva():\n    codici_iva_form = SQLFORM.grid(db.anagrafica_codici_iva,formname=\'codici_iva\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\n    codici_iva_form.element(\'.web2py_counter\', replace=None)\n\n    return dict(codici_iva_form = codici_iva_form)\n\ndef anagrafica_banche():\n    anagrafica_banche_form = SQLFORM.grid(db.anagrafica_banche,formname=\'anagrafica_banche_form\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\n    anagrafica_banche_form.element(\'.web2py_counter\', replace=None)\n    try:\n        anagrafica_banche_form.element(\'input[name=descrizione_sottoconto]\')[\'_style\'] = \'width:350px;height:25px;\'\n        anagrafica_banche_form.element(\'input[name=descrizione]\')[\'_style\'] = \'width:350px;height:25px;\'\n    except:\n        pass\n    return dict(anagrafica_banche_form = anagrafica_banche_form)\n\ndef anagrafica_banche_azienda():\n    anagrafica_banche_form = SQLFORM.grid(db.anagrafica_banche_azienda,formname=\'anagrafica_banche_form\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n    anagrafica_banche_form.element(\'.web2py_counter\', replace=None)\n    try:\n        anagrafica_banche_form.element(\'input[name=descrizione_sottoconto]\')[\'_style\'] = \'width:350px;height:25px;\'\n        anagrafica_banche_form.element(\'input[name=descrizione]\')[\'_style\'] = \'width:350px;height:25px;\'\n    except:\n        pass\n    return dict(anagrafica_banche_form = anagrafica_banche_form)    \n\ndef fatture_form():\n    fields = [db.fatture_salvate.data_fattura,db.fatture_salvate.numero_fattura,db.fatture_salvate.totale,db.fatture_salvate.nome_cliente,db.fatture_salvate.scadenza]\n    \n    """Patch per sistemare la data\n      \n    \n    """\n    fatture=db(db.fatture_salvate).select()\n    \n    for fattura in fatture:\n    \toriginal_start_date = fattura.data_fattura\n    \tif original_start_date is not None:\n    \t \t\n    \t \tday_start,day_end = monthrange(original_start_date.year, original_start_date.month)\n       \t\td = str(day_end)+"/"+str(original_start_date.month)+"/"+str(original_start_date.year)\n    \n      \t\tstart_date = datetime.datetime.strptime(d,"%d/%m/%Y")\n      \t\t#print original_start_date,start_date\n      \t\tfattura.data_fattura = start_date\n      \t\tfattura.update_record()\n    \n    \n    if len(request.args) > 1 and (\'edit\' in request.args):\n        db.fatture_salvate.numero_fattura.writable=False\n        db.fatture_salvate.id_ddt.writable=False\n        db.fatture_salvate.id_ddt.readable=False\n        \n        db.fatture_salvate.id_cliente.writable=False\n        db.fatture_salvate.id_cliente.readable=False\n        \n        db.fatture_salvate.id_cliente.writable=False\n        db.fatture_salvate.id_cliente.readable=False\n        \n        db.fatture_salvate.richiede_riba.writable=False\n        db.fatture_salvate.richiede_riba.readable=False\n        \n        \n        db.fatture_salvate.riba_emessa.writable=False\n        db.fatture_salvate.riba_emessa.readable=False\n        \n    \n    links=[lambda row: BUTTON("Aggiungi fattura",_onclick=XML(\'aggiungiFattura(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\n        \n    fatture_form = SQLFORM.grid(db.fatture_salvate.richiede_riba==\'T\',formname=\'fatture\',maxtextlength=100,create=False,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,fields=fields,links=links,exportclasses=export_classes)   \n        \n    \n   \n    \n    \n    return locals()\n\n@service.jsonrpc\n@service.jsonrpc2\ndef successivo_riba(banca):\n    \n    if db(db.fatture_scelte).isempty():\n        response.flash="Selezionare almeno una fattura"\n        return 1/0\n    \n    \n    db(db.temp_banca).delete()\n    db.temp_banca.insert(banca=banca)\n    \n    return "ok"\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef accorpa(id,val):\n    d=db(db.fatture_scelte.id == id).select().first()\n    if "True" in str(val):\n        d.update_record(accorpa=True)\n    else:\n         d.update_record(accorpa=False)\n    \n    \n    return "ok"\n\n\n\n\n\ndef crea_indici_riba():\n    """\n    Formato : id_cliente,lista(id_fatture)\n    """\n    \n    cliente = []\n    lista_riba=[]\n    \n    fatture_accorpate = []\n    fatture=db(db.fatture_scelte).select()\n    \n    for f in fatture:\n        id_cliente = f.id_cliente\n        \n        fatture_accorpate = []\n        lista_fatture = []\n        if db((db.fatture_scelte.id_cliente == id_cliente) & (db.fatture_scelte.accorpa == \'T\')).count() < 2:\n            """\n            Nessuna fattura da accorpare per questo cliente\n            """\n            lista_fatture.append(f.id_fattura)\n            pass\n        else:\n            da_accorpare = db((db.fatture_scelte.id_cliente == id_cliente) & (db.fatture_scelte.accorpa == \'T\')).select()\n            for item in da_accorpare:\n                if not item in lista_fatture:\n                    \n                    lista_fatture.append(item.id_fattura)\n    \n        cliente = []\n        cliente.append(id_cliente)\n        cliente.append(lista_fatture)\n        if not cliente in lista_riba:\n            lista_riba.append(cliente)\n            \n    return lista_riba\n\ndef ritorna_dettaglio_fattura(id_fattura):\n    fattura = db(db.fatture_salvate.id ==id_fattura).select().first()\n    \n    msg = "Fattura numero "+fattura.numero_fattura +" Del " + fattura.data_fattura.strftime("%d/%m/%Y")+ " Tot. " + ritorna_prezzo_europeo(fattura.totale) + " <b>Scadenza</b> "+fattura.scadenza.strftime("%d/%m/%Y")\n    return msg\n\ndef ritorna_nome_cliente_da_id(id):\n    return db(db.clienti.id==id).select().first().nome\n\n\ndef ritorna_abi_nostra_banca_scelta():\n    \n    banca_scelta = db(db.temp_banca).select().first().banca\n    return  db(db.anagrafica_banche_azienda.descrizione == banca_scelta).select().first().codice_abi\n\ndef ritorna_cab_nostra_banca_scelta():\n    \n    banca_scelta = db(db.temp_banca).select().first().banca\n    return  db(db.anagrafica_banche_azienda.descrizione == banca_scelta).select().first().codice_cab\n\ndef ritorna_scadenza_e_totale_fattura_per_riba(id_fattura):\n    d = db(db.fatture_salvate.id == id_fattura).select().first()\n    scadenza = d.scadenza.strftime("%d%m%y")\n    totale = d.totale\n    #print "TOT : ".format(totale)\n    return scadenza,totale\n\n\ndef ritorna_abi_cab_da_cliente_id(cliente_id):\n\n    #print cliente_id\n    codice_banca = db(db.clienti.id == cliente_id).select().first().codice_banca\n    \n    codice_abi=""\n    codice_cab=""\n    try:\n\t    d= db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n\t    codice_abi=d.codice_abi\n\t    codice_cab=d.codice_cab\n    except:\n          pass\n    \n    return d.codice_abi,d.codice_cab\n    \n    \ndef truncate_float(number, length):\n    """Truncate float numbers, up to the number specified\n    in length that must be an integer"""\n\n    number = number * pow(10, length)\n    number = int(number)\n    number = float(number)\n    number /= pow(10, length)\n    return number\n    \ndef crea_file_riba():\n    \n    """Numero Univoco per ogni file riba creato?"""\n    try:\n        numero_disposizione = db(db.numero_disposizioni_riba).select().first().numero\n        numero_disposizione = int(numero_disposizione)\n    except:\n        numero_disposizione = 1\n    \n    """Contenitore per il flusso CBI"""\n    \n    flow = wrapper.Flow()\n    flow.header = wrapper.Record(\'IB\')\n    flow.footer = wrapper.Record(\'EF\')\n    \n    \n    \n    codice_assegnato_dalla_sia_alla_azienda_emittente ="60I33"\n    codice_abi_banca_assuntrice = ritorna_abi_nostra_banca_scelta()\n    codice_cab_banca_assuntrice = ritorna_cab_nostra_banca_scelta()\n    data_creazione = datetime.datetime.now().date().strftime("%d/%m/%y").replace("/","")\n    nome_supporto = "OpenGest"\n    codice_divisa = "E"\n    \n    flow.header[\'mittente\'] = codice_assegnato_dalla_sia_alla_azienda_emittente\n    flow.header[\'ricevente\'] = codice_abi_banca_assuntrice\n    flow.header[\'data_creazione\'] = data_creazione\n    flow.header[\'nome_supporto\'] = nome_supporto\n    flow.header[\'codice_divisa\'] = codice_divisa\n    \n    flow.footer[\'mittente\']=codice_assegnato_dalla_sia_alla_azienda_emittente\n    flow.footer[\'ricevente\']=codice_abi_banca_assuntrice\n    flow.footer[\'data_creazione\']=data_creazione\n    flow.footer[\'nome_supporto\']=nome_supporto\n    flow.footer[\'codice_divisa\']=codice_divisa\n    \n    numero_emissioni = crea_indici_riba()\n    #print "NUMERO EMISSIONI = {0} ".format(len(numero_emissioni))\n    flow.footer[\'numero_disposizioni\']=str(len(numero_emissioni)).zfill(7)\n    \n    \n    totalissimo = 0\n    flow.disposals = []\n    for numero_progressivo in range(1,len(numero_emissioni) +1):\n        """Contiene tutti e 7 i record"""\n        disposizione = wrapper.Disposal()\n        \n        #print "QUI"\n        """instanza ai vari record cbi"""\n        first_record = wrapper.Record(\'14\')\n        second_record = wrapper.Record(\'20\')\n        third_record = wrapper.Record(\'30\')\n        fourth_record = wrapper.Record(\'40\')\n        fifth_record = wrapper.Record(\'50\')\n        fifty_one = wrapper.Record(\'51\')\n        seventieth_record = wrapper.Record(\'70\')\n         \n         \n        emissione_corrente = numero_emissioni[numero_progressivo - 1]\n        cliente_id = emissione_corrente[0]\n        fatture = emissione_corrente[1]\n        """\n        Raccolta dati per il record 14 first_record\n        """\n        codice_abi_domiciliaria,codice_cab_domiciliaria=ritorna_abi_cab_da_cliente_id(cliente_id)\n        codice_cliente_debitore = cliente_id\n        #print ritorna_abi_cab_da_cliente_id\n                                \n                        \n        importo_della_ricevuta_in_centesimi = 0\n        riferimento_fattura = ""\n        for id_fattura in fatture:\n            data_pagamento,totale = ritorna_scadenza_e_totale_fattura_per_riba(id_fattura)\n            \n            importo_della_ricevuta_in_centesimi += float(totale)\n            totalissimo += importo_della_ricevuta_in_centesimi\n            \n            riferimento_fattura+= db(db.fatture_salvate.id == id_fattura).select().first().numero_fattura+" del "+db(db.fatture_salvate.id == id_fattura).select().first().data_fattura.strftime("%d/%m/%Y") + " "\n        \n        importo_della_ricevuta_in_centesimi = \'%.2f\' % round(importo_della_ricevuta_in_centesimi,2)\n        \n        importo_della_ricevuta_in_centesimi = importo_della_ricevuta_in_centesimi.replace(".","").zfill(13)\n        \n        #print "importo : {0}".format(importo_della_ricevuta_in_centesimi)\n        first_record[\'numero_progressivo\']=str(numero_progressivo).zfill(7)\n        first_record[\'data_pagamento\']=data_pagamento\n        first_record[\'importo\']=str(importo_della_ricevuta_in_centesimi)\n        first_record[\'codice_abi_banca\']=codice_abi_banca_assuntrice\n        first_record[\'cab_banca\']=codice_cab_banca_assuntrice\n        first_record[\'codice_abi_domiciliaria\']=codice_abi_domiciliaria\n        first_record[\'codice_cab_domiciliaria\']=codice_cab_domiciliaria\n        first_record[\'codice_azienda\']=codice_assegnato_dalla_sia_alla_azienda_emittente\n        first_record[\'codice_cliente_debitore\']=codice_cliente_debitore\n        first_record[\'codice_divisa\']=codice_divisa\n        first_record[\'causale\']="30000"\n        first_record[\'segno\']="-"\n        first_record[\'tipo_codice\']="4"\n           \n        \n        \n        second_record[\'numero_progressivo\']=str(numero_progressivo).zfill(7)\n        second_record[\'1_segmento\']="Microcarp"\n        second_record[\'2_segmento\']="Strada statale 416"\n        second_record[\'3_segmento\']="26020 Castelleone (CR)"\n        second_record[\'4_segmento\']="Italia"\n        \n        dati_cliente = db(db.clienti.id == cliente_id).select().first()\n        \n        third_record[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\n        third_record[\'codice_fiscale_cliente\'] = dati_cliente.codice_fiscale\n        third_record[\'1_segmento\'] = dati_cliente.nome[:27]\n        third_record[\'2_segmento\'] = ""\n        \n        fourth_record[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\n        fourth_record[\'indirizzo\'] = dati_cliente.indirizzo\n        fourth_record[\'cap\'] = dati_cliente.cap\n        fourth_record[\'comune_e_sigla_provincia\'] = dati_cliente.provincia\n        fourth_record[\'completamento_indirizzo\'] = ""\n        fourth_record[\'codice_paese\'] = "IT"\n        \n        riferimento_fattura =(riferimento_fattura[:30] + \'..\') if len(riferimento_fattura) > 30 else riferimento_fattura\n        \n        fifth_record[\'numero_progressivo\'] =str(numero_progressivo).zfill(7)\n        fifth_record[\'1_segmento\'] = "R.F. " + riferimento_fattura\n        fifth_record[\'2_segmento\'] = "IMPORTO  " + importo_della_ricevuta_in_centesimi\n        fifth_record[\'codifica_fiscale_creditore\'] = str(dati_cliente.partita_iva)\n        \n        \n        \n        \n        \n        fifty_one[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\n        fifty_one[\'numero_ricevuta\'] = str(numero_disposizione).zfill(10)\n        fifty_one[\'denominazione_creditore\'] = "MICROCARP S.R.L."\n        \n        seventieth_record[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\n        \n        numero_disposizione +=1\n        \n        """ ALLA FINE DI TUTTI I RECORDS """\n        \n        disposizione.records.append(first_record)\n        disposizione.records.append(second_record)\n        disposizione.records.append(third_record)\n        disposizione.records.append(fourth_record)\n        disposizione.records.append(fifth_record)\n        disposizione.records.append(fifty_one)\n        disposizione.records.append(seventieth_record)\n        \n        \n        flow.disposals.append(disposizione)\n        disposizione = None\n    \n    \n    #print "TOTALISSIMO {0}".format(totalissimo)\n    #totalissimo = \'%.2f\' % totalissimo\n    #totalissimo = str(totalissimo)[:]\n    totalissimo = str(truncate_float(totalissimo,2))\n    #print "TOTALISSIMO {0}".format(totalissimo)\n    totalissimo = totalissimo.replace(".","").zfill(15)\n    \n    flow.footer[\'tot_importi_negativi\']=totalissimo\n    flow.footer[\'tot_importi_positivi\']="".zfill(15)\n    \n    numero_record = str((len(numero_emissioni) * 7)+2).zfill(7)\n    flow.footer[\'numero_record\']=numero_record\n    \n    filename = os.getcwd()+"/applications/gestionale/static/"+"riba.txt"\n    try:\n        os.remove(filename)\n    except:\n        pass\n    flow.writefile(filename)\n    \n    #print "LUNGHEZZA DISPOSIZIONE : ",len(flow.disposals)\n    \n    db.numero_disposizioni_riba.insert(numero=str(numero_disposizione))\n\ndef genera_riba():\n    \n    crea_file_riba()\n    \n    \n    nomefile = "riba.txt"\n    filename = os.getcwd()+"/applications/gestionale/static/"+"riba.txt"\n    import cStringIO \n    #import contenttype as c\n    s=cStringIO.StringIO()\n    \n    with open(filename,"r") as file:\n        \n        s.write(file.read())\n        response.headers[\'Content-Type\'] =gluon.contenttype.contenttype(filename)\n        response.headers[\'Content-Disposition\'] = "attachment; filename=%s" % nomefile  \n        return s.getvalue() \n    \n    \n\ndef emissione_riba_3():\n    \n    banca_scelta = db(db.temp_banca).select().first().banca\n    try:\n        numero_disposizione = db(db.numero_disposizioni_riba).select().first().numero\n    except:\n        numero_disposizione = 1\n    \n    lista_riba = crea_indici_riba()\n    \n    html ="""<table id="resoconto" class="table table-bordered">"""\n    \n    html += """<thead>"""\n    html += """<tr>"""\n    \n    html += """<th>"""\n    html += "Cliente" \n    \n    html += """</th>"""\n    \n    html += """<th>"""\n    html += "Dettaglio" \n    html += """</th>"""\n    \n    html += """<th>"""\n    html += "Totale" \n    html += """</th>"""\n    \n    html += """</tr>"""\n    \n    html += """</thead>"""\n    \n    \n    html += """<tbody>"""\n    \n    totale_distinta=0\n    errore = False\n    for item in lista_riba:\n        html += """<tr>"""\n        html += """<td>"""+ritorna_nome_cliente_da_id(item[0]) + """</td>"""\n        html += """<td>"""\n        \n        banca_cliente = db(db.clienti.id==item[0]).select().first().codice_banca\n        dati_banca_cliente = db(db.anagrafica_banche.descrizione == banca_cliente).select().first()\n        \n        if dati_banca_cliente is not None:\n            abi = dati_banca_cliente.codice_abi\n            cab = dati_banca_cliente.codice_cab\n            \n            if abi is None or len(abi) !=5:\n                response.flash="La banca {0} collegata al cliente {1} non ha il codice ABI corretto".format(dati_banca_cliente.descrizione,ritorna_nome_cliente_da_id(item[0]))\n                errore = True\n            \n            if cab is None or len(cab) !=5:\n                response.flash="La banca {0} collegata al cliente {1} non ha il codice CAB corretto".format(dati_banca_cliente.descrizione,ritorna_nome_cliente_da_id(item[0]))\n                errore = True\n        else:\n        \n             response.flash="La banca {0} collegata al cliente {1} non \xc3\xa8 presente in anagrafica".format(banca_cliente,ritorna_nome_cliente_da_id(item[0]))\n             errore = True\n        \n        \n        totale = 0\n        for fatture in item[1]:\n          html += ritorna_dettaglio_fattura(fatture) +"<br>"\n          totale += float(db(db.fatture_salvate.id ==fatture).select().first().totale)\n          \n        html += """</td>"""\n        html += """<td>"""\n        html += ritorna_prezzo_europeo(totale)\n        html += """</td>"""\n        \n        totale_distinta += totale\n        html += """</tr>"""\n     \n        ###print "Cliente = ",ritorna_nome_cliente_da_id(item[0]) , "Fatture = ",item[1]\n    html += """</tbody>"""    \n    html +="""</table>"""\n    html=XML(html)\n    \n    indietro = avanti =""\n    if not errore:\n        indietro = A(BUTTON("Indietro"),_href=URL(\'emissione_riba_2\'))\n        avanti = A(BUTTON("Crea e scarica file Riba"),_href=URL(\'genera_riba\'))\n    \n    totale_distinta = ritorna_prezzo_europeo(totale_distinta)\n    \n    return locals()\n\n\ndef return_radio_button(id):\n    \n    return XML("<input type=\'checkbox\' id =\'check"+str(id)+"\' onclick=\'accorpa("+str(id)+");\'></input>")\n    pass\n\ndef emissione_riba_2():\n    \n    db.fatture_scelte.a = Field.Virtual(\'accorpa\',lambda row: return_radio_button(row.fatture_scelte.id))\n    #db.fatture_scelte.a = Field.Virtual(\'radio\',\'boolean\')\n    \n    fields=[db.fatture_scelte.numero_fattura,db.fatture_scelte.totale,db.fatture_scelte.cliente,db.fatture_scelte.scadenza,db.fatture_scelte.a]\n   \n    #db.fatture_scelte.id.readable=False;\n    riba_form =  SQLFORM.grid(db.fatture_scelte.user_id == auth.user_id,formname=\'riba_form\',maxtextlength=100,create=False,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False, fields=fields)\n    \n    button = A(BUTTON("Successivo"),_href=URL(\'emissione_riba_3\'))\n    \n    return locals()\n\ndef emissione_riba():\n    \n    db(db.fatture_scelte.user_id == auth.user_id).delete()\n    \n    banca_azienda = Set()\n    \n    b = db(db.anagrafica_banche_azienda).select()\n    for e in b:\n        banca_azienda.add(e.descrizione)\n        \n    \n    return locals()\n    \n\ndef ritorna_tipo_pagamento_da_fattura(fattura_id):\n     row = db(db.fatture_salvate.id == fattura_id).select().first()\n     scadenza = row.scadenza\n     ids = eval(row.id_ddt)    \n     for ddt in ids:\n        \n        try:\n            id_ordine = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt).select().first().id_ordine\n            pagamento = db(db.ordine_cliente.id == id_ordine).select().first().pagamento\n        except:\n            #print "ERRORE FATTURA ID ",fattura_id\n            pagamento = scadenza =""\n        return pagamento,scadenza\n        \n   \n\ndef anagrafica_clienti():\n    clienti_form = SQLFORM.grid(db.clienti,formname=\'clienti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\n    clienti_form.element(\'.web2py_counter\', replace=None)\n    try:\n        clienti_form.element(\'select[name=codice_banca]\')[\'_style\'] = \'width:350px;height:25px;\'\n        clienti_form.element(\'input[name=luogo_consegna_1]\')[\'_style\'] = \'width:350px;height:25px;\'\n        clienti_form.element(\'input[name=luogo_consegna_2]\')[\'_style\'] = \'width:350px;height:25px;\'\n        clienti_form.element(\'input[name=luogo_consegna_3]\')[\'_style\'] = \'width:350px;height:25px;\'\n        clienti_form.element(\'input[name=luogo_consegna_4]\')[\'_style\'] = \'width:350px;height:25px;\'\n        clienti_form.element(\'input[name=luogo_consegna_5]\')[\'_style\'] = \'width:350px;height:25px;\'\n    except:\n        pass\n    \n    #articli_form = SQLFORM.grid(db.clienti,formname=\'articoli\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\n    \n    return dict(clienti_form = clienti_form)\n\ndef anagrafica_fornitori():\n    fornitori_form = SQLFORM.grid(db.fornitori,formname=\'fornitori\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=4, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\n    fornitori_form.element(\'.web2py_counter\', replace=None)\n\n    return dict(fornitori_form = fornitori_form)\n\n\ndef gestione_codici_causali():\n    form = SQLFORM.grid(db.codici_causali,formname=\'causali\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\')\n    form.element(\'.web2py_counter\', replace=None)\n    return dict(form = form)\n\ndef gestione_codici_pagamenti():\n    form = SQLFORM.grid(db.codici_pagamenti,formname=\'pagamenti\',maxtextlength=100,create=True, editable=True,    deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\')\n    form.element(\'.web2py_counter\', replace=None)\n    return dict(form = form)\n\n\n\n\ndef anagrafica_piano_dei_conti():\n    anagrafica_piano_dei_conti_form = SQLFORM.grid(db.anagrafica_piano_dei_conti,formname=\'anagrafica_piano_dei_conti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\')\n    #anagrafica_piano_dei_conti_form.element(\'.web2py_counter\', replace=None)\n\n    return dict(anagrafica_piano_dei_conti_form = anagrafica_piano_dei_conti_form)\n\ndef index():\n    response.flash = T("Home page")\n    return dict(message=T(\'\'))\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef return_listini(nome_cliente,tipo):\n    \n    \n     nomi_listini = db(db.anagrafica_listini.nome_cliente == nome_cliente,db.anagrafica_listini.tipologia_listino == tipo).select()\n     return nomi_listini.as_json()\n    \n    \n\n@service.jsonrpc\n@service.jsonrpc2\ndef return_pagamenti(*args):\n    \n    nome = args[0]\n    if "cliente" in args[1]:\n    ##print "Nome cliente ",nome_cliente\n    \tnomi_listini = db(db.clienti.nome == nome).select().first()["pagamento"]\n    else:\n    \tnomi_listini = db(db.fornitori.nome == nome).select().first()["pagamento"]\n    return nomi_listini\n\n@service.jsonrpc\n@service.jsonrpc2\ndef aggiorna_quantita(id_riga_ordine,codice_articolo,quantita_prodotta):\n    """\n    questa quantit\xc3\xa0 prodotta viene messa in relazione alla riga d\'ordine.\n    la quantit\xc3\xa0 prodotta viene sommata a quella in magazzino\n    Nell\'anagrafica articoli viene visualizzata anche la quantit\xc3\xa0 riservata\n    \n    Quando si emette un ddt ricordarsi di cancellare dalla tabella riserva_quantita le righe d\'ordine associate.\n    \n    """\n    \n    \n    record_giacenza_articolo_attuale = db(db.anagrafica_articoli.codice_articolo == str(codice_articolo)).select().first()\n    giacenza = int(record_giacenza_articolo_attuale.giacenza) + int (quantita_prodotta)\n    record_giacenza_articolo_attuale.update_record(giacenza = str(giacenza))\n    \n    db.riserva_quantita.insert(codice_articolo=codice_articolo,quantita=quantita_prodotta,id_riga_ordine=id_riga_ordine,user_id=auth.user_id)\n    \n    \n    \n    \n    \n    return "ok"\n\n@service.jsonrpc\n@service.jsonrpc2\ndef riserva_giacenza(id_riga_ordine,da_riservare):\n    \n        #print id_riga_ordine,da_riservare\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n        codice_articolo = data.codice_articolo\n        id_ordine_cliente = data.id_ordine_cliente\n       \n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\n        \n        \n        #print data_articolo.giacenza,da_riservare\n        #data_articolo.update_record(giacenza = str(giacenza))\n        \n             \n        db.riserva_quantita.insert(codice_articolo=codice_articolo,quantita=da_riservare,id_riga_ordine=id_riga_ordine,user_id=auth.user_id)\n    \n        return "ok"   \n    \n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef disdire_giacenza(id_riga_ordine,da_riservare):\n    \n        #print id_riga_ordine,da_riservare\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n        codice_articolo = data.codice_articolo\n        id_ordine_cliente = data.id_ordine_cliente\n       \n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\n        \n        \n        if int(ritorna_totale_prenotazione_da_codice_articolo(codice_articolo)) - int(da_riservare) <0:\n            return 1/0\n        \n        da_riservare = int(da_riservare) *-1\n        \n      \n                \n             \n        db.riserva_quantita.insert(codice_articolo=codice_articolo,quantita=da_riservare,id_riga_ordine=id_riga_ordine,user_id=auth.user_id)\n    \n        return "ok"  \n   \n@service.jsonrpc\n@service.jsonrpc2\ndef aggiorna_giacenza(id_riga_ordine,da_riservare):\n    \n        #print id_riga_ordine,da_riservare\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n        codice_articolo = data.codice_articolo\n        id_ordine_cliente = data.id_ordine_cliente\n       \n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\n        \n        \n        try:\n            giacenza = int(da_riservare)\n            \n            if giacenza < 0:\n                return 1/0\n            \n            data_articolo.update_record(giacenza=str(giacenza))\n            \n        except:\n            return 1/0\n            \n            \n        return "ok"\n\ndef return_dettagli_articolo_da_riga_ordine():\n    \n    errore = False\n    riga_evasa = False\n    try:\n        \n        id_riga_ordine =request.vars[\'id_riga_ordine\']\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n        codice_articolo = data.codice_articolo\n        id_ordine_cliente = data.id_ordine_cliente\n        quantita_ordine = data.quantita\n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\n        \n        \n        ubicazione = data_articolo.ubicazione\n        if ubicazione is None:\n            ubicazione = "Nessuna"\n          \n        data_ordine = db(db.ordine_cliente.id ==id_ordine_cliente).select().first()\n        codice_ordine = data_ordine.ultimo_codice_ordine\n        \n        nome_cliente = data_ordine.nome_cliente\n        \n        riferimento_ordine = data_ordine.riferimento_ordine_cliente\n       \n        data_inserimento = data_ordine.data_inserimento\n        \n        \n        descrizione = data_articolo.descrizione\n        giacenza = data_articolo.giacenza\n        quantita_saldo = ritorna_quantita_saldo(id_riga_ordine)\n        \n        prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(codice_articolo,id_riga_ordine)\n        \n        #print "PRENOTATO = ",prenotato\n        \n        #print "GIACENZA = ",giacenza\n        \n      \n        \n        giacenza_non_riservata = int(giacenza) - int(prenotato)\n        \n        \n        #print "NON RISERVATA = ",giacenza_non_riservata\n          \n        produzione_da_riservare_per_completare_la_produzione = int(quantita_saldo) - int(prenotato)\n        \n        if produzione_da_riservare_per_completare_la_produzione < 1:\n            produzione_da_riservare_per_completare_la_produzione = "PRODUZIONE COMPLETATA\\n" + "SURPLUS DI " +str(abs(produzione_da_riservare_per_completare_la_produzione)) + " ARTICOLI"\n        """\n        """       \n        \n        if int(quantita_saldo) <1:\n            quantita_saldo = "Quantit\xc3\xa0 richiesta raggiunta"\n        \n        \n        if riga_completata(id_riga_ordine):\n           riga_evasa = True\n           ddts = return_ddts_for_row_id(id_riga_ordine)\n        \n        \n    except Exception, e:\n        #print e\n        errore = True\n        id_riga_ordine=""\n        codice_articolo = ""\n        descrizione =""\n        giacenza = ""\n        cliente = ""\n        codice_ordine = ""\n        quantita_ordine =""\n        prenotato =""\n        giacenza_non_riservata =""\n        produzione_da_riservare_per_completare_la_produzione=""\n        riferimento_ordine=""\n        data_inserimento=""\n        quantita_saldo=""\n        giacenza_non_riservata=""\n        produzione_da_riservare_per_completare_la_produzione=""\n        ubicazione=""\n        return locals()\n    return locals()\n\ndef return_dettagli_articolo_da_riga_ordine_per_cartellini():\n    \n    errore = False\n    riga_evasa = False\n    try:\n        \n        id_riga_ordine =request.vars[\'id_riga_ordine\']\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\n        codice_articolo = data.codice_articolo\n        id_ordine_cliente = data.id_ordine_cliente\n        quantita_ordine = data.quantita\n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\n        \n        \n        ubicazione = data_articolo.ubicazione\n        if ubicazione is None:\n            ubicazione = "Nessuna"\n          \n        data_ordine = db(db.ordine_cliente.id ==id_ordine_cliente).select().first()\n        codice_ordine = data_ordine.ultimo_codice_ordine\n        \n        nome_cliente = data_ordine.nome_cliente\n        \n        riferimento_ordine = data_ordine.riferimento_ordine_cliente\n       \n        data_inserimento = data_ordine.data_inserimento\n        \n        \n        descrizione = data_articolo.descrizione\n        giacenza = data_articolo.giacenza\n        quantita_saldo = ritorna_quantita_saldo(id_riga_ordine)\n        \n        prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(codice_articolo,id_riga_ordine)\n        \n        #print "PRENOTATO = ",prenotato\n        \n        #print "GIACENZA = ",giacenza\n        \n      \n        \n        giacenza_non_riservata = int(giacenza) - int(prenotato)\n        \n        \n        #print "NON RISERVATA = ",giacenza_non_riservata\n          \n        produzione_da_riservare_per_completare_la_produzione = int(quantita_saldo) - int(prenotato)\n        \n        if produzione_da_riservare_per_completare_la_produzione < 1:\n            produzione_da_riservare_per_completare_la_produzione = "PRODUZIONE COMPLETATA\\n" + "SURPLUS DI " +str(abs(produzione_da_riservare_per_completare_la_produzione)) + " ARTICOLI"\n        """\n        """       \n        \n        if int(quantita_saldo) <1:\n            quantita_saldo = "Quantit\xc3\xa0 richiesta raggiunta"\n        \n        \n        if riga_completata(id_riga_ordine):\n           riga_evasa = True\n           ddts = return_ddts_for_row_id(id_riga_ordine)\n        \n        \n        quantita_prodotta = return_quantity_for_row_id(id_riga_ordine)\n    except Exception, e:\n        #print e\n        errore = True\n        id_riga_ordine=""\n        codice_articolo = ""\n        descrizione =""\n        giacenza = ""\n        cliente = ""\n        codice_ordine = ""\n        quantita_ordine =""\n        prenotato =""\n        giacenza_non_riservata =""\n        produzione_da_riservare_per_completare_la_produzione=""\n        riferimento_ordine=""\n        data_inserimento=""\n        quantita_saldo=""\n        giacenza_non_riservata=""\n        produzione_da_riservare_per_completare_la_produzione=""\n        ubicazione=""\n        return locals()\n    return locals()\n            \n#return_dettagli_articolo_da_riga_ordine\n\ndef stampa_cartellini_1():\n    articoli_form = SQLFORM.grid(db.anagrafica_articoli,formname=\'articoli1\',maxtextlength=100,create=True,        \tdeletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True)\n    return locals()\n\ndef aggiorna_giacenze():\n     \n    articoli_form = SQLFORM.grid(db.anagrafica_articoli,formname=\'articoli1\',maxtextlength=100,create=True,        deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True)\n    return locals()\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef return_description(cod):\n\trows = db(db.anagrafica_articoli.codice_articolo==cod).select().first()\n\treturn rows.descrizione\n\t\n\n@service.jsonrpc\n@service.jsonrpc2\ndef return_price(articolo,numero,listino,cliente):\n       \n   \n    prezzo_corrente = 0\n    start = 0\n    end = 0\n    \n    h = HTMLParser()\n    cliente = h.unescape(cliente)\n    \n    rows = db(db.articolo_in_listino.nome_cliente == cliente,db.articolo_in_listino == listino).select()\n\n   \n   \n    for row in rows:\n        if row[\'listino\'] == listino:\n            if row[\'codice_articolo\'] == articolo:\n                #print "OK"\n                end = int(row[\'numero_pezzi\'])\n                if (int(numero) > start) and (int(numero) <= end):\n                    prezzo_corrente = float(row[\'prezzo\'])\n                start = end\n                    \n    #print prezzo_corrente\n    if prezzo_corrente == 0:\n        prezzo_corrente=""                \n    return prezzo_corrente\n    \n\n@service.jsonrpc\n@service.jsonrpc2\ndef return_price_fornitori(articolo,numero,listino,cliente):\n       \n   \n    prezzo_corrente = 0\n    start = 0\n    end = 0\n    \n    #print "-----------------------------------"\n    h = HTMLParser()\n    cliente = h.unescape(cliente)\n    rows = db(db.articolo_in_listino_fornitori.nome_fornitore == cliente).select()\n\n   \n    \n    for row in rows:\n        #print "{0} {1} {2} {3}".format(row[\'nome_fornitore\'],len(row[\'nome_fornitore\']),cliente,len(cliente))\n        \n        if row[\'listino\'] == listino:\n            if row[\'codice_articolo\'] == articolo:\n                #print "OK"\n                end = int(row[\'numero_pezzi\'])\n                #print "Numero pezzi : ",end\n                if (int(numero) > start) and (int(numero) <= end):\n                    #print "prezzo corrente : ",float(row[\'prezzo\'])\n                    prezzo_corrente = float(row[\'prezzo\'])\n                start = end\n                    \n    #print prezzo_corrente\n    if prezzo_corrente == 0:\n        prezzo_corrente=""                \n    return prezzo_corrente\n\n@service.jsonrpc\n@service.jsonrpc2\ndef search_piano_dei_conti(args):\n    return_data = []\n    gruppo = args[:-5]\n    conto = args[2:4]\n    sottoconto = args[4:]\n    \n    gruppo_to_search=gruppo + "00000"\n    conto_to_search=gruppo+conto+"000"\n    sottoconto_to_search = gruppo + conto + sottoconto\n   \n    descrizione_gruppo = ""\n    descrizione_conto = ""\n    descrizione_sottoconto = ""\n    \n    #print gruppo_to_search,conto_to_search,sottoconto_to_search\n        \n    try:\n        descrizione_gruppo = db(db.anagrafica_piano_dei_conti.codice_piano_dei_conti == gruppo_to_search).select().first()["descrizione_codice"]\n    except:\n       pass\n    \n    \n    if not conto_to_search == gruppo_to_search:\n        try:\n            descrizione_conto = db(db.anagrafica_piano_dei_conti.codice_piano_dei_conti == conto_to_search).select().first()["descrizione_codice"]\n        except:\n            pass\n        \n    if not sottoconto_to_search == gruppo_to_search and not sottoconto_to_search == conto_to_search:\n        try:\n            descrizione_sottoconto = db(db.anagrafica_piano_dei_conti.codice_piano_dei_conti == sottoconto_to_search).select().first()["descrizione_codice"]\n        except:\n            pass\n    \n    if len(descrizione_gruppo)<1:\n        gruppo_to_search=""\n        \n    if len(descrizione_conto)<1:\n        conto_to_search=""\n    \n    if len(descrizione_sottoconto)<1:\n        sottoconto_to_search=""\n        \n    \n    return_data.append(gruppo_to_search)\n    return_data.append(descrizione_gruppo)\n    \n    return_data.append(conto_to_search)\n    return_data.append(descrizione_conto)\n    \n    return_data.append(sottoconto_to_search)\n    return_data.append(descrizione_sottoconto)\n    \n    #print return_data\n    return return_data\n\ndef ritorna_nome_cliente_da_riga_ordine(id_ordine):\n\t#id_ordine_cliente=db(db.righe_in_ordine_cliente.id==id_riga_ordine).select().first()["id_ordine_cliente"]\n\ttry:\n        \tnome=db(db.ordine_cliente.id==id_ordine).select().first()["nome_cliente"]\n        except:\n            nome=""\n\treturn nome\n\ndef ritorna_nome_fornitore_da_riga_ordine(id_ordine):\n    \t#id_ordine_cliente=db(db.righe_in_ordine_cliente.id==id_riga_ordine).select().first()["id_ordine_cliente"]\n\ttry:\n        \tnome=db(db.ordine_fornitore.id==id_ordine).select().first()["nome_fornitore"]\n        except:\n            nome=""\n\treturn nome\t\n\t\ndef ritorna_ddt_da_id(ddt_id):\n    try:\n        ddt=db(db.saved_ddt.saved_ddt_id==ddt_id).select().first()["numero_ddt"]\n    except:\n        ddt=""\n    \n    return ddt\n\ndef ritorna_ddt_da_id_fornitori(ddt_id):\n    try:\n        ddt=db(db.saved_ddt_fornitori.saved_ddt_id==ddt_id).select().first()["numero_ddt"]\n    except:\n        ddt=""\n    \n    return ddt\n\ndef storico_articoli_prodotti():\n    #db.saved_righe_in_ddt_cliente.nome_cliente=Field.Virtual("Cliente", lambda row: ritorna_nome_cliente_da_riga_ordine(row.saved_righe_in_ddt_cliente.id_ordine))\n    \n    db(db.storico_articoli_prodotti).delete()\n    rows=db(db.saved_righe_in_ddt_cliente).select()\n    for row in rows:\n        ddt=ddt=ritorna_ddt_da_id(row.saved_ddt_id)\n        if len(ddt)>0:\n            db.storico_articoli_prodotti.insert(cliente=ritorna_nome_cliente_da_riga_ordine(row.id_ordine),codice_ordine=row.codice_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,descrizione=row.descrizione,riferimento_ordine=row.riferimento_ordine,quantita=row.quantita,prezzo=row.prezzo,codice_iva=row.codice_iva,evasione=row.evasione,ddt=ddt)\n    db.storico_articoli_prodotti.id.readable=False\n    articoli=SQLFORM.grid(db.storico_articoli_prodotti,formname=\'articoli\',maxtextlength=100,create=False,        deletable=False,editable=False,searchable=True,sortable=True,paginate=7, formstyle = \'table3cols\',csv=False,user_signature=True)\n    \n    return locals()\n\ndef storico_articoli_prodotti_fornitore():\n    #db.saved_righe_in_ddt_cliente.nome_cliente=Field.Virtual("Cliente", lambda row: ritorna_nome_cliente_da_riga_ordine(row.saved_righe_in_ddt_cliente.id_ordine))\n    \n    db(db.storico_articoli_prodotti_fornitore).delete()\n    rows=db(db.saved_righe_in_ddt_fornitore).select()\n    for row in rows:\n        ddt=ddt=ritorna_ddt_da_id_fornitori(row.saved_ddt_id)\n        if len(ddt)>0:\n            db.storico_articoli_prodotti_fornitore.insert(fornitore=ritorna_nome_fornitore_da_riga_ordine(row.id_ordine),codice_ordine=row.codice_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,descrizione=row.descrizione,riferimento_ordine=row.riferimento_ordine,quantita=row.quantita,prezzo=row.prezzo,codice_iva=row.codice_iva,evasione=row.evasione,ddt=ddt)\n    db.storico_articoli_prodotti_fornitore.id.readable=False\n    articoli=SQLFORM.grid(db.storico_articoli_prodotti_fornitore,formname=\'articoli\',maxtextlength=100,create=False,        deletable=False,editable=False,searchable=True,sortable=True,paginate=7, formstyle = \'table3cols\',csv=False,user_signature=True)\n    \n    return locals()\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef stampa_etichetta(*args):\n    cliente = args[0]\n    codice_articolo = args[1]\n    descrizione = args[2]\n    quantita= args[3]\n    lotto = args[4]\n    numero_etichette = args[5]\n    ordine = args[6]\n    contenitore = args[7]\n\n    #print quantita\n    #print contenitore\n    \n    etichette_totali,ultima_capienza_contenitore = divmod(int(quantita),int(contenitore))\n    \n    \n    if ultima_capienza_contenitore == 0:\n        ultima_capienza_contenitore = contenitore\n        etichette_da_scrivere = etichette_totali\n        if etichette_totali == 1:\n                #print "qui"\n\t\tetichette_totali ==0\n    else:\n       etichette_da_scrivere = etichette_totali +1\n \n    \n    \n\n    if True:\n        """\n        if cliente == "new_global":\n    \t\tprn_file = request.folder + \'prn_labels/new_global.prn\'\n        \tcodice_articolo = codice_articolo[1:]\n                destinazione = args[8]\n                ordine +=destinazione\n\t\n\tif cliente == "siat":\n    \t\tprn_file = request.folder + \'prn_labels/siat.prn\'\n    \t\t\n    \t\n    \tif cliente == "mc":\n    \t\tprn_file = request.folder + \'prn_labels/mc.prn\'\n        \t\n        \n\n        if cliente == "new_global_romania":\n    \t\tprn_file = request.folder + \'prn_labels/new_global_romania.prn\'\n        \tcodice_articolo = codice_articolo[1:]\n                destinazione = args[8]\n                ordine +="  "+destinazione\t\n\n        if "cimbali" in cliente:\n    \t\tprn_file = request.folder + \'prn_labels/cimbali.prn\'\n        \t\n                destinazione = args[8]\n                ordine +=destinazione\t        \n\n        if "rhea" in cliente:\n    \t\tprn_file = request.folder + \'prn_labels/rhea.prn\'\n                if codice_articolo[len(codice_articolo)-1].isdigit():\n\t\t\t\n                \tcodice_articolo = "Z"+codice_articolo[:-2]\n\t\telse:\n\t\t\tcodice_articolo = "Z" + codice_articolo[:-4] + codice_articolo[len(codice_articolo)-2:] \n\n                destinazione = args[8]\n                ordine +=destinazione\t\n\t"""\n\t\n\tprn_file = request.folder + \'prn_labels/mc.prn\'\n        for x in range(etichette_totali):\n   \t    \n    \t    _content = []\n            #print "IN FOR"\n    \n    \t    with open(prn_file, \'r\') as content_file:\n    \t\t    content = content_file.read()\n    \t    \n    \t\t    content = content.replace("[*1*]", codice_articolo)\n    \t\t    content = content.replace("[*2*]", descrizione)\n    \t\t    content = content.replace("[*3*]", quantita)\n    \t\t    content = content.replace("[*5*]", ordine)\n    \t\t    content = content.replace("[*6*]", contenitore)\n    \t\t    content = content.replace("[*10*]", str(x + 1))\n    \t\t    content = content.replace("[*11*]", str(etichette_da_scrivere))\n    \t\t    content = content.replace("[*12*]", cliente)\n    \t\t\n            with open("/tmp/to#print.prn", \'w\') as content_file:\n                   content_file.write(content)\n    \t\t\t \n            print_label(numero_etichette)\n        \n            with open(prn_file, \'r\') as content_file:\n    \n                content = content_file.read()\n    \t  \n        if etichette_totali ==1:\n             with open(prn_file, \'r\') as content_file:\n    \t\t    content = content_file.read()\n\n    \tcontent = content.replace("[*1*]", codice_articolo)\n    \tcontent = content.replace("[*2*]", descrizione)\n    \tcontent = content.replace("[*3*]", quantita)\n    \tcontent = content.replace("[*5*]", ordine)\n    \tcontent = content.replace("[*6*]", str(ultima_capienza_contenitore))\n    \tcontent = content.replace("[*10*]", str(etichette_da_scrivere))\n    \tcontent = content.replace("[*11*]", str(etichette_da_scrivere))\n    \tcontent = content.replace("[*12*]", cliente)   \n    \t    \n    \twith open("/tmp/to#print.prn", \'w\') as content_file:\n    \t\tcontent_file.write(content)\n        print etichette_totali,ultima_capienza_contenitore\n    \tif etichette_totali >0 and not ultima_capienza_contenitore == contenitore:\t \n    \t\tprint_label(numero_etichette)\n\ndef print_label(numero_etichette):\n    \n        ip="192.168.0.208"\n        port = "9100"\n        prn_file = "/tmp/to#print.prn"\n        \n        try:\n           numero = int(numero_etichette)\n        except:\n           numero = 1\n        \n        for x in range(numero):\n        \t#command = "ncat --send-only "+ip+" "+port+" < "+prn_file\n        \tcommand = "nc "+ip+" "+port+" < "+prn_file\n        \t#print command\n        \tp = subprocess.Popen(command, shell=True)\n        \tp.wait()\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_xml(args):\n\n    data={}\n    fattura=None\n    fattura=FatturaXml()\n    articoli=set([])\n\n    partitaIvaCarpal="00905170197"\n    codiceFiscaleCarpal="01785290162"\n    denominazioneCarpal="MICROCARP S.R.L."\n    indirizzoCarpal="Strada Statale 415"\n    capCarpal="26012"\n    provinciaCarpal="CR"\n    paeseCarpal="Castelleone"\n\n    #Progressivo Invio\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    numeroDocumento=str(numero)\n\n    progressivoInvio=numero_fattura_da_salvare\n\n    \n\n    \n\n    \n    """\n    Dati cliente\n    """\n    id_cliente=args[\'0\']\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    iban_cliente = dati_cliente.codice_iban\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\n    annotazioni=dati_cliente.annotazioni\n    codiceDestinatario=dati_cliente.codiceDestinatario\n    pecDestinatario=dati_cliente.pec\n\n    if codiceDestinatario is None and pecDestinatario is None:\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\n        data[\'error\']=True\n        return json.dumps(data)\n\n    if pi_cliente is None:\n        data[\'msg\']="Inserire la partita iva per il cliente "+str(nome_cliente)\n        data[\'error\']=True\n        return json.dumps(data)\n\n   \n    \n    fattura.addDatiTrasmissione("IT",codiceFiscaleCarpal,progressivoInvio,codiceDestinatario,pecDestinatario)\n    fattura.addCedentePrestatore("IT",partitaIvaCarpal,denominazioneCarpal)\n    fattura.addSedeCedentePrestatore(indirizzoCarpal,capCarpal,paeseCarpal,provinciaCarpal,"IT")\n\n    #Dati cliente\n    fattura.addCessionarioCommittente("IT",pi_cliente.replace("IT",""),nome_cliente)\n    fattura.addSedeCessionarioCommittente(indirizzo_cliente,cap_cliente,citta_cliente,provincia_cliente,"IT")\n\n    tipoDocumento=ritornaTipoDiPagamento(args[\'1\'])\n\n\n    #Calcolo data fattura\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    for r in ddts_id:\n        data_scelta = r.data_emissione\n        \n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\n        \n    day_start,day_end = monthrange(m.year, m.month)\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\n    \n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\n\n    #Creazione descrizione fattura\n    descrizione_fattura=""\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    for ddt_id in ddts_id:\n        descrizione_fattura += "Rif. DDT : " + ddt_id.numero_ddt + " del " + ddt_id.data_emissione+" "\n\n    fattura.addDatiGeneraliDocumento(tipoDocumento,fixDate(start_date.strftime("%d-%m-%Y")),numeroDocumento,descrizione_fattura)\n    \n    #Controllare se ci possono essere pi\xc3\xb9 rate di pagamento\n\n    """\n    if len(righeDataScadenza)>1:\n        pagamento="TP01"\n    else:\n        pagamento="TP02"\n    \n    """\n    #Per ora metto sempre solo 1 rata\n    pagamento="TP02"\n    fattura.addCondizioniPagamento(pagamento)\n\n    articoli=[]\n    for ddt_id in ddts_id:\n      rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id.ddt_id).select()\n      for row in rows:\n        if not "commento" in row.codice_articolo:\n                articolo=[]\n                id_ordine = row.id_ordine\n                try:\n                      \n                      try:\n                          pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\n                     \n                      except:\n                          pagamento = None\n                                                                \n                      if pagamento is None:\n                            pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                       \n                      if "F.M." in pagamento:\n                          fine_mese = True\n                      else:\n                          fine_mese = False\n\n                      if not fine_mese:\n                              \n                          try:\n                              giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                              \n                              if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                          \n                              scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                              scadenza_salvata = scadenza\n                              scadenza = scadenza.strftime("%d/%m/%Y")\n                          except:\n                               response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                               return locals()\n                              \n                      else:\n                          \n                           if ("M.S." or "ms") in pagamento:\n                               \n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                               \n                               giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                               scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                               scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                               scadenza = scadenza.strftime("%d/%m/%Y") \n                               \n                           else:\n                               #Fine mese senza M.S.               \n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\n                               \t   if int(giorni_da_aggiungere)==60:\n                               \t   \tgiorni_da_aggiungere="56"\n                               \t   if int(giorni_da_aggiungere)==90:\n                               \t   \tgiorni_da_aggiungere="86"\n                               \t   \t\n                               \t   if int(giorni_da_aggiungere)==120:\n                               \t   \tgiorni_da_aggiungere="116"\n                               \n                               \n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n\n                      #fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),pagamento,str(scadenza))\n                      codice_articolo=row.codice_articolo\n                      descrizione=row.descrizione\n                      um=row.u_m\n                      qta=row.quantita\n                      codice_iva=row.codice_iva\n                      riferimento_ordine=row.riferimento_ordine\n                      prezzo=row.prezzo\n\n                      percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["percentuale_iva"]\n                      codice_iva_interno=db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["codice_iva"]\n                      bollo = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["bollo_su_importi_esenti"]\n\n                      #print codice_articolo,descrizione,um,qta,prezzo,riferimento_ordine,pagamento,scadenza\n                      articolo.append(codice_articolo)\n                      articolo.append(descrizione)\n                      articolo.append(codice_iva)\n                      articolo.append(percentuale_iva)\n                      articolo.append(bollo)\n                      articolo.append(um)\n                      articolo.append(qta)\n                      articolo.append(controllaPrezzo(prezzo))\n                      articolo.append(riferimento_ordine)\n                      articolo.append(pagamento)\n                      articolo.append(scadenza)\n                      articolo.append(ritornaCondizioniPagamento(pagamento))\n                      articolo.append(codice_iva_interno)\n\n                      add=True\n                      for a in articoli:\n                          #print a,articolo,a==articolo\n                          if a==articolo:\n                              add=False\n                              break\n\n                      if add:\n                          \n                          articoli.append(articolo)\n                     \n                      articolo=[]\n                except Exception,e:\n                     \n                       data[\'msg\']="Controllare tipo pagamento per  cliente "+str(nome_cliente)+str(e)\n                       data[\'error\']=True\n                       return json.dumps(data)\n    \n\n    def ritornaImponibile(qta,prezzo):\n        imponibile= float(qta)*float(prezzo)\n        print imponibile,float("%0.2f"%imponibile)\n        return float("%0.2f"%imponibile)\n\n\n    def ritornaTotaleArticoli(articoli):\n        totale=0.0\n        for articolo in articoli:\n            imponibile=ritornaImponibile(articolo[6],articolo[7])\n            percentualeIva=articolo[3]\n            totaleIvaInclusa=imponibile + (imponibile*percentualeIva)/100\n            totale+=totaleIvaInclusa\n\n        return str("{:.2f}".format(totale))\n    \n\n\n    #Dettagilio Pagamento\n    articolo=articoli[0]\n    dataToFix=articolo[10]\n    d=dataToFix.split("/")\n\n    if len(d[1])==1:\n        d[1]="0"+d[1]\n\n    if len(d[0])==1:\n        d[0]="0"+d[1]\n    \n    \n    d=d[2]+"-"+d[1]+"-"+d[0]\n    fattura.addDettaglioPagamento(articolo[11],d,ritornaTotaleArticoli(articoli))\n    print "Totale iva inclusa : ",ritornaTotaleArticoli(articoli)\n\n\n    #TotalerigheCodiciIva\n\n    db(db.anagrafica_codici_iva).select()\n\n    TotaleRigheCodiciIva={}\n\n\n\n    for articolo in articoli:\n        percentuale_iva=articolo[3]\n        codice_iva_interno=articolo[12]\n        \n        imponibile=ritornaImponibile(articolo[6],articolo[7])\n        if not TotaleRigheCodiciIva.has_key(codice_iva_interno):\n            TotaleRigheCodiciIva[codice_iva_interno] = imponibile\n\n        else:\n            TotaleRigheCodiciIva[codice_iva_interno] = TotaleRigheCodiciIva[codice_iva_interno] + imponibile\n\n\n           \n\n    for k in TotaleRigheCodiciIva:\n    \n       aliquota_iva = db(db.anagrafica_codici_iva.codice_iva == k).select().first()["percentuale_iva"]\n       imponibile=TotaleRigheCodiciIva[k]\n       \n       if k=="22":\n           aliquota_iva="22.00"\n           descrizione_imposta=""\n           imposta=(imponibile*22.0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n       if k=="10":\n           aliquota_iva="10.00"\n           descrizione_imposta=""\n           imposta=(imponibile*10.0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n\n\n\n       if k=="53":\n           aliquota_iva="0.00"\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\n           imposta=(imponibile*0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n\n\n\n    numero_linea=1\n    for articolo in articoli:\n        if "22" in articolo[12]:\n            aliquota="22.00"\n        elif "10" in articolo[12]:\n            aliquota="10.00"\n        else:\n            aliquota="0.00"\n   \n\n        descrizione=articolo[0]+" "+articolo[1]+" "+articolo[8] #riferimento ordine\n        qta=fixPrezzo(articolo[6])+".00"\n        prezzo=str(articolo[7])\n        codice_iva=str(articolo[12])\n        importo=str("{:.2f}".format(ritornaImponibile(qta,prezzo)))\n\n        \n\n        fattura.addLinea(str(numero_linea),descrizione,qta,prezzo,importo,aliquota,codice_iva)\n        numero_linea+=1\n    \n\n    nome_file=fattura.writeXml()\n    #cwd = os.getcwd()+"/applications/gestionale/uploads/fatture/"\n    #id_cliente=args[\'0\']\n    #tipo_fattura=args[\'1\']\n\n    #data[\'error\']=None\n    data[\'msg\']="Tutapost"\n    data[\'filename\']=nome_file\n\n    return json.dumps(data)\n\n\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_xml_istantanea(args):\n\n    data={}\n    fattura=None\n    fattura=FatturaXml()\n    articoli=set([])\n\n    partitaIvaCarpal="00905170197"\n    codiceFiscaleCarpal="01785290162"\n    denominazioneCarpal="MICROCARP S.R.L."\n    indirizzoCarpal="Strada Statale 415"\n    capCarpal="26012"\n    provinciaCarpal="CR"\n    paeseCarpal="Castelleone"\n\n    #Progressivo Invio\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    numeroDocumento=str(numero)\n\n    progressivoInvio=numero_fattura_da_salvare\n\n    \n\n    \n\n    \n    """\n    Dati cliente\n    """\n    id_cliente=args[\'0\']\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    iban_cliente = dati_cliente.codice_iban\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\n    annotazioni=dati_cliente.annotazioni\n    codiceDestinatario=dati_cliente.codiceDestinatario\n    pecDestinatario=dati_cliente.pec\n\n    if codiceDestinatario is None and pecDestinatario is None:\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\n        data[\'error\']=True\n        return json.dumps(data)\n\n    if pi_cliente is None:\n        data[\'msg\']="Inserire la partita iva per il cliente "+str(nome_cliente)\n        data[\'error\']=True\n        return json.dumps(data)\n\n   \n    \n    fattura.addDatiTrasmissione("IT",codiceFiscaleCarpal,progressivoInvio,codiceDestinatario,pecDestinatario)\n    fattura.addCedentePrestatore("IT",partitaIvaCarpal,denominazioneCarpal)\n    fattura.addSedeCedentePrestatore(indirizzoCarpal,capCarpal,paeseCarpal,provinciaCarpal,"IT")\n\n    #Dati cliente\n    fattura.addCessionarioCommittente("IT",pi_cliente.replace("IT",""),nome_cliente)\n    fattura.addSedeCessionarioCommittente(indirizzo_cliente,cap_cliente,citta_cliente,provincia_cliente,"IT")\n\n    tipoDocumento=ritornaTipoDiPagamento(args[\'1\'])\n\n\n    #Calcolo data fattura\n    """\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    for r in ddts_id:\n        data_scelta = r.data_emissione\n        \n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\n        \n    day_start,day_end = monthrange(m.year, m.month)\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\n    \n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\n    """\n    start_date = datetime.datetime.now()\n\n    #Creazione descrizione fattura\n    descrizione_fattura="Fattura Immediata"\n    fattura.addDatiGeneraliDocumento(tipoDocumento,fixDate(start_date.strftime("%d-%m-%Y")),numeroDocumento,descrizione_fattura)\n    \n    #Controllare se ci possono essere pi\xc3\xb9 rate di pagamento\n\n    """\n    if len(righeDataScadenza)>1:\n        pagamento="TP01"\n    else:\n        pagamento="TP02"\n    \n    """\n    #Per ora metto sempre solo 1 rata\n    pagamento="TP02"\n    fattura.addCondizioniPagamento(pagamento)\n\n    articoli=[]\n    articolo=[]\n\n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n    if True:\n        rows = db(db.righe_in_fattura_istantanea).select()\n        for row in rows:\n        \n            try:\n         \n                \n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                  print "Pagamento :",pagamento\n                        \n                  if "F.M." in pagamento:\n                      fine_mese = True\n                  else:\n                      fine_mese = False\n                      \n                   \n                  \n                    \n                  \n                  \n                  if not fine_mese:\n                       try:\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                          scadenza_salvata = scadenza\n                          scadenza = scadenza.strftime("%d/%m/%Y")\n                         \n                       except:\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                           return locals()\n                  else:\n                      \n                       if ("M.S." or "ms") in pagamento:\n                           \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                           scadenza = scadenza.strftime("%d/%m/%Y") \n                           \n                       else:\n                           #Fine mese senza M.S.               \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           print "Scadenza : ",scadenza\n                       \n                  print "qui prima articolo"\n                  print row\n                  codice_articolo=row.codice_articolo\n                  descrizione=row.descrizione\n                  um=row.u_m\n                  qta=row.qta\n                  codice_iva=row.codice_iva\n                  riferimento_ordine=row.riferimento_ordine\n                  prezzo=row.prezzo\n                  print "qui dopo articolo"\n                  \n                  percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["percentuale_iva"]\n                  codice_iva_interno=db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["codice_iva"]\n                  bollo = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["bollo_su_importi_esenti"]\n\n                  articolo.append(codice_articolo)\n                  articolo.append(descrizione)\n                  articolo.append(codice_iva)\n                  articolo.append(percentuale_iva)\n                  articolo.append(bollo)\n                  articolo.append(um)\n                  articolo.append(qta)\n                  articolo.append(controllaPrezzo(prezzo))\n                  articolo.append(riferimento_ordine)\n                  articolo.append(pagamento)\n                  articolo.append(scadenza)\n                  articolo.append(ritornaCondizioniPagamento(pagamento))\n                  articolo.append(codice_iva_interno)\n\n                  add=True\n                  for a in articoli:\n                          print a,articolo,a==articolo\n                          if a==articolo:\n                              add=False\n                              break\n\n                  if add:\n                      articoli.append(articolo)\n                      articolo=[]\n            except Exception,e:\n                     \n                       data[\'msg\']="Controllare tipo pagamento per  cliente "+str(nome_cliente)+str(e)\n                       data[\'error\']=True\n                       return json.dumps(data) \n                      \n                        \n    def ritornaImponibile(qta,prezzo):\n        imponibile= float(qta)*float(prezzo)\n        return float("%0.2f"%imponibile)\n\n\n    def ritornaTotaleArticoli(articoli):\n        totale=0.0\n        for articolo in articoli:\n            imponibile=ritornaImponibile(articolo[6],articolo[7])\n            percentualeIva=articolo[3]\n            totaleIvaInclusa=imponibile + (imponibile*percentualeIva)/100\n            totale+=totaleIvaInclusa\n\n        return str("{:.2f}".format(totale))\n    \n\n\n    #Dettagilio Pagamento\n    articolo=articoli[0]\n    dataToFix=articolo[10]\n    d=dataToFix.split("/")\n\n    if len(d[1])==1:\n        d[1]="0"+d[1]\n\n    if len(d[0])==1:\n        d[0]="0"+d[1]\n    \n    \n    d=d[2]+"-"+d[1]+"-"+d[0]\n    fattura.addDettaglioPagamento(articolo[11],d,ritornaTotaleArticoli(articoli))\n\n    print articolo[11],d,ritornaTotaleArticoli(articoli)\n    print "Totale iva inclusa : ",ritornaTotaleArticoli(articoli)\n\n\n    #TotalerigheCodiciIva\n\n    db(db.anagrafica_codici_iva).select()\n\n    TotaleRigheCodiciIva={}\n\n\n\n    for articolo in articoli:\n        percentuale_iva=articolo[3]\n        codice_iva_interno=articolo[12]\n        \n        imponibile=ritornaImponibile(articolo[6],articolo[7])\n        if not TotaleRigheCodiciIva.has_key(codice_iva_interno):\n            TotaleRigheCodiciIva[codice_iva_interno] = imponibile\n\n        else:\n            TotaleRigheCodiciIva[codice_iva_interno] = TotaleRigheCodiciIva[codice_iva_interno] + imponibile\n\n\n           \n\n    for k in TotaleRigheCodiciIva:\n    \n       aliquota_iva = db(db.anagrafica_codici_iva.codice_iva == k).select().first()["percentuale_iva"]\n       imponibile=TotaleRigheCodiciIva[k]\n       \n       if k=="22":\n           aliquota_iva="22.00"\n           descrizione_imposta=""\n           imposta=(imponibile*22.0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n       if k=="10":\n           aliquota_iva="10.00"\n           descrizione_imposta=""\n           imposta=(imponibile*10.0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n\n\n\n       if k=="53":\n           aliquota_iva="0.00"\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\n           imposta=(imponibile*0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n\n\n\n    numero_linea=1\n    for articolo in articoli:\n        if "22" in articolo[12]:\n            aliquota="22.00"\n        elif "10" in articolo[12]:\n            aliquota="10.00"\n        else:\n            aliquota="0.00"\n   \n\n        descrizione=articolo[0]+" "+articolo[1]+" "+articolo[8] #riferimento ordine\n        qta=fixPrezzo(articolo[6])+".00"\n        prezzo=str(articolo[7])\n        codice_iva=str(articolo[12])\n        importo=str("{:.2f}".format(ritornaImponibile(qta,prezzo)))\n\n        \n\n        fattura.addLinea(str(numero_linea),descrizione,qta,prezzo,importo,aliquota,codice_iva)\n        numero_linea+=1\n    \n\n    nome_file=fattura.writeXml()\n    #cwd = os.getcwd()+"/applications/gestionale/uploads/fatture/"\n    #id_cliente=args[\'0\']\n    #tipo_fattura=args[\'1\']\n\n    #data[\'error\']=None\n    data[\'msg\']="Tutapost"\n    data[\'filename\']=nome_file\n\n    return json.dumps(data)\n\n\ndef controllaPrezzo(prezzo):\n    p = str(prezzo)\n    if "." not in p:\n        p+=".00"\n    return p\n\n@service.jsonrpc\n@service.jsonrpc2\ndef crea_fattura_xml_accredito(args):\n\n    data={}\n    fattura=None\n    fattura=FatturaXml()\n    articoli=set([])\n\n    partitaIvaCarpal="00905170197"\n    codiceFiscaleCarpal="01785290162"\n    denominazioneCarpal="MICROCARP S.R.L."\n    indirizzoCarpal="Strada Statale 415"\n    capCarpal="26012"\n    provinciaCarpal="CR"\n    paeseCarpal="Castelleone"\n\n    #Progressivo Invio\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\n    numero = int(numero_corrente_fattura.split("/")[0])\n    anno = int(numero_corrente_fattura.split("/")[1])\n    numero +=1\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\n    numeroDocumento=str(numero)\n\n    progressivoInvio=numero_fattura_da_salvare\n\n    \n\n    \n\n    \n    """\n    Dati cliente\n    """\n    id_cliente=args[\'0\']\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\n    nome_cliente=dati_cliente.nome\n    citta_cliente = dati_cliente.citta\n    indirizzo_cliente = dati_cliente.indirizzo\n    cap_cliente = dati_cliente.cap\n    provincia_cliente = dati_cliente.provincia\n    cf_cliente = dati_cliente.codice_fiscale\n    pi_cliente = dati_cliente.partita_iva\n    nazione_cliente = dati_cliente.nazione\n    codice_banca = dati_cliente.codice_banca\n    iban_cliente = dati_cliente.codice_iban\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\n    annotazioni=dati_cliente.annotazioni\n    codiceDestinatario=dati_cliente.codiceDestinatario\n    pecDestinatario=dati_cliente.pec\n\n    if codiceDestinatario is None and pecDestinatario is None:\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\n        data[\'error\']=True\n        return json.dumps(data)\n\n    if pi_cliente is None:\n        data[\'msg\']="Inserire la partita iva per il cliente "+str(nome_cliente)\n        data[\'error\']=True\n        return json.dumps(data)\n\n   \n    \n    fattura.addDatiTrasmissione("IT",codiceFiscaleCarpal,progressivoInvio,codiceDestinatario,pecDestinatario)\n    fattura.addCedentePrestatore("IT",partitaIvaCarpal,denominazioneCarpal)\n    fattura.addSedeCedentePrestatore(indirizzoCarpal,capCarpal,paeseCarpal,provinciaCarpal,"IT")\n\n    #Dati cliente\n    fattura.addCessionarioCommittente("IT",pi_cliente.replace("IT",""),nome_cliente)\n    fattura.addSedeCessionarioCommittente(indirizzo_cliente,cap_cliente,citta_cliente,provincia_cliente,"IT")\n\n    tipoDocumento=ritornaTipoDiPagamento(args[\'1\'])\n\n\n    #Calcolo data fattura\n    """\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\n    for r in ddts_id:\n        data_scelta = r.data_emissione\n        \n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\n        \n    day_start,day_end = monthrange(m.year, m.month)\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\n    \n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\n    """\n    start_date = datetime.datetime.now()\n\n    #Creazione descrizione fattura\n    descrizione_fattura="Nota di accredito"\n    fattura.addDatiGeneraliDocumento(tipoDocumento,fixDate(start_date.strftime("%d-%m-%Y")),numeroDocumento,descrizione_fattura)\n    \n    #Controllare se ci possono essere pi\xc3\xb9 rate di pagamento\n\n    """\n    if len(righeDataScadenza)>1:\n        pagamento="TP01"\n    else:\n        pagamento="TP02"\n    \n    """\n    #Per ora metto sempre solo 1 rata\n    pagamento="TP02"\n    fattura.addCondizioniPagamento(pagamento)\n\n    articoli=[]\n    articolo=[]\n\n    fattura.rows=[]\n    lista_codici_iva =  {}\n    \n    importo_totale = 0\n    imposta_totale = 0\n    imposta_iva = 0\n    lista_ddt = []\n    if True:\n        rows = db(db.righe_in_fattura_istantanea).select()\n        for row in rows:\n        \n            try:\n         \n                \n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\n                  print "Pagamento :",pagamento\n                        \n                  if "F.M." in pagamento:\n                      fine_mese = True\n                  else:\n                      fine_mese = False\n                      \n                   \n                  \n                    \n                  \n                  \n                  if not fine_mese:\n                       try:\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                          scadenza_salvata = scadenza\n                          scadenza = scadenza.strftime("%d/%m/%Y")\n                         \n                       except:\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\n                           return locals()\n                  else:\n                      \n                       if ("M.S." or "ms") in pagamento:\n                           \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\n                           scadenza = scadenza.strftime("%d/%m/%Y") \n                           \n                       else:\n                           #Fine mese senza M.S.               \n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\n                           print "Scadenza : ",scadenza\n                       \n                  print "qui prima articolo"\n                  print row\n                  codice_articolo=row.codice_articolo\n                  descrizione=row.descrizione\n                  um=row.u_m\n                  qta=row.qta\n                  codice_iva=row.codice_iva\n                  riferimento_ordine=row.riferimento_ordine\n                  prezzo=row.prezzo\n                  print "qui dopo articolo"\n                  \n                  percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["percentuale_iva"]\n                  codice_iva_interno=db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["codice_iva"]\n                  bollo = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["bollo_su_importi_esenti"]\n\n                  articolo.append(codice_articolo)\n                  articolo.append(descrizione)\n                  articolo.append(codice_iva)\n                  articolo.append(percentuale_iva)\n                  articolo.append(bollo)\n                  articolo.append(um)\n                  articolo.append(qta)\n                  articolo.append(controllaPrezzo(prezzo))\n                  articolo.append(riferimento_ordine)\n                  articolo.append(pagamento)\n                  articolo.append(scadenza)\n                  articolo.append(ritornaCondizioniPagamento(pagamento))\n                  articolo.append(codice_iva_interno)\n\n                  add=True\n                  for a in articoli:\n                          print a,articolo,a==articolo\n                          if a==articolo:\n                              add=False\n                              break\n\n                  if add:\n                      articoli.append(articolo)\n                      articolo=[]\n            except Exception,e:\n                     \n                       data[\'msg\']="Controllare tipo pagamento per  cliente "+str(nome_cliente)+str(e)\n                       data[\'error\']=True\n                       return json.dumps(data) \n                      \n                        \n    def ritornaImponibile(qta,prezzo):\n        imponibile= float(qta)*float(prezzo)\n        print imponibile,float("%0.2f"%imponibile)\n        return round(imponibile,2)\n\n\n    def ritornaTotaleArticoli(articoli):\n        totale=0.0\n        for articolo in articoli:\n            imponibile=ritornaImponibile(articolo[6],articolo[7])\n            percentualeIva=articolo[3]\n            totaleIvaInclusa=imponibile + (imponibile*percentualeIva)/100\n            totale+=totaleIvaInclusa\n\n        return str("{:.2f}".format(totale))\n    \n\n\n    #Dettagilio Pagamento\n    articolo=articoli[0]\n    dataToFix=articolo[10]\n    d=dataToFix.split("/")\n\n    if len(d[1])==1:\n        d[1]="0"+d[1]\n\n    if len(d[0])==1:\n        d[0]="0"+d[1]\n    \n    \n    d=d[2]+"-"+d[1]+"-"+d[0]\n    fattura.addDettaglioPagamento(articolo[11],d,ritornaTotaleArticoli(articoli))\n    print "Totale iva inclusa : ",ritornaTotaleArticoli(articoli)\n\n\n    #TotalerigheCodiciIva\n\n    db(db.anagrafica_codici_iva).select()\n\n    TotaleRigheCodiciIva={}\n\n\n\n    for articolo in articoli:\n        percentuale_iva=articolo[3]\n        codice_iva_interno=articolo[12]\n        \n        imponibile=ritornaImponibile(articolo[6],articolo[7])\n        if not TotaleRigheCodiciIva.has_key(codice_iva_interno):\n            TotaleRigheCodiciIva[codice_iva_interno] = imponibile\n\n        else:\n            TotaleRigheCodiciIva[codice_iva_interno] = TotaleRigheCodiciIva[codice_iva_interno] + imponibile\n\n\n           \n\n    for k in TotaleRigheCodiciIva:\n    \n       aliquota_iva = db(db.anagrafica_codici_iva.codice_iva == k).select().first()["percentuale_iva"]\n       imponibile=TotaleRigheCodiciIva[k]\n       \n       if k=="22":\n           aliquota_iva="22.00"\n           descrizione_imposta=""\n           imposta=(imponibile*22.0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n       if k=="10":\n           aliquota_iva="10.00"\n           descrizione_imposta=""\n           imposta=(imponibile*10.0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n\n\n\n       if k=="53":\n           aliquota_iva="0.00"\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\n           imposta=(imponibile*0)/100\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\n\n\n\n\n    numero_linea=1\n    for articolo in articoli:\n        if "22" in articolo[12]:\n            aliquota="22.00"\n        elif "10" in articolo[12]:\n            aliquota="10.00"\n        else:\n            aliquota="0.00"\n   \n\n        descrizione=articolo[0]+" "+articolo[1]+" "+articolo[8] #riferimento ordine\n        qta=fixPrezzo(articolo[6])+".00"\n        prezzo=str(articolo[7])\n        codice_iva=str(articolo[12])\n        importo=str("{:.2f}".format(ritornaImponibile(qta,prezzo)))\n       \n\n        \n\n        fattura.addLinea(str(numero_linea),descrizione,qta,prezzo,importo,aliquota,codice_iva)\n        numero_linea+=1\n    \n\n    nome_file=fattura.writeXml()\n    #cwd = os.getcwd()+"/applications/gestionale/uploads/fatture/"\n    #id_cliente=args[\'0\']\n    #tipo_fattura=args[\'1\']\n\n    #data[\'error\']=None\n    data[\'msg\']="Tutapost"\n    data[\'filename\']=nome_file\n\n    return json.dumps(data)\n\nresponse._vars=response._caller(storico_articoli_prodotti)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\workspace\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\workspace\\web2py\\applications\\gestionale\\controllers/default.py", line 8423, in <module>\n  File "C:\\workspace\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\workspace\\web2py\\applications\\gestionale\\controllers/default.py", line 7186, in storico_articoli_prodotti\n    rows=db(db.saved_righe_in_ddt_cliente).select()\n  File "C:\\workspace\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\workspace\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "C:\\workspace\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1277, in _select_aux\n    return processor(rows,fields,self._colnames,cacheable=cacheable)\n  File "C:\\workspace\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1767, in parse\n    for row in rows]\n  File "C:\\workspace\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1677, in _parse\n    value = self.parse_value(value, ft, blob_decode)\n  File "C:\\workspace\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1527, in parse_value\n    return self.parsemap[key](value,field_type)\n  File "C:\\workspace\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1585, in parse_datetime\n    value = datetime.datetime(y, m, d, h, mi, s, ms)\nValueError: year is out of range\n'
p11
s.