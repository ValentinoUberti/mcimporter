(dp1
S'output'
p2
S"<type 'exceptions.IndentationError'> unindent does not match any outer indentation level (default.py, line 1951)"
p3
sS'layer'
p4
S'/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\r\n# this file is released under public domain and you can use without limitations\r\n\r\n# -------------------------------------------------------------------------\r\n# This is a sample controller\r\n# - index is the default action of any application\r\n# - user is required for authentication and authorization\r\n# - download is for downloading files uploaded in the db (does streaming)\r\n# -------------------------------------------------------------------------\r\nfrom __future__ import division\r\nimport json\r\nimport csv\r\nfrom ddt import *\r\nfrom fattura import *\r\nfrom ordine_fornitore import *\r\nfrom controllo_produzione import *\r\nimport datetime\r\nfrom money import *\r\nfrom tornado.test.util_test import ImportObjectTest\r\nfrom HTMLParser import HTMLParser\r\nfrom calendar import monthrange\r\nimport gluon\r\nfrom datetime import timedelta\r\nimport wrapper\r\nimport subprocess\r\nfrom fatturaToXmlObj import *\r\n\r\n\r\nimport socket\r\nimport sys\r\nfrom pydal.objects import Row\r\n#from pyasn1.compat.octets import null\r\n#from attr.validators import instance_of\r\n\r\ndef send_prn(): \r\n\ts = socket.socket()\r\n\ts.connect(("192.168.0.208",9100))\r\n\tf = open ("/tmp/to#print.prn", "rb")\r\n\tl = f.read(1024)\r\n\twhile (l):\r\n\t    s.send(l)\r\n\t    l = f.read(1024)\r\n\ts.close()\r\n\r\nexport_classes = dict(json=False,tsv=False, xml=False,pdf=False) \r\n\r\ndef tabella_piano_dei_conti():\r\n      piano_dei_conti_form = SQLFORM(db.piano_dei_conti,formname=\'piano_dei_conti\',maxtextlength=4,formstyle = \'table3cols\')\r\n      #piano_dei_conti_form.element(\'.web2py_counter\', replace=None)\r\n                                   \r\n      piano_dei_conti_form.process(formname=\'piano_dei_conti\')\r\n      return dict(piano_dei_conti_form=piano_dei_conti_form)\r\n\r\n    \r\ndef ricerca_piano_dei_conti():\r\n     piano_dei_conti_form = SQLFORM.grid(db.piano_dei_conti,formname=\'piano_dei_conti\',maxtextlength=40,create=True,deletable=True,searchable=True,sortable=True,paginate=5,formstyle = \'table3cols\')\r\n     piano_dei_conti_form.element(\'.web2py_counter\', replace=None)\r\n     \r\n     return dict(piano_dei_conti_form=piano_dei_conti_form)\r\n    \r\n   \r\ndef anagrafica_articoli_2():\r\n    nome_listino = ""\r\n    nome_cliente = ""\r\n    id_cliente = request.args[0]\r\n    #print request.args\r\n    \r\n    q = db(db.anagrafica_articoli.id == request.args[0]).select().first()\r\n    nome_cliente = q[\'nome_cliente\']\r\n    nome_listino = q[\'nome_listino\']\r\n    db.articoli.anagrafica_articoli_id.default = id_cliente\r\n    query=db.articoli.anagrafica_articoli_id == id_cliente\r\n    db.articoli.anagrafica_articoli_id.readable = False\r\n    db.articoli.anagrafica_articoli_id.writeable = False\r\n    \r\n    \r\n    articoli_form2 = SQLFORM.grid(query = query,formname=\'articoli2\',maxtextlength=100,create=True,        deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\r\n    articoli_form2.element(\'.web2py_counter\', replace=None)\r\n    return locals()\r\n    #return dict(form_id = id_cliente,nome_listino = nome_listino, nome_cliente = nome_cliente,articoli_form2=articoli_form2)\r\n     \r\ndef aggiungi_articolo_a_listino_fornitori():\r\n    id_articolo = request.vars.articolo_id\r\n    row = db(db.anagrafica_articoli.id == id_articolo).select().first()\r\n    codice_articolo = row[\'codice_articolo\']\r\n    \r\n    db.articolo_in_listino_fornitori.id_articolo.default = id_articolo\r\n    db.articolo_in_listino_fornitori.codice_articolo.default = codice_articolo\r\n    db.articolo_in_listino_fornitori.codice_articolo.writable=False\r\n    db.articolo_in_listino_fornitori.id_articolo.writable = False\r\n    \r\n    query=(db.articolo_in_listino_fornitori.id_articolo ==id_articolo)\r\n    \r\n    fields=[db.articolo_in_listino_fornitori.nome_fornitore,db.articolo_in_listino_fornitori.listino,db.articolo_in_listino_fornitori.data_valuta,db.articolo_in_listino_fornitori.numero_pezzi,db.articolo_in_listino_fornitori.prezzo,db.articolo_in_listino_fornitori.note,db.articolo_in_listino_fornitori.variazione]\r\n    \r\n    \r\n    \r\n    form = SQLFORM.grid(query=query,formname=\'articoli3\',formstyle = \'table3cols\',fields=fields,paginate=5)\r\n    \r\n       \r\n    return locals()\r\n\r\n\r\ndef aggiungi_articolo_a_listino():\r\n    id_articolo = request.vars.articolo_id\r\n    row = db(db.anagrafica_articoli.id == id_articolo).select().first()\r\n    codice_articolo = row[\'codice_articolo\']\r\n    \r\n    db.articolo_in_listino.id_articolo.default = id_articolo\r\n    db.articolo_in_listino.codice_articolo.default = codice_articolo\r\n    db.articolo_in_listino.codice_articolo.writable=False\r\n    db.articolo_in_listino.id_articolo.writable = False\r\n    \r\n    query=(db.articolo_in_listino.id_articolo ==id_articolo)\r\n    \r\n    fields=[db.articolo_in_listino.nome_cliente,db.articolo_in_listino.listino,db.articolo_in_listino.data_valuta,db.articolo_in_listino.numero_pezzi,db.articolo_in_listino.prezzo,db.articolo_in_listino.note,db.articolo_in_listino.variazione]\r\n    \r\n    \r\n    \r\n    form = SQLFORM.grid(query=query,formname=\'articoli2\',formstyle = \'table3cols\',fields=fields,paginate=5)\r\n    \r\n       \r\n    return locals()\r\n\r\n    \r\n  \r\ndef ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(codice_articolo,id_riga_ordine):\r\n    rows = db((db.riserva_quantita.codice_articolo == codice_articolo) & (db.riserva_quantita.id_riga_ordine == id_riga_ordine)).select()\r\n    totale = 0\r\n    for row in rows:\r\n        totale += int(row.quantita)\r\n    \r\n    return str(totale)\r\n  \r\ndef ritorna_totale_prenotazione_da_codice_articolo(codice_articolo):\r\n    #print "qui"\r\n    rows = db(db.riserva_quantita.codice_articolo == codice_articolo).select()\r\n    totale = 0\r\n    for row in rows:\r\n        #print row.quantita\r\n        totale += int(row.quantita)\r\n    \r\n    return str(totale)\r\n \r\ndef ritorna_disponibilita_da_codice_articolo(giacenza,codice_articolo):\r\n    rows = db(db.riserva_quantita.codice_articolo == codice_articolo).select()\r\n    prenotato = 0\r\n    for row in rows:\r\n        prenotato += int(row.quantita)\r\n    \r\n    try:\r\n        giacenza = int(giacenza)\r\n    except:\r\n        giacenza = 0\r\n    \r\n    \r\n    disponibile = int(giacenza) - prenotato\r\n    #print prenotato\r\n    return str(disponibile)\r\n\r\ndef anagrafica_articoli():\r\n    \r\n    """\r\n    DA RIFARE TUTTO\r\n    """\r\n    \r\n    \r\n    """\r\n    Codice articolo\r\n    Tipo Articolo\r\n    Segnala prime tre produzioni (boolean)\r\n    Codice iva\r\n    Trattamento (si / no / vedi ordine cliente)\r\n    tipo lamiera\r\n    tipo ordine (vedi db.py)\r\n    Codice sottoconto\r\n    Free pass (boolean)\r\n    codice imballo\r\n    descrizione imballo\r\n    numero pezzi\r\n    \r\n    """\r\n    \r\n    db.anagrafica_articoli.prenotato = Field.Virtual(\'prenotato\', lambda row : ritorna_totale_prenotazione_da_codice_articolo(row.anagrafica_articoli.codice_articolo))\r\n    db.anagrafica_articoli.disponibile = Field.Virtual(\'disponibile\', lambda row : ritorna_disponibilita_da_codice_articolo(row.anagrafica_articoli.giacenza,row.anagrafica_articoli.codice_articolo))\r\n    fields =[db.anagrafica_articoli.id,db.anagrafica_articoli.codice_articolo,db.anagrafica_articoli.giacenza,db.anagrafica_articoli.prenotato,db.anagrafica_articoli.disponibile,db.anagrafica_articoli.descrizione,db.anagrafica_articoli.revisione,db.anagrafica_articoli.ubicazione,db.anagrafica_articoli.cartella_disegno,db.anagrafica_articoli.tipo_articolo,db.anagrafica_articoli.trattamento,db.anagrafica_articoli.tipo_ordine]\r\n    links = [lambda row: A(XML(\'Listino clienti\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_articolo_a_listino\',vars=dict(articolo_id = row.id))),lambda row: A(XML(\'Listino fornitori\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_articolo_a_listino_fornitori\',vars=dict(articolo_id = row.id)))]\r\n    articoli_form = SQLFORM.grid(db.anagrafica_articoli,formname=\'articoli1\',maxtextlength=100,create=True,        deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,links=links,fields=fields)\r\n    #articoli_form.element(\'.web2py_counter\', replace=None)\r\n    \r\n    """        \r\n    if articoli_form.process().accepted:\r\n        redirect(URL(\'anagrafica_articoli_2\',args=articoli_form.vars.id))\r\n    \r\n    art_form = SQLFORM.grid(db.articoli,formname=\'articoli\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n    \r\n    """\r\n    return dict(articoli_form = articoli_form)\r\n\r\n \r\ndef anagrafica_magazzini_interni():\r\n    anagrafica_magazzini_interni_form = SQLFORM.grid(db.anagrafica_magazzini_interni,formname=\'anagrafica_magazzini_interni\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n    anagrafica_magazzini_interni_form.element(\'.web2py_counter\', replace=None)\r\n\r\n    return dict(anagrafica_magazzini_interni_form = anagrafica_magazzini_interni_form)\r\n\r\ndef visualizza_articoli_in_listino():\r\n    listino_id = request.vars.listino_id\r\n    \r\n    row = db(db.anagrafica_listini.id == listino_id).select().first()\r\n    cliente=row[\'nome_cliente\']\r\n    listino=row[\'nome_listino\']\r\n    \r\n    #query =((db.articolo_in_listino.nome_cliente == cliente)) #,db.articolo_in_listino.nome_cliente == clientedb.articolo_in_listino.listino == listino,db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id\r\n    \r\n    rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id)).select(groupby=db.anagrafica_articoli.codice_articolo)\r\n    \r\n    #form=SQLFORM.grid(query=query,formname=\'anagrafica_listini\',maxtextlength=100,create=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n   \r\n    \r\n    return locals()\r\n\r\n\r\ndef anagrafica_listini():\r\n    links = [lambda row: A(XML(\'Visualizza articoli\'),_class=\'button btn btn-default\',_href=URL(\'visualizza_articoli_in_listino\',vars=dict(listino_id = row.id)))]\r\n    anagrafica_listini_form = SQLFORM.grid(db.anagrafica_listini,formname=\'anagrafica_listini\',maxtextlength=100,create=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links)\r\n    anagrafica_listini_form.element(\'.web2py_counter\', replace=None)\r\n\r\n    return dict(anagrafica_listini_form = anagrafica_listini_form)\r\n  \r\n  \r\ndef anagrafica_causali_trasporti():\r\n    \r\n    \r\n    form = SQLFORM.grid(db.causali_trasporti,formname=\'causali_trasporti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n    form.element(\'.web2py_counter\', replace=None)\r\n\r\n    return dict(form = form)\r\n    \r\ndef dettaglio_bolla():\r\n    ordine_id = request.args[0]\r\n       \r\n    row = db(db.ordine_cliente.id == ordine_id).select().first()\r\n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\r\n    nome_cliente = row[\'nome_cliente\']\r\n    data_inserimento = row[\'data_inserimento\']\r\n    listino = row[\'listino\']\r\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\r\n    listino = row[\'listino\']\r\n    magazzino_interno = row[\'magazzino_interno\']\r\n    numero_ordine = row[\'ultimo_codice_ordine\']\r\n       \r\n    db(db.numero_ordine_cliente_progressivo).delete()\r\n    db.numero_ordine_cliente_progressivo.insert(ultimo_codice_ordine=numero_ordine)\r\n    \r\n    numero_riga_corrente = db(db.righe_in_ordine_cliente.id_ordine_cliente==ordine_id).count()+1\r\n    db.righe_in_ordine_cliente.n_riga.default = numero_riga_corrente\r\n    db.righe_in_ordine_cliente.n_riga.writable = False\r\n    \r\n    db.righe_in_ordine_cliente.id_ordine_cliente.default = ordine_id\r\n    db.righe_in_ordine_cliente.id_ordine_cliente.writable = False\r\n    db.righe_in_ordine_cliente.prezzo.default = 0\r\n    #db.righe_in_ordine_cliente.prezzo.writable = False\r\n    #fields=[\'\']\r\n    \r\n    \r\n    fields=[db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.sconti,db.righe_in_ordine_cliente.codice_iva,db.righe_in_ordine_cliente.evasione]\r\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id,formname=\'aggiungi_righe_a_ordini_clienti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1],fields=fields)\r\n    #codici_iva_form.element(\'.web2py_counter\', replace=None)\r\n    \r\n    \r\n    form_dettaglio_bolla = SQLFORM(db.ddt_clienti,formname=\'ddt\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,formstyle = \'table3cols\')\r\n    #codici_iva_form.element(\'.web2py_counter\', replace=None)\r\n    return locals()\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2  \r\ndef aggiungi_ddt_a_fattura(args):\r\n    \r\n    ddt_id = args[\'0\']\r\n    row = db(db.ddt_cliente.id == ddt_id).select().first()\r\n    data_richiesta = row.data_richiesta.strftime("%d/%m/%Y")\r\n    if row.numero_ddt is not None:\r\n        db(db.ddt_da_fatturare.numero_ddt==row.numero_ddt).delete()\r\n        db.ddt_da_fatturare.insert(numero_ddt=row.numero_ddt,ddt_id=ddt_id,data_emissione=data_richiesta,user_id = auth.user_id,totale = calcola_totale_iva_inclusa_da_ddt(row.id))\r\n        return "ok"\r\n    else:\r\n        response.flash="DDT non completato"\r\n        return locals()\r\n\r\ndef return_ddts_for_row(row):\r\n    \r\n    \r\n    \r\n    ##print row\r\n    my_row=row\r\n    id_ordine = row.id_ordine_cliente\r\n    n_riga = row.n_riga\r\n    ##print n_riga\r\n    result = id_ordine + " " + n_riga\r\n    \r\n    try:\r\n        quantita_richiesta = int(row.quantita)\r\n    except Exception,e:\r\n    \t#print e.message\r\n        quantita_richiesta = 0\r\n        pass\r\n    \r\n    \r\n    \r\n    \r\n    quantita_prodotta = 0\r\n    id_riga_ordine=""\r\n    ddt_code = []\r\n    try:\r\n        saved_rows = db((db.saved_righe_in_ddt_cliente.id_ordine == id_ordine) & (db.saved_righe_in_ddt_cliente.n_riga == n_riga)).select()\r\n        #print "SAVED ---------------------------------"\r\n        #print "Id ordine : "+str(id_ordine)\r\n        #print "Numero riga : "+str(n_riga)\r\n        #print saved_rows\r\n          \r\n        if saved_rows is not None:\r\n           quantita_prodotta = 0 \r\n           \r\n           for row in saved_rows:\r\n               \r\n                if "commento" in row[\'codice_articolo\']:\r\n                \tddt_id = row.saved_ddt_id\r\n                \tnumero_ddt = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()["numero_ddt"]\r\n\t                to_add = "{0} \\n".format(numero_ddt)\r\n\t                ddt_code.append(to_add)\r\n                        #print "commento"\r\n                \r\n                try:    \r\n                  if not "commento" in row[\'codice_articolo\']:\r\n\t                 ddt_id = row.saved_ddt_id\r\n\t                 quantita = row.quantita\r\n\t                 quantita_prodotta += int(quantita)\r\n\t                 #print "z123"\r\n\t                 numero_ddt = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()["numero_ddt"]\r\n\t                 to_add = "{0} ({1})\\n".format(numero_ddt,quantita)\r\n\t                 ddt_code.append(to_add)\r\n\t        except Exception,e:\r\n\t            \t#print e\r\n\t                pass     \r\n\t       \r\n\t           \r\n           \r\n           \r\n           \r\n           """\r\n           #print "CIAOOOOOOOO"\r\n           \r\n           if quantita_prodotta >= quantita_richiesta:\r\n               #print "CHIUDERE LA RIGA"\r\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\r\n               riga.update_record(riga_emessa_in_ddt=\'T\')\r\n           else:\r\n               #print "RIAPRIRE LA RIGA"\r\n               ##print my_row.id\r\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\r\n               ##print riga\r\n               riga.update_record(riga_emessa_in_ddt=\'F\')\r\n           """\r\n    except Exception,e:\r\n    \t#print e.message\r\n    \t\r\n        pass\r\n    """\r\n    if ddt_id is not None:\r\n        ddt_id = ddt_id.saved_ddt_id\r\n        result = ddt_id\r\n    """\r\n    return ddt_code\r\n  \r\ndef return_ddts_for_row_id(row_id):\r\n    \r\n    \r\n    \r\n    data = db(db.righe_in_ordine_cliente.id == row_id).select().first()\r\n    id_ordine = data.id_ordine_cliente\r\n    n_riga = data.n_riga\r\n    result = id_ordine + " " + n_riga\r\n    quantita_richiesta = int(data.quantita)\r\n    \r\n    quantita_prodotta = 0\r\n    id_riga_ordine=""\r\n    ddt_code = []\r\n    try:\r\n        saved_rows = db((db.saved_righe_in_ddt_cliente.id_ordine == id_ordine) & (db.saved_righe_in_ddt_cliente.n_riga == n_riga)).select()\r\n        #print saved_rows\r\n        if saved_rows is not None:\r\n           quantita_prodotta = 0 \r\n           \r\n           for row in saved_rows:\r\n               ddt_id = row.saved_ddt_id\r\n               quantita = row.quantita\r\n               quantita_prodotta += int(quantita)\r\n               \r\n               numero_ddt = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()["numero_ddt"]\r\n               to_add = "{0} ({1})\\n".format(numero_ddt,quantita)\r\n               ddt_code.append(to_add)\r\n           \r\n           \r\n           \r\n           \r\n           """\r\n           #print "CIAOOOOOOOO"\r\n           \r\n           if quantita_prodotta >= quantita_richiesta:\r\n               #print "CHIUDERE LA RIGA"\r\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\r\n               riga.update_record(riga_emessa_in_ddt=\'T\')\r\n           else:\r\n               #print "RIAPRIRE LA RIGA"\r\n               ##print my_row.id\r\n               riga = db(db.righe_in_ordine_cliente.id == my_row.id).select().first()\r\n               ##print riga\r\n               riga.update_record(riga_emessa_in_ddt=\'F\')\r\n           """\r\n    except\tException,e:\r\n    \t#print e.message\r\n        pass\r\n    """\r\n    if ddt_id is not None:\r\n        ddt_id = ddt_id.saved_ddt_id\r\n        result = ddt_id\r\n    """\r\n    return ddt_code\r\n  \r\n\r\ndef return_quantity_for_row_id(row_id):\r\n    \r\n    \r\n    \r\n    data = db(db.righe_in_ordine_cliente.id == row_id).select().first()\r\n    id_ordine = data.id_ordine_cliente\r\n    n_riga = data.n_riga\r\n    result = id_ordine + " " + n_riga\r\n    quantita_richiesta = int(data.quantita)\r\n    \r\n    quantita_prodotta = 0\r\n    id_riga_ordine=""\r\n    ddt_code = []\r\n    try:\r\n        saved_rows = db((db.saved_righe_in_ddt_cliente.id_ordine == id_ordine) & (db.saved_righe_in_ddt_cliente.n_riga == n_riga)).select()\r\n        #print saved_rows\r\n        if saved_rows is not None:\r\n           quantita_prodotta = 0 \r\n           \r\n           for row in saved_rows:\r\n               ddt_id = row.saved_ddt_id\r\n               quantita = row.quantita\r\n               quantita_prodotta += int(quantita)\r\n               \r\n               \r\n                             \r\n           \r\n    except:\r\n        pass\r\n    \r\n    return quantita_prodotta\r\n\r\ndef return_descrizione_da_codice_articolo(row):\r\n    codice_articolo = row.codice_articolo\r\n    \r\n    ##print row\r\n    \r\n    try:\r\n        descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()["descrizione"]\r\n        \r\n    except:\r\n        descrizione = ""    \r\n    \r\n    \r\n    return descrizione\r\n\r\n\r\ndef previeni_cencellazione(table_involved, id_of_the_deleted_record):\r\n    pass\r\n   \r\n\r\ndef update_order_price(form):\r\n\r\n\t\r\n\tid_riga_ordine = form.vars.id\r\n\tprezzo = form.vars.prezzo\r\n\trow = db(db.saved_righe_in_ddt_cliente.id_riga_ordine ==id_riga_ordine).select().first()\r\n\tif row:\r\n\t\trow.update_record(prezzo=prezzo)\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\r\ndef aggiungi_righe_a_ordini_clienti():\r\n    ordine_id = request.args[0]\r\n    \r\n    righe_in_ordine_cliente_form =""  \r\n    #print "ORDINE ID {0}".format(ordine_id)\r\n    row = db(db.ordine_cliente.id == ordine_id).select().first()\r\n    \r\n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\r\n    nome_cliente = row[\'nome_cliente\']\r\n    #print nome_cliente\r\n    data_inserimento = row[\'data_inserimento\']\r\n    listino = row[\'listino\']\r\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\r\n    listino = row[\'listino\']\r\n    magazzino_interno = row[\'magazzino_interno\']\r\n    numero_ordine = row[\'ultimo_codice_ordine\']\r\n    \r\n    r2 = db(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id).select()\r\n    """\r\n    for r in r2:\r\n        return_ddts_for_row(r)\r\n    """    \r\n    try:\r\n        for r in r2:\r\n            produzione = db(db.produzione_righe_per_ddt.id_riga_ordine == r.id).select()\r\n            prodotta = 0\r\n            for p in produzione:\r\n                prodotta += int(p.quantita_prodotta)\r\n            if prodotta >= int(r.quantita):\r\n                r.update_record(riga_emessa_in_ddt=\'T\')\r\n    except Exception,e:\r\n    \t#print "in saved_righe_in_ddt_cliente ECCEZZINE"\r\n        #print e\r\n        pass\r\n            \r\n   \r\n    db(db.numero_ordine_cliente_progressivo).delete()\r\n    db.numero_ordine_cliente_progressivo.insert(ultimo_codice_ordine=numero_ordine)\r\n    \r\n    #form_righe = SQLFORM.grid(db.righe_in_ordine_cliente,formname=\'righe_in_ordine_cliente\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n    #f = SQLFORM.grid(db.anagrafica_listini)\r\n    \r\n    numero_riga_corrente = db(db.righe_in_ordine_cliente.id_ordine_cliente==ordine_id).count()+1\r\n    db.righe_in_ordine_cliente.n_riga.default = numero_riga_corrente\r\n    db.righe_in_ordine_cliente.n_riga.writable = False\r\n    \r\n    db.righe_in_ordine_cliente.id_ordine_cliente.default = ordine_id\r\n    db.righe_in_ordine_cliente.id_ordine_cliente.writable = False\r\n    \r\n    db.righe_in_ordine_cliente.prezzo.default = 0\r\n    #db.righe_in_ordine_cliente.prezzo.writable = False\r\n    #fields=[\'\']\r\n    \r\n    try:\r\n        cliente = db(db.clienti.nome==nome_cliente).select().first()\r\n        db.righe_in_ordine_cliente.codice_iva.default=cliente.codice_iva\r\n    except:\r\n        msg="Cliente non trovato. Possibile cambio di anagrafica"\r\n        response.flash=msg\r\n        righe_in_ordine_cliente_form\r\n        new_order=False\r\n        return locals()\r\n    \r\n    \r\n    db.righe_in_ordine_cliente.ddt=Field.Virtual("DDT associati",lambda row: return_ddts_for_row(row.righe_in_ordine_cliente))\r\n    db.righe_in_ordine_cliente.descrizione=Field.Virtual("Descrizione",lambda row: return_descrizione_da_codice_articolo(row.righe_in_ordine_cliente))\r\n        #db.righe_in_ordine_cliente.riga_chiusa = Field.Virtual("Riga_chiusa", lambda row: row.righe_in_ordine_cliente.riga_emessa_in_ddt)\r\n        ##print db.righe_in_ordine_cliente.riga_chiusa \r\n    \r\n   \r\n    can_delete = False\r\n    if \'edit\' in request.args:\r\n    \t    #print "IN EDIT"\r\n            record = request.args\r\n            id_riga = request.args[3]\r\n            r3=""\r\n            riga = db(db.righe_in_ordine_cliente.id == id_riga).select().first()\r\n            if len(return_ddts_for_row(riga)) == 0:\r\n                can_delete = True\r\n    \r\n    fields=[db.righe_in_ordine_cliente.id_ordine_cliente,db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.descrizione,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.evasione,db.righe_in_ordine_cliente.ddt,db.righe_in_ordine_cliente.riga_emessa_in_ddt]\r\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id,formname=\'aggiungi_righe_a_ordini_clienti\',maxtextlength=100,create=True,     deletable=can_delete,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1],fields=fields,onupdate=update_order_price)\r\n    #print "---- qui --"    \r\n    \r\n    """\r\n    db.righe_in_ordine_cliente.riga_emessa_in_ddt.writable=False\r\n    """\r\n    try:\r\n        cliente = db(db.clienti.nome==nome_cliente).select().first()\r\n        db.righe_in_ordine_cliente.codice_iva.default=cliente.codice_iva\r\n        can_delete = False\r\n    \r\n        \r\n        db.righe_in_ordine_cliente.ddt=Field.Virtual("DDT associati",lambda row: return_ddts_for_row(row.righe_in_ordine_cliente))\r\n        db.righe_in_ordine_cliente.descrizione=Field.Virtual("Descrizione",lambda row: return_descrizione_da_codice_articolo(row.righe_in_ordine_cliente))\r\n        #db.righe_in_ordine_cliente.riga_chiusa = Field.Virtual("Riga_chiusa", lambda row: row.righe_in_ordine_cliente.riga_emessa_in_ddt)\r\n        ##print db.righe_in_ordine_cliente.riga_chiusa \r\n        if \'edit\' in request.args:\r\n            if len(db.righe_in_ordine_cliente.ddt)==0:\r\n                can_delete=True\r\n            \r\n        \r\n        fields=[db.righe_in_ordine_cliente.id_ordine_cliente,db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.descrizione,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.evasione,db.righe_in_ordine_cliente.ddt,db.righe_in_ordine_cliente.riga_emessa_in_ddt]\r\n        righe_in_ordine_cliente_form = SQLFORM.grid(db.righe_in_ordine_cliente.id_ordine_cliente == ordine_id,formname=\'aggiungi_righe_a_ordini_clienti\',maxtextlength=100,create=True,     deletable=can_delete,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1],fields=fields)\r\n        #codici_iva_form.element(\'.web2py_counter\', replace=None)\r\n        \r\n    except Exception,e:\r\n        #print "eccezzione qui98"\r\n        #print e\r\n        pass\r\n    \r\n    new_order = False\r\n    if \'new\' in request.args:\r\n        new_order = True\r\n        #anagrafica_form = SQLFORM.factory(db.anagrafica_articoli,formname="anagrafica_articoli",user_signature=True,args=[],sortable=True,paginate=5, formstyle = \'table3cols\')\r\n        \r\n    return locals()\r\n\r\n\r\n\r\ndef aggiungi_righe_a_ordini_fornitori():\r\n    ordine_id = request.args[0]\r\n    \r\n      \r\n    \r\n    row = db(db.ordine_fornitore.id == ordine_id).select().first()\r\n    \r\n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\r\n    nome_fornitore = row[\'nome_fornitore\']\r\n    data_inserimento = row[\'data_inserimento\']\r\n    listino = row[\'listino\']\r\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\r\n    listino = row[\'listino\']\r\n    magazzino_interno = row[\'magazzino_interno\']\r\n    numero_ordine = row[\'ultimo_codice_ordine\']\r\n    \r\n   \r\n    db(db.numero_ordine_fornitore_progressivo).delete()\r\n    db.numero_ordine_fornitore_progressivo.insert(ultimo_codice_ordine=numero_ordine)\r\n    \r\n    #form_righe = SQLFORM.grid(db.righe_in_ordine_cliente,formname=\'righe_in_ordine_cliente\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n    #f = SQLFORM.grid(db.anagrafica_listini)\r\n    \r\n    numero_riga_corrente = db(db.righe_in_ordine_fornitore.id_ordine_fornitore==ordine_id).count()+1\r\n    db.righe_in_ordine_fornitore.n_riga.default = numero_riga_corrente\r\n    db.righe_in_ordine_fornitore.n_riga.writable = False\r\n    \r\n    db.righe_in_ordine_fornitore.id_ordine_fornitore.default = ordine_id\r\n    db.righe_in_ordine_fornitore.id_ordine_fornitore.writable = False\r\n    \r\n    db.righe_in_ordine_fornitore.prezzo.default = 0\r\n    #db.righe_in_ordine_cliente.prezzo.writable = False\r\n    #fields=[\'\']\r\n    \r\n    \r\n    cliente = db(db.fornitori.nome==nome_fornitore).select().first()\r\n    db.righe_in_ordine_fornitore.codice_iva.default=cliente.codice_iva\r\n    \r\n    db.righe_in_ordine_fornitore.riga_emessa_in_ddt.readable=False\r\n    db.righe_in_ordine_fornitore.riga_emessa_in_ddt.writable=False\r\n    \r\n    db.righe_in_ordine_fornitore.descrizione=Field.Virtual("Descrizione",lambda row: return_descrizione_da_codice_articolo(row.righe_in_ordine_fornitore))\r\n    \r\n    fields=[db.righe_in_ordine_fornitore.n_riga,db.righe_in_ordine_fornitore.codice_articolo,db.righe_in_ordine_fornitore.descrizione,db.righe_in_ordine_fornitore.quantita,db.righe_in_ordine_fornitore.prezzo,db.righe_in_ordine_fornitore.evasione]\r\n\r\n\r\n\r\n    righe_in_ordine_fornitore_form = SQLFORM.grid(db.righe_in_ordine_fornitore.id_ordine_fornitore == ordine_id,formname=\'aggiungi_righe_a_ordini_fornitori\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1],fields=fields)\r\n    #codici_iva_form.element(\'.web2py_counter\', replace=None)\r\n    \r\n    new_order = False\r\n    if \'new\' in request.args:\r\n        new_order = True\r\n        #anagrafica_form = SQLFORM.factory(db.anagrafica_articoli,formname="anagrafica_articoli",user_signature=True,args=[],sortable=True,paginate=5, formstyle = \'table3cols\')\r\n        \r\n    return locals()\r\n\r\ndef articoli_per_ordini():\r\n    \r\n    cliente = request.vars[\'cliente\']\r\n    listino = request.vars[\'listino\']\r\n    #print cliente,listino\r\n    \r\n    \r\n    links=[lambda row: BUTTON("Aggiungi articolo",_onclick=XML(\'aggiungiArticolo(\\\'\'+str(row.codice_articolo)+\'\\\')\'),_class=\'button btn btn-default\')]\r\n    fields=[db.anagrafica_articoli.codice_articolo,db.anagrafica_articoli.descrizione]\r\n    \r\n    \r\n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id)).select(groupby=db.anagrafica_articoli.codice_articolo)\r\n    \r\n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id))\r\n    \r\n    \r\n    anagrafica_form = SQLFORM.grid(db.anagrafica_articoli,groupby=db.anagrafica_articoli.codice_articolo,formname="anagrafica_articoli",searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',create=False,deletable=False,editable=True,csv=False,fields=fields,links=links,user_signature=False,args=request.args[:1])\r\n    return locals()\r\n    \r\n\r\ndef articoli_per_ordini_fornitori():\r\n    \r\n    fornitore = request.vars[\'fornitore\']\r\n    listino = request.vars[\'listino\']\r\n   \r\n    \r\n    links=[lambda row: BUTTON("Aggiungi articolo",_onclick=XML(\'aggiungiArticolo(\\\'\'+str(row.codice_articolo)+\'\\\')\'),_class=\'button btn btn-default\')]\r\n    fields=[db.anagrafica_articoli.codice_articolo,db.anagrafica_articoli.descrizione]\r\n    \r\n    \r\n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id)).select(groupby=db.anagrafica_articoli.codice_articolo)\r\n    \r\n    #rows=db((db.articolo_in_listino.nome_cliente == cliente) & (db.articolo_in_listino.listino == listino) & (db.articolo_in_listino.id_articolo == db.anagrafica_articoli.id))\r\n    \r\n    \r\n    anagrafica_form = SQLFORM.grid(db.anagrafica_articoli,groupby=db.anagrafica_articoli.codice_articolo,formname="anagrafica_articoli",searchable=True,sortable=False,paginate=5, formstyle = \'table3cols\',create=False,deletable=False,editable=False,csv=False,fields=fields,links=links,user_signature=False,args=request.args[:1])\r\n    return locals()\r\n    \r\ndef vettori():\r\n    form = SQLFORM.grid(db.vettore)\r\n    return dict(form=form)\r\n\r\ndef ordini_fornitori():\r\n    """\r\n    Selezione fornitori\r\n    Inserire numerazione progressiva relativa all\'anno in corso\r\n    Data di inserimento modificabile\r\n    Inserire magazzino della carpal\r\n    Scelta listino relativo al cliente\r\n    Ordine riferimento cliente\r\n    Inserisco le righe di codice articolo e in automatico presento i dati presi da anagrafica articoli\r\n    chiedo unit\xc3\xa0 di misura\r\n    quantit\xc3\xa0 richiesta\r\n    Prezzo singolo pezzo\r\n    Codice iva\r\n    """\r\n    try:\r\n        row = db(db.ordine_fornitore).select().last()\r\n        numero_ordine = row.ultimo_codice_ordine\r\n    except:\r\n        numero_ordine = "0/17"\r\n        \r\n    \r\n    db(db.numero_ordine_fornitore_progressivo).delete()\r\n    db.numero_ordine_fornitore_progressivo.insert(ultimo_codice_ordine=numero_ordine)\r\n    \r\n    codice_ordine_attuale = db(db.numero_ordine_fornitore_progressivo).select().first()[\'ultimo_codice_ordine\']\r\n    \r\n    import time\r\n    anno_corrente = str(time.strftime("%y"))\r\n    s=codice_ordine_attuale.split("/")\r\n    try:\r\n        #print s\r\n        if s[1] != anno_corrente:\r\n            numero_ordine = 1\r\n        else:\r\n            numero_ordine = int(s[0]) +1\r\n    except Exception,e:\r\n        #print e\r\n        numero_ordine = 1\r\n        \r\n            \r\n    codice_ordine_attuale = str(numero_ordine)+"/"+anno_corrente\r\n    \r\n    \r\n    righe_in_ordine_cliente_form=""\r\n    db.ordine_fornitore.ultimo_codice_ordine.default=codice_ordine_attuale\r\n    db.ordine_fornitore.ultimo_codice_ordine.writable=False\r\n    #fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.nome_cliente,db.ordine_cliente.data_inserimento,db.ordine_cliente.listino,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente,db.ordine_cliente.magazzino_interno]\r\n    fields=[\'ultimo_codice_ordine\',\'nome_fornitore\',\'data_inserimento\',\'listino\',\'data_ordine_fornitore\',\'magazzino_interno\',\'pagamento\',\'trasporto_a_mezzo\',\'porto\',\'vettore\']\r\n    \r\n    ordini_fornitori_form = SQLFORM(db.ordine_fornitore,formname=\'ordini_fornitori\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,fields=fields)\r\n    #ordini_clienti_form.element(\'.web2py_counter\', replace=None)\r\n         \r\n    #ordini_clienti_form.element(\'nome_cliente\')[\'_on_change\']=\'change_me()\'\r\n    \r\n    if ordini_fornitori_form.process().accepted:\r\n        id_fornitore = db(db.fornitori.nome == ordini_fornitori_form.vars.nome_fornitore).select().first()\r\n        \r\n        row = db(db.ordine_fornitore.id == ordini_fornitori_form.vars.id).select().first()\r\n        row.update_record(id_fornitore = id_fornitore.id)\r\n    \r\n        redirect(URL(\'aggiungi_righe_a_ordini_fornitori\',args=ordini_fornitori_form.vars.id))\r\n        \r\n        \r\n    links=[lambda row: A(XML(\'Visualizza righe\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_righe_a_ordini_fornitori\',args=row.id)),lambda row: A(XML(\'Stampa\'),_onclick=XML(\'stampaOrdineFornitore(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n    \r\n    \r\n    db.ordine_fornitore.ddt_completato.writable=False\r\n    \r\n    fields = [db.ordine_fornitore.ultimo_codice_ordine,db.ordine_fornitore.nome_fornitore,db.ordine_fornitore.data_inserimento,db.ordine_fornitore.listino,db.ordine_fornitore.riferimento_ordine_cliente,db.ordine_fornitore.data_ordine_fornitore,db.ordine_fornitore.pagamento, db.ordine_fornitore.ddt_completato]\r\n    righe_in_ordine_fornitore_form = SQLFORM.grid(db.ordine_fornitore,formname=\'ordini_fornitori\',maxtextlength=100,create=False,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links,fields = fields)\r\n        \r\n    return dict(ordini_fornitori_form = ordini_fornitori_form,righe_in_ordine_fornitore_form=righe_in_ordine_fornitore_form)\r\n\r\n\r\n\r\ndef ordini_clienti():\r\n    """\r\n    Selezione cliente\r\n    Inserire numerazione progressiva relativa all\'anno in corso\r\n    Data di inserimento modificabile\r\n    Inserire magazzino della carpal\r\n    Scelta listino relativo al cliente\r\n    Ordine riferimento cliente\r\n    Inserisco le righe di codice articolo e in automatico presento i dati presi da anagrafica articoli\r\n    chiedo unit\xc3\xa0 di misura\r\n    quantit\xc3\xa0 richiesta\r\n    Prezzo singolo pezzo\r\n    Codice iva\r\n    """\r\n    row = db(db.ordine_cliente).select().last()\r\n    numero_ordine = row.ultimo_codice_ordine\r\n    \r\n    \r\n    db(db.numero_ordine_cliente_progressivo).delete()\r\n    db.numero_ordine_cliente_progressivo.insert(ultimo_codice_ordine=numero_ordine)\r\n    \r\n    codice_ordine_attuale = db(db.numero_ordine_cliente_progressivo).select().first()[\'ultimo_codice_ordine\']\r\n    \r\n    import time\r\n    anno_corrente = str(time.strftime("%y"))\r\n    s=codice_ordine_attuale.split("/")\r\n    try:\r\n        #print s\r\n        if s[1] != anno_corrente:\r\n            numero_ordine = 1\r\n        else:\r\n            numero_ordine = int(s[0]) +1\r\n    except Exception,e:\r\n        #print e\r\n        numero_ordine = 1\r\n        \r\n            \r\n    codice_ordine_attuale = str(numero_ordine)+"/"+anno_corrente\r\n    \r\n    \r\n    righe_in_ordine_cliente_form=""\r\n    db.ordine_cliente.ultimo_codice_ordine.default=codice_ordine_attuale\r\n    db.ordine_cliente.ultimo_codice_ordine.writable=False\r\n    #fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.nome_cliente,db.ordine_cliente.data_inserimento,db.ordine_cliente.listino,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente,db.ordine_cliente.magazzino_interno]\r\n    fields=[\'ultimo_codice_ordine\',\'nome_cliente\',\'data_inserimento\',\'listino\',\'riferimento_ordine_cliente\',\'data_ordine_cliente\',\'magazzino_interno\',\'pagamento\',\'ente\',\'cig\',\'cup\']\r\n    \r\n    ordini_clienti_form = SQLFORM(db.ordine_cliente,formname=\'ordini_clienti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,fields=fields)\r\n    #ordini_clienti_form.element(\'.web2py_counter\', replace=None)\r\n         \r\n    #ordini_clienti_form.element(\'nome_cliente\')[\'_on_change\']=\'change_me()\'\r\n    \r\n    if ordini_clienti_form.process().accepted:\r\n        id_cliente = db(db.clienti.nome == ordini_clienti_form.vars.nome_cliente).select().first()\r\n        print "Id cliente : ",id_cliente\r\n        row = db(db.ordine_cliente.id == ordini_clienti_form.vars.id).select().first()\r\n        row.update_record(id_cliente = id_cliente.id)\r\n    \r\n        redirect(URL(\'aggiungi_righe_a_ordini_clienti\',args=ordini_clienti_form.vars.id))\r\n       \r\n    \r\n        \r\n    links=[lambda row: A(XML(\'Visualizza righe\'),_class=\'button btn btn-default\',_href=URL(\'aggiungi_righe_a_ordini_clienti\',args=row.id))]\r\n    fields=[db.ordine_cliente.id,db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.nome_cliente,db.ordine_cliente.id_cliente,db.ordine_cliente.data_inserimento,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente,db.ordine_cliente.ddt_completato,db.ordine_cliente.pagamento,db.ordine_cliente.ente]\r\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.ordine_cliente,formname=\'ordini_clienti\',maxtextlength=100,create=False,editable=True, deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links,exportclasses=export_classes,fields=fields)\r\n        \r\n    return dict(ordini_clienti_form = ordini_clienti_form,righe_in_ordine_cliente_form=righe_in_ordine_cliente_form)\r\n\r\ndef return_imposta(valore,percentuale):\r\n    #print "IN RETURN IMPOSTA ",valore,percentuale\r\n    if percentuale > 0:\r\n        return round(valore * percentuale / 100,2)\r\n    else:\r\n        return 0\r\n   \r\ndef gestione_bolli():\r\n    form = SQLFORM.grid(db.bolli,csv=False,create=True,editable=True,searchable=False,deletable=False)\r\n    return locals()\r\n    pass \r\n    \r\ndef return_currency(c):\r\n     importo = Money(str(c),"EUR")\r\n     importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n     #print "IN RETURN CURRENCY"\r\n     #print importo\r\n     return importo\r\n     \r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef stampa_ordine_fornitore(args):\r\n    \r\n    \r\n    id_ordine_fornitore=args[\'0\']\r\n    ##print "ID FORNITORE : ",id_cliente\r\n    \r\n    row = db(db.ordine_fornitore.id == id_ordine_fornitore).select().first()\r\n    id_cliente = row.id_fornitore\r\n    ultimo_codice_ordine = row.ultimo_codice_ordine\r\n    riferimento_ordine_cliente = row.riferimento_ordine_cliente\r\n    trasporto_a_mezzo = row.trasporto_a_mezzo\r\n    porto = row.porto\r\n    vettore = row.vettore\r\n    try:\r\n        domicilio = db(db.vettore.nome==vettore).select().first().domicilio\r\n    except:\r\n        domicilio = ""\r\n    """\r\n    Dati cliente\r\n    """\r\n    dati_cliente = db(db.fornitori.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    \r\n    \r\n    #print dati_cliente\r\n    \r\n    fattura = ORDINE_FORNITORE("ORDINE_FORNITORE",datetime.datetime.now().date().strftime("%d/%m/%Y"),ultimo_codice_ordine)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,pi_cliente,nazione_cliente,cf_cliente)\r\n    \r\n    \r\n    fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\r\n    \r\n    #ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    \r\n    """\r\n    Prendo le righe collegate all\'ordine fornitore ma le chiamo ddts_id per velocit\xc3\xa0 visto che ho fatto un copia e incolla dalla fattura\r\n    """\r\n    #ddts_id = db(db.righe_in_ordine_fornitore.id_ordine_fornitore==ordine_id).select()\r\n    \r\n    #for ddt_id in ddts_id:\r\n        \r\n        \r\n        \r\n    if True: #per non modificare l\'identazione    \r\n        rows = db(db.righe_in_ordine_fornitore.id_ordine_fornitore==id_ordine_fornitore).select()\r\n        \r\n        for row in rows:\r\n            """\r\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\r\n\r\n            """\r\n            \r\n            """\r\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\r\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\r\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\r\n            """\r\n            \r\n            id_ordine = row.id_ordine_fornitore\r\n            try:\r\n                  pagamento = db(db.ordine_fornitore.id == id_ordine).select().first()["pagamento"]\r\n                  #print "pagamento = ",pagamento\r\n                  if pagamento is None:\r\n                        pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                        \r\n                  giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                  scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                  scadenza = scadenza.strftime("%d/%m/%Y")\r\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\r\n            except:\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n            saved_importo = 0\r\n            #print "Aggiunta rig"\r\n            sconti = row.sconti\r\n            if row.sconti is None:\r\n                \r\n                sconti=""\r\n            if "commento" not in row.codice_articolo:\r\n                try:\r\n                    importo = saved_importo = float(row.quantita) * float(row.prezzo)\r\n                    importo = Money(str(importo),"EUR")\r\n                    importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                    prezzo = str(row.prezzo).replace(".",",")\r\n                except:\r\n                    importo = "0"\r\n                    prezzo = "0"\r\n            else:\r\n                importo = "0"\r\n                prezzo = "0"\r\n            \r\n            \r\n            \r\n            codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n            percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n            \r\n           \r\n            \r\n            \r\n            \r\n            \r\n            \r\n            if "commento" not in row.codice_articolo:\r\n                row.descrizione = db(db.anagrafica_articoli.codice_articolo == row.codice_articolo).select().first().descrizione\r\n                row.riferimento_ordine_cliente = riferimento_ordine_cliente\r\n                row.u_m = "Nr."\r\n                importo_totale +=saved_importo\r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                if not codice_iva in lista_codici_iva:\r\n                    lista_codici_iva[codice_iva] = saved_importo\r\n                else:\r\n                    lista_codici_iva[codice_iva] += saved_importo\r\n                row.evasione = row.evasione.strftime("%d/%m/%Y")\r\n            else:\r\n                row.descrizione = row.commento\r\n                row.codice_articolo = ""\r\n                row.riferimento_ordine_cliente =""\r\n                row.u_m =""\r\n                row.quantita =""\r\n                row.sconti =""\r\n                row.prezzo =""\r\n                importo =""\r\n                codice_iva =""\r\n                prezzo=""\r\n                row.evasione = ""    \r\n                \r\n            #row.u_m = db(db.anagrafica_articoli.codice_articolo == row.codice_articolo).select().first().u_m\r\n            \r\n           \r\n            \r\n            try:\r\n                fattura.add_row(row.codice_articolo,row.descrizione,row.evasione,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\r\n            except Exception,e:\r\n                #print "Eccezzione "\r\n                #print e\r\n                pass\r\n    \r\n    \r\n    ##print lista_codici_iva\r\n    \r\n    \r\n    \r\n    bollo_presente = False\r\n    bollo = 0\r\n    importo_totale = 0\r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\r\n        bollo = 0\r\n        importo_totale += importo_netto + imposta_iva        \r\n                \r\n    if bollo_presente:\r\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(bollo)\r\n     \r\n    importo_totale_da_salvare = importo_totale\r\n              \r\n    importo_totale = Money(str(importo_totale),"EUR")\r\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n    fattura.totale(str(importo_totale))\r\n    \r\n    #db.fatture_salvate.insert(data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = ddt_id.id,totale = importo_totale_da_salvare)     \r\n        \r\n        \r\n    fattura.more_info="Trasporto a mezzo  : "+str(trasporto_a_mezzo)+" Porto : "+str(porto)\r\n    fattura.more_info_2="Vettore : "+str(vettore)+"  "+str(domicilio)\r\n   \r\n    \r\n    \r\n    #fattura.footer("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\r\n    """\r\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\r\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\r\n    fattura.totale("14567645")\r\n    """\r\n    fattura.insert_rows()\r\n    \r\n        \r\n    fattura.create_pdf()\r\n\r\n\r\ndef gestione_lavorazioni():\r\n\tform = SQLFORM.grid(db.lavorazioni,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\r\n\treturn locals()\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef stampa_rcp(args):\r\n    \r\n    id_riga_in_produzione=args[\'0\']\r\n    row = db(db.articoli_in_produzione.id == id_riga_in_produzione).select().first()\r\n    \r\n    scadenza=datetime.datetime.strptime(str(row.data_consegna),"%Y-%m-%d %H:%M:%S").strftime("%d/%m/%Y")\r\n    cliente=row.cliente\r\n    riferimento_ordine=row.riferimento_ordine\r\n    codice_ordine=row.codice_ordine\r\n    codice_articolo=row.codice_articolo\r\n    descrizione=row.descrizione\r\n    saldo=row.qta_saldo\r\n    id_riga=row.id_riga\r\n    \r\n    dettaglio_ordine = db(db.ordine_cliente.ultimo_codice_ordine==codice_ordine).select().first()\r\n    \r\n    #print dettaglio_ordine\r\n    try:\r\n        ente=dettaglio_ordine.ente\r\n        if ente is None:\r\n            ente="Nessuno"\r\n    except:\r\n        ente="Nessuno"\r\n\r\n    #print "Ente : ",ente\r\n    try:\r\n        revisione = str(db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().revisione)\r\n        #print "revisione = "+ revisione\r\n    except Exception,e:\r\n    \t#print e.message\r\n        pass\r\n    \r\n    \r\n    dettagli=db(db.anagrafica_articoli.codice_articolo==codice_articolo).select().first()\r\n    giacenza=dettagli.giacenza\r\n    ubicazione=dettagli.ubicazione\r\n    cartella=dettagli.cartella_disegno\r\n    peso=dettagli.peso\r\n    if peso is None:\r\n        peso=""\r\n\r\n    p = CONTROLLO_PRODUZIONE("Microcarp S.r.l.","Registro dei Controlli in Produzione")\r\n    p.intestazione(cliente,riferimento_ordine, codice_articolo,scadenza,revisione, saldo,giacenza,ubicazione,cartella,peso)\r\n       \r\n    p.footer(str(id_riga),ente)\r\n   \r\n   \r\n    lavorazioni=db(db.lavorazioni).select()\r\n    \r\n    for lavorazione in lavorazioni:\r\n       \r\n        p.add_row(lavorazione.nome,lavorazione.controllo)\r\n    \r\n    p.insert_rows()\r\n    p.create_pdf()\r\n    \r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura(args):\r\n    \r\n    \r\n    id_cliente=args[\'0\']\r\n    #print "ID CLIENTE : ",id_cliente\r\n    \r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    \r\n    """\r\n    Dati cliente\r\n    """\r\n    \r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    iban_cliente = dati_cliente.codice_iban\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    \r\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\r\n    annotazioni=dati_cliente.annotazioni\r\n    \r\n\r\n\r\n    \r\n    \r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    for r in ddts_id:\r\n        data_scelta = r.data_emissione\r\n        \r\n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\r\n    #print "MESE : "+str(m.month)\r\n    \r\n    day_start,day_end = monthrange(m.year, m.month)\r\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\r\n    \r\n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\r\n    \r\n    \r\n    fattura = FATTURA("FATTURA DIFFERITA",start_date.strftime("%d/%m/%Y"),numero_fattura_da_salvare)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\r\n    \r\n    \r\n    try:\r\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\r\n    \r\n    except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n    \r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n    \r\n    scritta_esenzione = False\r\n    \r\n    for ddt_id in ddts_id:\r\n        \r\n        \r\n        lista_ddt.append(ddt_id.ddt_id)\r\n        \r\n        riferimento_ddt = "Rif. DDT : " + ddt_id.numero_ddt + " del " + ddt_id.data_emissione\r\n        fattura.add_row("",riferimento_ddt,"","","","","","","")\r\n        \r\n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id.ddt_id).select()\r\n        #print "DDT ID : ",ddt_id.ddt_id\r\n        \r\n        for row in rows:\r\n            """\r\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\r\n\r\n            """\r\n            \r\n            """\r\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\r\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\r\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\r\n            """\r\n            if not "commento" in row.codice_articolo:\r\n                id_ordine = row.id_ordine\r\n                try:\r\n                      try:\r\n                          pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\r\n                          #print "pagamento = ",pagamento\r\n                      except:\r\n                          pagamento = None\r\n                          \r\n                      if pagamento is None:\r\n                            pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                       \r\n                      if "F.M." in pagamento:\r\n                          fine_mese = True\r\n                      else:\r\n                          fine_mese = False\r\n                          \r\n                       \r\n                      \r\n                        \r\n                      \r\n                      \r\n                      if not fine_mese:\r\n                           try:\r\n                              giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                          \r\n                              if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                                \t   \t\r\n                              scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                              scadenza_salvata = scadenza\r\n                              scadenza = scadenza.strftime("%d/%m/%Y")\r\n                           except:\r\n                               response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                               return locals()\r\n                      else:\r\n                          \r\n                           if ("M.S." or "ms") in pagamento:\r\n                               \r\n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                               giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                               \r\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                               \r\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                               scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                               scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                               scadenza = scadenza.strftime("%d/%m/%Y") \r\n                               \r\n                           else:\r\n                               #Fine mese senza M.S.               \r\n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           \r\n                          \r\n                          \r\n                           pass\r\n                      \r\n                      \r\n                      fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),pagamento,str(scadenza))\r\n                except Exception,e:\r\n                      #print e\r\n                      response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                      return locals()\r\n                \r\n                #print "Aggiunta rig"\r\n                sconti = row.sconti\r\n                if row.sconti is None:\r\n                    \r\n                    sconti=""\r\n                    \r\n                try:\r\n                    if row.prezzo == "0":\r\n                        row.prezzo = ""\r\n                    f = float(row.prezzo)\r\n                    #print "SONO QUI : PREZZO = ".format(f)\r\n                except:\r\n                    msg = "Prezzo non presente " + riferimento_ddt + " Cod.Art : " + row.codice_articolo\r\n                    response.flash=msg\r\n                    return locals()\r\n                try:\r\n                \tf=float(row.quantita)\r\n                except:\r\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo + " Qta : " +row.qta\r\n                \tresponse.flash=msg\r\n                \treturn locals()\r\n                \tpass\r\n                \r\n                importo = saved_importo = float(row.quantita) * float(row.prezzo)\r\n                importo = Money(str(importo),"EUR")\r\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                prezzo = str(row.prezzo).replace(".",",")\r\n                \r\n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                \r\n                #print "VALLLLE " + row.codice_iva\r\n                \r\n                descrizione_codice_iva = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine, db.righe_in_ordine_cliente.n_riga==row.n_riga).select().first()["codice_iva"]\r\n                codice_iva=db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["codice_iva"]\r\n                \r\n                \r\n                row.codice_iva=codice_iva\r\n                \r\n                \r\n                if "Esenzione" in descrizione_codice_iva:\r\n                    scritta_esenzione = True\r\n                \r\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["percentuale_iva"]\r\n                \r\n                importo_totale +=saved_importo\r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                \r\n                if not codice_iva in lista_codici_iva:\r\n                    lista_codici_iva[codice_iva] = saved_importo\r\n                else:\r\n                    lista_codici_iva[codice_iva] += saved_importo\r\n            \r\n            \r\n            else:\r\n            \t"""\r\n            \tPasso il commento ma resetto tutti i campi\r\n            \t"""\r\n            \trow.riferimento_ordine=""\r\n            \trow.u_m=""\r\n            \trow.quantita=""\r\n            \tprezzo=""\r\n            \tsconti=""\r\n            \timporto=""\r\n            \tcodice_iva=""\r\n            \trow.codice_articolo=""\r\n            \t#row.descrizione=row.commento\r\n            \t\r\n            \r\n            \r\n                \r\n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\r\n            \r\n            \r\n            \r\n            \r\n            r = db(db.ddt_cliente.id == ddt_id.ddt_id).select().first()\r\n            r.update_record(fattura_emessa = "T")\r\n    \r\n    #print lista_codici_iva\r\n    \r\n    \r\n    if scritta_esenzione:\r\n        fattura.add_row("","","","","","","","","")\r\n        fattura.add_row("","","","","","","","","")\r\n        \r\n        scritte = scritta_esenzione_cliente.split(",")\r\n        \r\n        for scritta in scritte:\r\n            fattura.add_row("",scritta,"","","","","","","")\r\n    \r\n    \r\n    bollo= dati_cliente.bollo\r\n  \r\n    if bollo:\r\n\r\n        codice_articolo="BOLLO",\r\n        descrizione="art. 15 DPR 633/72",\r\n        riferimento_ordine="",\r\n        qta="1",\r\n        prezzo="2",\r\n        sconti="",\r\n        codice_iva="Esenzione Iva",\r\n        u_m="Nr"\r\n        importo="2"\r\n           \r\n\r\n        fattura.add_row(codice_articolo,descrizione,riferimento_ordine,u_m,quantita,prezzo,sconti,importo,codice_iva)\r\n        \r\n            \r\n    \r\n    \r\n    bollo_presente = False\r\n    bollo = 0\r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),"")\r\n        bollo = 0\r\n                \r\n                \r\n    if bollo:\r\n        _bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(_bollo)\r\n     \r\n    importo_totale_da_salvare = importo_totale +imposta_iva\r\n    \r\n    if not "/" in pagamento:\r\n              \r\n     \timporto_totale = Money(str(importo_totale),"EUR")\r\n      \timporto_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n     \tfattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n      \tfattura.totale(str(ritorna_prezzo_europeo(importo_totale_da_salvare)))\r\n    \r\n     \tscadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n      \tif "r.b." in pagamento.lower() or "riba" in pagamento.lower():\r\n          riba=True\r\n        else:\r\n          riba=False\r\n        db.fatture_salvate.insert(scadenza=scadenza,nome_cliente=nome_cliente,data_fattura = start_date,numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare,richiede_riba=riba,riba_emessa=False,user_id=auth.user_id)     \r\n    \r\n    else:\r\n    \t### Devo mettere due fatture con il pagamento e scadenza corretti\r\n    \t\r\n    \t\r\n    \t\r\n    \tfirst_half = round(importo_totale_da_salvare / 2,2)\r\n        second_half= importo_totale_da_salvare - first_half\r\n        \r\n        s=pagamento\r\n        \r\n        st = int(s[s.index("/")+1:s.index("/")+4]) - int(s[s.index("/")-3:s.index("/")])\r\n        second_date = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n        first_date = second_date - datetime.timedelta(days = int(st) +1)\r\n        \r\n        if "F.M" in pagamento:\r\n        \t      pass\r\n        \t      first_date = first_date.strftime("%d/%m/%Y")\r\n                  #day_start,day_end = monthrange(first_date.year, first_date.month)\r\n                  #first_date = str(day_end)+"/"+str(first_date.month)+"/"+str(first_date.year)\r\n              \r\n        else:\r\n                  first_date = first_date.strftime("%d/%m/%Y")\r\n                  \r\n        second_date = second_date.strftime("%d/%m/%Y")\r\n    \t\r\n    \tif "r.b." in pagamento.lower() or "riba" in pagamento.lower():\r\n          riba=True\r\n        else:\r\n          riba=False\r\n          \r\n        first_date = datetime.datetime.strptime(first_date,"%d/%m/%Y")\r\n        second_date = datetime.datetime.strptime(second_date,"%d/%m/%Y")\r\n        \r\n        \r\n        importo_totale = Money(str(importo_totale),"EUR")\r\n      \timporto_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n     \tfattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n      \tfattura.totale(str(ritorna_prezzo_europeo(importo_totale_da_salvare)))\r\n        \r\n        db.fatture_salvate.insert(scadenza=first_date,nome_cliente=nome_cliente,data_fattura = start_date,numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = first_half,richiede_riba=riba,riba_emessa=False,user_id=auth.user_id)\r\n        db.fatture_salvate.insert(scadenza=second_date,nome_cliente=nome_cliente,data_fattura = start_date,numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = second_half,richiede_riba=riba,riba_emessa=False,user_id=auth.user_id)\r\n        \r\n    \t\r\n    \r\n    \r\n    #print "SCADENZA {0}".format(scadenza)    \r\n        \r\n    \r\n   \r\n    \r\n    """\r\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\r\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\r\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\r\n    fattura.totale("14567645")\r\n    """\r\n    \r\n    fattura.add_row("","","","","","","","","")\r\n    fattura.add_row("",annotazioni,"","","","","","","")\r\n    \r\n    fattura.insert_rows()\r\n    fattura.create_pdf()\r\n    \r\n    db(db.fattura).delete()\r\n    db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\r\n    db(db.ddt_da_fatturare.user_id == auth.user_id).delete()\r\n   \r\ndef return_scadenza(fattura_id):\r\n    ddts = db(db.fatture_salvate.id == fattura_id).select().first()["id_ddt"]\r\n    ddts_list = eval(ddts)\r\n    scadenza=""\r\n    start_date = datetime.datetime.strptime("28/02/2017","%d/%m/%Y")\r\n    for ddt in ddts_list:\r\n        \r\n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id ==ddt).select()\r\n        #print "DDT ID : ",ddt\r\n        \r\n        for row in rows:\r\n            """\r\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\r\n\r\n            """\r\n            \r\n            """\r\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\r\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\r\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\r\n            """\r\n            \r\n            id_ordine = row.id_ordine\r\n            try:\r\n                  try:\r\n                      pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\r\n                      #print "pagamento = ",pagamento\r\n                  except:\r\n                      pagamento = None\r\n                      \r\n                  if pagamento is None:\r\n                        pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                   \r\n                  if "F.M." in pagamento:\r\n                      fine_mese = True\r\n                  else:\r\n                      fine_mese = False\r\n                      \r\n                   \r\n                  \r\n                    \r\n                  \r\n                  \r\n                  if not fine_mese:\r\n                       try:\r\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                      \r\n                      \r\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                          scadenza_salvata = scadenza\r\n                          scadenza = scadenza.strftime("%d/%m/%Y")\r\n                       except:\r\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                           return locals()\r\n                  else:\r\n                      \r\n                       if "M.S." in pagamento:\r\n                           \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                           scadenza = scadenza.date() + datetime.timedelta(days = 10)\r\n                           scadenza = scadenza.strftime("%d/%m/%Y") \r\n                           \r\n                       else:\r\n                                          \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                       \r\n                      \r\n                      \r\n            except Exception,e:\r\n                 #print e\r\n                 pass          \r\n        \r\n        \r\n    \r\n    \r\n    return scadenza\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_preview(args):\r\n    \r\n    \r\n    id_cliente=args[\'0\']\r\n    ##print "ID CLIENTE : ",id_cliente\r\n    \r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    \r\n    ##print "qui"\r\n    \r\n    """\r\n    Dati cliente\r\n    """\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    iban_cliente = dati_cliente.codice_iban\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\r\n    \r\n    annotazioni=dati_cliente.annotazioni\r\n    \r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    for r in ddts_id:\r\n        data_scelta = r.data_emissione\r\n        \r\n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\r\n    #print "MESE : "+str(m.month)\r\n    \r\n    day_start,day_end = monthrange(m.year, m.month)\r\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\r\n    \r\n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\r\n    print "-- DATE CHECK --"\r\n    print start_date\r\n    \r\n    \r\n    \r\n    fattura = FATTURA("FATTURA DIFFERITA",start_date.strftime("%d/%m/%Y"),numero_fattura_da_salvare,anteprima=True)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\r\n    \r\n    \r\n    \r\n    try:\r\n        ##print "IBAN : ",iban_cliente\r\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),"PAGAMENTO","SCADENZA")\r\n    \r\n    except:\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n    \r\n    \r\n    \r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n    \r\n    for ddt_id in ddts_id:\r\n        \r\n        \r\n        lista_ddt.append(ddt_id.ddt_id)\r\n        \r\n        riferimento_ddt = "Rif. DDT : " + ddt_id.numero_ddt + " del " + ddt_id.data_emissione\r\n        \r\n        fattura.add_row("",riferimento_ddt,"","","","","","","")\r\n        print ddt_id\r\n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id.ddt_id).select()\r\n        print "PAst creation ---##"\r\n        #print "DDT ID : ",ddt_id.ddt_id\r\n       \r\n        scritta_esenzione = False\r\n        \r\n        for row in rows:\r\n            print row\r\n            """\r\n            <Row {\'n_riga\': \'3\', \'prezzo\': \'8.9919\', \'saved_ddt_id\': \'21\', \'quantita\': \'11\', \'evasione\': datetime.datetime(2017, 1, 31, 8, 56), \'id\': 10L, \'codice_articolo\': \'892069925\', \'codice_iva\': \'Iva 22%\', \'descrizione\': \'FLANGIA\', \'sconti\': None, \'u_m\': \'Nr\', \'user_id\': \'1\', \'codice_ordine\': \'1/17\', \'id_ordine\': \'26\', \'riferimento_ordine\': \'fdsfsdf\'}>\r\n\r\n            """\r\n            \r\n            """\r\n            La riga del ddt contiene i dati relativi all\'ordine (id_ordine)\r\n            siccome il pagamento pu\xc3\xb2 essere modificato bisogna risalire all\'ordine\r\n            poi al tipo di pagamento, poi ai giorni e calcolare la data\r\n            """\r\n            if not "commento" in row.codice_articolo:\r\n                id_ordine = row.id_ordine\r\n                try:\r\n                      \r\n                      try:\r\n                          pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\r\n                          #print "pagamento = ",pagamento\r\n                      except:\r\n                          pagamento = None\r\n                      \r\n                      \r\n                      \r\n                      if pagamento is None:\r\n                            pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                       \r\n                      if "F.M." in pagamento:\r\n                          fine_mese = True\r\n                      else:\r\n                          fine_mese = False\r\n                          \r\n                       \r\n                      \r\n                        \r\n                    \r\n                     \r\n                      if not fine_mese:\r\n                          \r\n                          try:\r\n                              giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                              \r\n                              if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                          \r\n                              scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                              scadenza_salvata = scadenza\r\n                              scadenza = scadenza.strftime("%d/%m/%Y")\r\n                          except:\r\n                               response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                               return locals()\r\n                              \r\n                      else:\r\n                          \r\n                           if ("M.S." or "ms") in pagamento:\r\n                               \r\n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                               \r\n                               giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                               scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                               scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                               scadenza = scadenza.strftime("%d/%m/%Y") \r\n                               \r\n                           else:\r\n                               #Fine mese senza M.S.               \r\n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                               \r\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                              \r\n                                       \r\n                          \r\n                           \r\n                      \r\n                      \r\n                      fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),pagamento,str(scadenza))\r\n                except Exception,e:\r\n                      #print e\r\n                      response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                      return locals()\r\n                \r\n                #print "Aggiunta rig"\r\n                sconti = row.sconti\r\n                if row.sconti is None:\r\n                    \r\n                    sconti=""\r\n                \r\n                try:\r\n                    if row.prezzo == "0":\r\n                        row.prezzo = ""\r\n                    f = float(row.prezzo)\r\n                    #print "SONO QUI : PREZZO = ".format(f)\r\n                except:\r\n                    msg = "Prezzo non presente " + riferimento_ddt + " Cod.Art : " + row.codice_articolo\r\n                    response.flash=msg\r\n                    return locals()\r\n                   \r\n                try:\r\n                \tf=float(row.quantita)\r\n                except:\r\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo + " Qta : "\r\n                \tresponse.flash=msg\r\n                \treturn locals()\r\n                \tpass\r\n                \r\n                importo = saved_importo = float(row.quantita) * float(row.prezzo)\r\n                \r\n                importo = Money(str(importo),"EUR")\r\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                prezzo = str(row.prezzo).replace(".",",")\r\n                \r\n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                \r\n                #print "VALLLLE " + row.codice_iva\r\n                \r\n                descrizione_codice_iva = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine, db.righe_in_ordine_cliente.n_riga==row.n_riga).select().first()["codice_iva"]\r\n                codice_iva=db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["codice_iva"]\r\n                \r\n                \r\n                row.codice_iva=codice_iva\r\n                \r\n                \r\n                #print "Nuovo codice iva : "+row.codice_iva\r\n                \r\n                if "Esenzione" in descrizione_codice_iva:\r\n                    scritta_esenzione = True\r\n                \r\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == descrizione_codice_iva).select().first()["percentuale_iva"]\r\n                \r\n                importo_totale +=saved_importo\r\n                \r\n               \r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                \r\n                if not codice_iva in lista_codici_iva:\r\n                    lista_codici_iva[codice_iva] = saved_importo\r\n                else:\r\n                    lista_codici_iva[codice_iva] += saved_importo\r\n                \r\n             \r\n                \r\n            else:\r\n            \t"""\r\n            \tPasso il commento ma resetto tutti i campi\r\n            \t"""\r\n            \t#print row\r\n            \trow.riferimento_ordine=""\r\n            \trow.u_m=""\r\n            \trow.quantita=""\r\n            \tprezzo=""\r\n            \tsconti=""\r\n            \timporto=""\r\n            \tcodice_iva=""\r\n            \trow.codice_articolo=""\r\n            \t#row.descrizione=row.commento\r\n            \t\r\n            \t\r\n            \t\r\n            \t\r\n            \t\r\n            \r\n            \r\n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\r\n        \r\n    \r\n    \r\n    #print lista_codici_iva\r\n    \r\n    \r\n   \r\n            \r\n        \r\n    bollo= dati_cliente.bollo\r\n  \r\n    if bollo:\r\n        print "SONO NEL BOLLO"\r\n        codice_articolo="BOLLO"\r\n        descrizione="art. 15 DPR 633/72"\r\n        riferimento_ordine=""\r\n        quantita="1"\r\n        prezzo="2"\r\n        sconti=""\r\n        codice_iva="53"\r\n        u_m="Nr"\r\n        importo="2"\r\n           \r\n\r\n        fattura.add_row(codice_articolo,descrizione,riferimento_ordine,u_m,quantita,prezzo,sconti,importo,codice_iva)\r\n        if not "Esenzione Iva" in lista_codici_iva:\r\n                    lista_codici_iva["Esenzione Iva"] = 2\r\n                else:\r\n                    lista_codici_iva["Esenzione Iva"] +=2\r\n        \r\n            \r\n    if scritta_esenzione:\r\n        fattura.add_row("","","","","","","","","")\r\n        fattura.add_row("","","","","","","","","")\r\n        \r\n        scritte = scritta_esenzione_cliente.split(",")\r\n        \r\n        for scritta in scritte:\r\n            fattura.add_row("",scritta,"","","","","","","") \r\n    \r\n    bollo_presente = False\r\n   \r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),"")\r\n        \r\n                \r\n                \r\n    if bollo:\r\n        _bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(_bollo)    \r\n     \r\n   \r\n     \r\n    importo_totale_da_salvare = importo_totale +imposta_iva\r\n    #print "Imposta iva {0}".format(imposta_iva)\r\n    #print "Importo calcolato {0}".format(importo_totale_da_salvare)\r\n    \r\n              \r\n    importo_totale = Money(str(importo_totale),"EUR")\r\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n    fattura.totale(str(ritorna_prezzo_europeo(importo_totale_da_salvare)))\r\n    \r\n    #db.fatture_salvate.insert(scadenza=scadenza_salvata,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \r\n    \r\n    ##print "SCADENZA {0}".format(scadenza)    \r\n        \r\n    \r\n   \r\n    \r\n    """\r\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\r\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\r\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\r\n    fattura.totale("14567645")\r\n    """\r\n    \r\n    fattura.add_row("","","","","","","","","")\r\n    fattura.add_row("",annotazioni,"","","","","","","")\r\n    \r\n    fattura.insert_rows()\r\n    fattura.create_pdf()\r\n    \r\n    #db(db.fattura).delete()\r\n    #db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_preview_istantanea(args):\r\n    \r\n    \r\n    id_cliente=args[\'0\']\r\n    #print "ID CLIENTE : ",id_cliente\r\n    \r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    \r\n   \r\n    """\r\n    Dati cliente\r\n    """\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    annotazioni=dati_cliente.annotazioni\r\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\r\n\r\n\r\n   \r\n    bollo= dati_cliente.bollo\r\n  \r\n    if bollo:\r\n        db(db.righe_in_fattura_istantanea.codice_articolo=="BOLLO").delete()\r\n        db.righe_in_fattura_istantanea.insert(\r\n            codice_articolo="BOLLO",\r\n            descrizione="art. 15 DPR 633/72",\r\n            riferimento_ordine="",\r\n            qta="1",\r\n            prezzo="2",\r\n            sconti="",\r\n            codice_iva="Esenzione Iva",\r\n            commento=""\r\n   \r\n            \r\n            )\r\n     \r\n\r\n    scritta_esenzione = False\r\n    #print "1"\r\n    #print dettagli_banca\r\n    #print "2"\r\n    \r\n    start_date = datetime.datetime.now()\r\n    \r\n    fattura = FATTURA("FATTURA IMMEDIATA",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare,anteprima=True)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\r\n    \r\n    try:\r\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\r\n        \r\n    except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\r\n                  return locals()\r\n    \r\n    \r\n    \r\n    \r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n\r\n    scritta_esenzione = False\r\n\r\n    \r\n    \r\n\r\n    if True:\r\n        \r\n        rows = db(db.righe_in_fattura_istantanea).select()\r\n        \r\n        for row in rows:\r\n            \r\n            try:\r\n                 \r\n                  \r\n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                        \r\n                  if "F.M." in pagamento:\r\n                      fine_mese = True\r\n                  else:\r\n                      fine_mese = False\r\n                      \r\n                   \r\n                  \r\n                    \r\n                  \r\n                  \r\n                  if not fine_mese:\r\n                       try:\r\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                          if start_date.date().month==12 or start_date.date().month==1:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                      \r\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                          scadenza_salvata = scadenza\r\n                          scadenza = scadenza.strftime("%d/%m/%Y")\r\n                       except:\r\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                           return locals()\r\n                  else:\r\n                      \r\n                       if ("M.S." or "ms") in pagamento:\r\n                           \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                           scadenza = scadenza.strftime("%d/%m/%Y") \r\n                           \r\n                       else:\r\n                           #Fine mese senza M.S.               \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           \r\n                           if start_date.date().month==12 or start_date.date().month==1:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                           \r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                       \r\n                      \r\n                      \r\n                       pass \r\n                   \r\n                   \r\n                  \r\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\r\n            except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n            \r\n            \r\n            sconti = row.sconti\r\n            if row.sconti is None:\r\n                \r\n                sconti=""\r\n            \r\n            if len(row.codice_articolo) > 0 and not \'commento\' in row.codice_articolo:\r\n                try:\r\n                    if row.prezzo == "0":\r\n                        row.prezzo = ""\r\n                    f = float(row.prezzo)\r\n                    #print "SONO QUI : PREZZO = ".format(f)\r\n                except:\r\n                    msg = "Prezzo non presente Cod.Art : " + row.codice_articolo\r\n                    response.flash=msg\r\n                    return locals()\r\n                   \r\n                try:\r\n                \tf=float(row.qta)\r\n                except:\r\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\r\n                \tresponse.flash=msg\r\n                \treturn locals()\r\n                \tpass\r\n            \r\n                importo = saved_importo = float(row.qta) * float(row.prezzo)\r\n                importo = Money(str(importo),"EUR")\r\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                prezzo = str(row.prezzo).replace(".",",")\r\n                \r\n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n                descrizione_codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["descrizione_codice_iva"]\r\n                if "Esenzione" in descrizione_codice_iva:\r\n                    scritta_esenzione = True\r\n                \r\n                importo_totale +=saved_importo\r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                \r\n                if not codice_iva in lista_codici_iva:\r\n                    lista_codici_iva[codice_iva] = saved_importo\r\n                else:\r\n                    lista_codici_iva[codice_iva] += saved_importo\r\n            \r\n            else:\r\n                row.u_m,row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","","",""\r\n            \trow.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","",""\r\n                row.descrizione=row.commento\r\n                row.u_m=""\r\n            \r\n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\r\n        \r\n    \r\n    \r\n    #print lista_codici_iva\r\n\r\n\r\n    if scritta_esenzione:\r\n        fattura.add_row("","","","","","","","","")\r\n        fattura.add_row("","","","","","","","","")\r\n        \r\n        scritte = scritta_esenzione_cliente.split(",")\r\n        \r\n        for scritta in scritte:\r\n            fattura.add_row("",scritta,"","","","","","","")\r\n    \r\n    \r\n    scadenza=""\r\n    bollo_presente = False\r\n    bollo = 0\r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),"")\r\n        bollo = 0\r\n                \r\n    """            \r\n    if bollo_presente:\r\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(bollo)\r\n    """ \r\n    importo_totale_da_salvare = importo_totale +imposta_iva\r\n    \r\n    \r\n              \r\n    importo_totale = Money(str(importo_totale),"EUR")\r\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n    fattura.totale(str(importo_totale_da_salvare))\r\n    \r\n    #db.fatture_salvate.insert(scadenza=scadenza_salvata,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \r\n    \r\n    #print "SCADENZA {0}".format(scadenza)    \r\n        \r\n    \r\n   \r\n    \r\n    """\r\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\r\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\r\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\r\n    fattura.totale("14567645")\r\n    """\r\n    fattura.add_row("","","","","","","","","")\r\n    fattura.add_row("",annotazioni,"","","","","","","")\r\n    fattura.insert_rows()\r\n    fattura.create_pdf()\r\n    \r\n    #db(db.fattura).delete()\r\n    #db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_preview_istantanea_accredito(args):\r\n    \r\n    #print "In preview instantanea accredito"\r\n    id_cliente=args[\'0\']\r\n    #print "ID CLIENTE : ",id_cliente\r\n    \r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    \r\n   \r\n    """\r\n    Dati cliente\r\n    """\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    annotazioni=dati_cliente.annotazioni\r\n    \r\n    \r\n    #print "1"\r\n    #print dettagli_banca\r\n    #print "2"\r\n    \r\n    \r\n    start_date = datetime.datetime.now()\r\n    \r\n    fattura = FATTURA("NOTA DI ACCREDITO",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare,anteprima=True)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\r\n    \r\n    try:\r\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\r\n        \r\n    except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\r\n                  return locals()\r\n    \r\n    \r\n    \r\n    \r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n    if True:\r\n        \r\n        rows = db(db.righe_in_fattura_istantanea).select()\r\n        \r\n        for row in rows:\r\n            \r\n            try:\r\n                 \r\n                  \r\n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                        \r\n                  if "F.M." in pagamento:\r\n                      fine_mese = True\r\n                  else:\r\n                      fine_mese = False\r\n                      \r\n                   \r\n                  \r\n                    \r\n                  \r\n                  \r\n                  if not fine_mese:\r\n                       try:\r\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                      \r\n                      \r\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                          scadenza_salvata = scadenza\r\n                          scadenza = scadenza.strftime("%d/%m/%Y")\r\n                       except:\r\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                           return locals()\r\n                  else:\r\n                      \r\n                       if ("M.S." or "ms") in pagamento:\r\n                           \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                           scadenza = scadenza.strftime("%d/%m/%Y") \r\n                           \r\n                       else:\r\n                           #Fine mese senza M.S.               \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                       \r\n                      \r\n                      \r\n                       pass \r\n                   \r\n                   \r\n                  \r\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\r\n            except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n            \r\n            \r\n            sconti = row.sconti\r\n            if row.sconti is None:\r\n                \r\n                sconti=""\r\n            \r\n            if len(row.codice_articolo) > 0 and not \'commento\' in row.codice_articolo:\r\n                try:\r\n                    if row.prezzo == "0":\r\n                        row.prezzo = ""\r\n                    f = float(row.prezzo)\r\n                    #print "SONO QUI : PREZZO = ".format(f)\r\n                except:\r\n                    msg = "Prezzo non presente   Cod.Art : " + row.codice_articolo\r\n                    response.flash=msg\r\n                    return locals()\r\n            \r\n                try:\r\n                \tf=float(row.qta)\r\n                except:\r\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\r\n                \tresponse.flash=msg\r\n                \treturn locals()\r\n                \tpass\r\n                \t\r\n                \r\n                importo = saved_importo = float(row.qta) * float(row.prezzo)\r\n                importo = Money(str(importo),"EUR")\r\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                prezzo = str(row.prezzo).replace(".",",")\r\n                \r\n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n                \r\n                importo_totale +=saved_importo\r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                \r\n                if not codice_iva in lista_codici_iva:\r\n                    lista_codici_iva[codice_iva] = saved_importo\r\n                else:\r\n                    lista_codici_iva[codice_iva] += saved_importo\r\n            \r\n            else:\r\n                row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","",""\r\n                row.descrizione=row.commento\r\n            \r\n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\r\n        \r\n    \r\n    \r\n    #print lista_codici_iva\r\n    \r\n    \r\n    scadenza=""\r\n    bollo_presente = False\r\n    bollo = 0\r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\r\n        bollo = 0\r\n                \r\n                \r\n    if bollo_presente:\r\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(bollo)\r\n     \r\n    importo_totale_da_salvare = importo_totale +imposta_iva\r\n    \r\n    \r\n    #print "Importo totale "+str(importo_totale_da_salvare)      \r\n    importo_totale = Money(str(importo_totale),"EUR")\r\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n    fattura.totale(str(importo_totale_da_salvare))\r\n    \r\n    #db.fatture_salvate.insert(scadenza=scadenza_salvata,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \r\n    \r\n    #print "SCADENZA {0}".format(scadenza)    \r\n        \r\n    \r\n   \r\n    \r\n    """\r\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\r\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\r\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\r\n    fattura.totale("14567645")\r\n    """\r\n    fattura.add_row("","","","","","","","","")\r\n    fattura.add_row("",annotazioni,"","","","","","","")\r\n    \r\n    fattura.insert_rows()\r\n    fattura.create_pdf()\r\n    \r\n    #db(db.fattura).delete()\r\n    #db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_istantanea(args):\r\n    \r\n    \r\n    id_cliente=args[\'0\']\r\n    #print "ID CLIENTE : ",id_cliente\r\n    \r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    \r\n   \r\n    """\r\n    Dati cliente\r\n    """\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    annotazioni=dati_cliente.annotazioni\r\n\r\n    bollo= dati_cliente.bollo\r\n  \r\n    if bollo:\r\n        db(db.righe_in_fattura_istantanea.codice_articolo=="BOLLO").delete()\r\n        db.righe_in_fattura_istantanea.insert(\r\n            codice_articolo="BOLLO",\r\n            descrizione="art. 15 DPR 633/72",\r\n            riferimento_ordine="",\r\n            qta="1",\r\n            prezzo="2",\r\n            sconti="",\r\n            codice_iva="Esenzione Iva",\r\n            commento=""\r\n   \r\n            \r\n            )\r\n    \r\n    \r\n    scritta_esenzione = False\r\n    #print "1"\r\n    #print dettagli_banca\r\n    #print "2"\r\n    \r\n    start_date = datetime.datetime.now()\r\n    \r\n    fattura = FATTURA("FATTURA IMMEDIATA",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\r\n    \r\n    try:\r\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\r\n        \r\n    except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\r\n                  return locals()\r\n    \r\n    \r\n    \r\n    \r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n    if True:\r\n        \r\n        rows = db(db.righe_in_fattura_istantanea).select()\r\n        \r\n        for row in rows:\r\n            \r\n            try:\r\n                 \r\n                  \r\n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                        \r\n                  if "F.M." in pagamento:\r\n                      fine_mese = True\r\n                  else:\r\n                      fine_mese = False\r\n                      \r\n                   \r\n                  \r\n                    \r\n                  \r\n                  \r\n                  if not fine_mese:\r\n                       try:\r\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                      \r\n                      \r\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                          scadenza_salvata = scadenza\r\n                          scadenza = scadenza.strftime("%d/%m/%Y")\r\n                       except:\r\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                           return locals()\r\n                  else:\r\n                      \r\n                       if ("M.S." or "ms") in pagamento:\r\n                           \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                           scadenza = scadenza.strftime("%d/%m/%Y") \r\n                           \r\n                       else:\r\n                           #Fine mese senza M.S.               \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                       \r\n                      \r\n                      \r\n                       pass \r\n                   \r\n                   \r\n                  \r\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\r\n            except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n            \r\n            \r\n            sconti = row.sconti\r\n            if row.sconti is None:\r\n                \r\n                sconti=""\r\n            \r\n            if len(row.codice_articolo) > 0 and \'commento\' not in row.codice_articolo:\r\n                try:\r\n                    if row.prezzo == "0":\r\n                        row.prezzo = ""\r\n                    f = float(row.prezzo)\r\n                    #print "SONO QUI : PREZZO = ".format(f)\r\n                except:\r\n                    msg = "Prezzo non presente  Cod.Art : " + row.codice_articolo\r\n                    response.flash=msg\r\n                    return locals()\r\n                   \r\n                try:\r\n                \tf=float(row.qta)\r\n                except:\r\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\r\n                \tresponse.flash=msg\r\n                \t#print "!QWUEIQWEUQWUE"\r\n                \treturn locals()\r\n                \tpass\r\n            \r\n                importo = saved_importo = float(row.qta) * float(row.prezzo)\r\n                importo = Money(str(importo),"EUR")\r\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                prezzo = str(row.prezzo).replace(".",",")\r\n                \r\n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n\r\n                descrizione_codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["descrizione_codice_iva"]\r\n                if "Esenzione" in descrizione_codice_iva:\r\n                    scritta_esenzione = True\r\n               \r\n                \r\n                importo_totale +=saved_importo\r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                \r\n                if not codice_iva in lista_codici_iva:\r\n                    lista_codici_iva[codice_iva] = saved_importo\r\n                else:\r\n                    lista_codici_iva[codice_iva] += saved_importo\r\n            \r\n            else:\r\n                row.u_m,row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","","",""\r\n                row.descrizione=row.commento\r\n            \r\n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\r\n        \r\n    \r\n    if scritta_esenzione:\r\n        scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\r\n        fattura.add_row("","","","","","","","","")\r\n        fattura.add_row("","","","","","","","","")\r\n        scritte = scritta_esenzione_cliente.split(",")\r\n        \r\n        for scritta in scritte:\r\n            fattura.add_row("",scritta,"","","","","","","")\r\n    #print lista_codici_iva\r\n    \r\n    \r\n    \r\n    bollo_presente = False\r\n    bollo = 0\r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\r\n        bollo = 0\r\n                \r\n    """            \r\n    if bollo_presente:\r\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(bollo)\r\n    """\r\n\r\n    importo_totale_da_salvare = importo_totale +imposta_iva\r\n    \r\n    \r\n              \r\n    importo_totale = Money(str(importo_totale),"EUR")\r\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n    fattura.totale(str(importo_totale_da_salvare))\r\n    \r\n    lista_ddt=[] #Fattura senza ddt = istantanea\r\n    \r\n    db.fatture_salvate.insert(scadenza=scadenza,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \r\n    \r\n    #print "SCADENZA {0}".format(scadenza)    \r\n        \r\n    \r\n   \r\n    \r\n    """\r\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\r\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\r\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\r\n    fattura.totale("14567645")\r\n    """\r\n    fattura.add_row("","","","","","","","","")\r\n    fattura.add_row("",annotazioni,"","","","","","","")\r\n    \r\n    fattura.insert_rows()\r\n    fattura.create_pdf()\r\n    \r\n    db(db.fattura).delete()\r\n    db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_istantanea_accredito(args):\r\n    \r\n    \r\n    id_cliente=args[\'0\']\r\n    #print "ID CLIENTE : ",id_cliente\r\n    \r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    \r\n   \r\n    """\r\n    Dati cliente\r\n    """\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    annotazioni=dati_cliente.annotazioni\r\n    \r\n    \r\n    #print "1"\r\n    #print dettagli_banca\r\n    #print "2"\r\n    \r\n    start_date = datetime.datetime.now()\r\n    \r\n    fattura = FATTURA("NOTA DI ACCREDITO",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\r\n    \r\n    try:\r\n        fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADENZA")\r\n        \r\n    except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica cliente"\r\n                  return locals()\r\n    \r\n    \r\n    \r\n    \r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n    if True:\r\n        \r\n        rows = db(db.righe_in_fattura_istantanea).select()\r\n        \r\n        for row in rows:\r\n            \r\n            try:\r\n                 \r\n                  \r\n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                        \r\n                  if "F.M." in pagamento:\r\n                      fine_mese = True\r\n                  else:\r\n                      fine_mese = False\r\n                      \r\n                   \r\n                  \r\n                    \r\n                  \r\n                  \r\n                  if not fine_mese:\r\n                       try:\r\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                      \r\n                      \r\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                          scadenza_salvata = scadenza\r\n                          scadenza = scadenza.strftime("%d/%m/%Y")\r\n                       except:\r\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                           return locals()\r\n                  else:\r\n                      \r\n                       if ("M.S." or "ms") in pagamento:\r\n                           \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                           scadenza = scadenza.strftime("%d/%m/%Y") \r\n                           \r\n                       else:\r\n                           #Fine mese senza M.S.               \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                       \r\n                      \r\n                      \r\n                       pass \r\n                   \r\n                   \r\n                  \r\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\r\n            except Exception,e:\r\n                  #print e\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n            \r\n            \r\n            sconti = row.sconti\r\n            if row.sconti is None:\r\n                \r\n                sconti=""\r\n            \r\n            if len(row.codice_articolo) > 0 and not \'commento\' in row.codice_articolo:\r\n                try:\r\n                    if row.prezzo == "0":\r\n                        row.prezzo = ""\r\n                    f = float(row.prezzo)\r\n                    #print "SONO QUI : PREZZO = ".format(f)\r\n                except:\r\n                    msg = "Prezzo non presente  Cod.Art : " + row.codice_articolo\r\n                    response.flash=msg\r\n                    return locals()\r\n                   \r\n                   \r\n                try:\r\n                \tf=float(row.qta)\r\n                except:\r\n                \tmsg = "Quantit\xc3\xa0 non valida Cod.Art : " + row.codice_articolo\r\n                \tresponse.flash=msg\r\n                \treturn locals()\r\n                \tpass\r\n            \r\n                importo = saved_importo = float(row.qta) * float(row.prezzo)\r\n                importo = Money(str(importo),"EUR")\r\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                prezzo = str(row.prezzo).replace(".",",")\r\n                \r\n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n                \r\n                importo_totale +=saved_importo\r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                \r\n                if not codice_iva in lista_codici_iva:\r\n                    lista_codici_iva[codice_iva] = saved_importo\r\n                else:\r\n                    lista_codici_iva[codice_iva] += saved_importo\r\n            \r\n            else:\r\n                row.codice_articolo,prezzo,sconti,importo,codice_iva,row.riferimento_ordine,row.qta = "","","","","","",""\r\n                row.descrizione=row.commento\r\n                row.u_m=""\r\n            \r\n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.qta,prezzo,sconti,importo,codice_iva)\r\n        \r\n    \r\n    \r\n    #print lista_codici_iva\r\n    \r\n    \r\n    \r\n    bollo_presente = False\r\n    bollo = 0\r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\r\n        bollo = 0\r\n                \r\n                \r\n    if bollo_presente:\r\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(bollo)\r\n     \r\n    importo_totale_da_salvare = importo_totale +imposta_iva\r\n    \r\n    \r\n              \r\n    importo_totale = Money(str(importo_totale),"EUR")\r\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n    fattura.totale(str(importo_totale_da_salvare))\r\n    \r\n    lista_ddt=[] #Fattura senza ddt = istantanea\r\n    \r\n    db.fatture_salvate.insert(scadenza=scadenza,nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \r\n    \r\n    #print "SCADENZA {0}".format(scadenza)    \r\n        \r\n    \r\n   \r\n    \r\n    """\r\n    fattura.foote,Field(\'nome_cliente\')sr("Totale merce","Sconto","Netto merce","spese varie","spese_trasporto","totale_imponibile","Totale imposta")\r\n    fattura.footer_2("CodIva","Spese accessorie","Imponibile","Iva","Imposta","Bolli")\r\n    fattura.footer_2("CodIva2","Spese accessorie2","Imponibile2","Iva2","Imposta2","Bolli2")\r\n    fattura.totale("14567645")\r\n    """\r\n    fattura.add_row("","","","","","","","","")\r\n    fattura.add_row("",annotazioni,"","","","","","","")\r\n    fattura.insert_rows()\r\n    fattura.create_pdf()\r\n    \r\n    db(db.fattura).delete()\r\n    db.fattura.insert(numero_fattura = numero_fattura_da_salvare)\r\n\r\ndef ritorna_righe_in_ddt(id_ddt):\r\n    righe = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt).select()\r\n    r=[]\r\n    \r\n    for riga in righe:\r\n        r.append(riga.codice_articolo+"\\n")\r\n    \r\n    return r\r\n\r\ndef del_saved_rows(table, row_id):\r\n    db(db.saved_righe_in_ddt_cliente.saved_ddt_id == row_id).delete()\r\n    return "ok"\r\n\r\ndef del_ddt_clienti():\r\n    db.ddt_cliente.righe=Field.Virtual("righe", lambda row: ritorna_righe_in_ddt(row.ddt_cliente.id))\r\n    \r\n    fields = [db.ddt_cliente.nome_cliente,db.ddt_cliente.data_richiesta,db.ddt_cliente.numero_ddt,db.ddt_cliente.righe]\r\n    form = SQLFORM.grid(db.ddt_cliente,formname=\'del\',maxtextlength=100,create=False,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,fields=fields,ondelete=del_saved_rows)\r\n    return locals()\r\n\r\ndef controllo_errori():\r\n    db(db.errori).delete()\r\n    \r\n    \r\n    \r\n    clienti = db(db.clienti).select()\r\n    for cliente in clienti:\r\n        if cliente.codice_banca is None or len(cliente.codice_banca)<1:\r\n            errore = "Codice banca assente per il cliente {0}".format(cliente.nome)\r\n            db.errori.insert(tipo_errore = errore)\r\n        else:\r\n             banca_cliente =cliente.codice_banca\r\n             dati_banca_cliente = db(db.anagrafica_banche.descrizione == banca_cliente).select().first()\r\n             if dati_banca_cliente is None:\r\n\t\t     errore = "Banca non in anagrafica per il cliente {0}".format(cliente.nome)\r\n\t\t     db.errori.insert(tipo_errore = errore)\r\n             \r\n            \r\n            \r\n        if cliente.citta is None or len(cliente.citta)<1:\r\n            errore = "Citt\xc3\xa0 assente per il cliente {0}".format(cliente.nome)\r\n            db.errori.insert(tipo_errore = errore)\r\n            \r\n        if cliente.pagamento is None or len(cliente.pagamento)<1:\r\n            errore = "Pagamento assente per il cliente {0}".format(cliente.nome)\r\n            db.errori.insert(tipo_errore = errore)\r\n    \r\n    \r\n    clienti = db(db.fornitori).select()\r\n    for cliente in clienti:\r\n        if cliente.codice_banca is None or len(cliente.codice_banca)<1:\r\n            errore = "Codice banca assente per il fornitore {0}".format(cliente.nome)\r\n            db.errori.insert(tipo_errore = errore)\r\n            \r\n        if cliente.citta is None or len(cliente.citta)<1:\r\n            errore = "Citt\xc3\xa0 assente per il fornitore {0}".format(cliente.nome)\r\n            db.errori.insert(tipo_errore = errore)\r\n            \r\n        if cliente.pagamento is None or len(cliente.pagamento)<1:\r\n            errore = "Pagamento assente per il fornitore {0}".format(cliente.nome)\r\n            db.errori.insert(tipo_errore = errore)\r\n    \r\n    \r\n    clienti = db(db.anagrafica_banche).select()\r\n    for cliente in clienti:\r\n        if cliente.codice_abi is None or len(cliente.codice_abi)!=5:\r\n            errore = "Lunghezza codice ABI non corretta per la banca {0}".format(cliente.descrizione)\r\n            db.errori.insert(tipo_errore = errore)\r\n            \r\n        if cliente.codice_cab is None or len(cliente.codice_cab)!=5:\r\n            errore = "Lunghezza codice CAB non corretta per la banca {0}".format(cliente.descrizione)\r\n            db.errori.insert(tipo_errore = errore)\r\n            \r\n        \r\n    \r\n        """\r\n        if cliente.domicilio is None or len(cliente.domicilio)<1:\r\n            errore = "Domicilio assente per il fornitore {0}".format(cliente.nome)\r\n            db.errori.insert(tipo_errore = errore)\r\n        """\r\n        \r\n    count = db.saved_ddt.numero_ddt.count()\r\n    ddts = db().select(db.saved_ddt.numero_ddt,groupby = db.saved_ddt.numero_ddt, having=count > 1)\r\n    \r\n    for ddt in ddts:\r\n        errore = "DDT duplicato numero {0} del {1} per il cliente {2}".format(ddt.numero_ddt,ritorna_data_inserimento(ddt.numero_ddt),ritorna_cliente_da_numero_ddt(ddt.numero_ddt))\r\n        db.errori.insert(tipo_errore = errore)\r\n    \r\n    \r\n    \r\n    pagamenti = db(db.ordine_cliente).select()\r\n    for pagamento in pagamenti:\r\n        if db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento.pagamento).isempty():\r\n             if pagamento.pagamento is None:\r\n                 errore = "Pagamento non esistente per ordine cliente {0}. Verr\xc3\xa0 usato il pagamento associato al cliente".format(pagamento.ultimo_codice_ordine)\r\n             else:\r\n                 errore = "Pagamento \'{0}\' ordine cliente {1} non esistente in anagrafica pagamenti".format(pagamento.pagamento,pagamento.ultimo_codice_ordine)\r\n             db.errori.insert(tipo_errore = errore)\r\n    \r\n    ddts=db(db.saved_ddt).select()\r\n    for ddt in ddts:\r\n        if db(db.ddt_cliente.id ==ddt.saved_ddt_id).isempty():\r\n            #db(db.saved_ddt.id == ddt.id).delete()\r\n            errore = "Cancellato ddt orfano salvato {0}".format(ddt.id)\r\n            db.errori.insert(tipo_errore = errore)\r\n       \r\n       \r\n    ordini=db(db.ordine_cliente).select()\r\n    for ordine in ordini:\r\n        if db(db.righe_in_ordine_cliente.id_ordine_cliente == ordine.id).isempty():\r\n            #db(db.saved_ddt.id == ddt.id).delete()\r\n            errore = "Ordine cliente {0} senza righe associate".format(ordine.ultimo_codice_ordine)\r\n            db.errori.insert(tipo_errore = errore) \r\n            \r\n        if tutte_le_righe_completate_in_ordine_id(ordine.id):\r\n            #print "ORDINE ID : ",ordine.id\r\n            ordine.update_record(ddt_completato=\'T\')\r\n        else:\r\n             ordine.update_record(ddt_completato=\'F\')\r\n             \r\n    articoli=db(db.anagrafica_articoli).select()\r\n    for articolo in articoli:\r\n        \r\n             \r\n            #articolo.update_record(tipo_articolo="Prodotto finito",tipo_ordine="Ordine acquisto",codice_sottoconto="8820125")\r\n            \r\n            if articolo.giacenza is None:\r\n                errore = "Articolo {0} senza giacenza".format(articolo.codice_articolo)\r\n                db.errori.insert(tipo_errore = errore)\r\n                articolo.update_record(giacenza=0)\r\n              \r\n            try:\r\n                if int(articolo.giacenza) < 0:\r\n                    errore = "Articolo {0} con giacenza negativa".format(articolo.codice_articolo)\r\n                    db.errori.insert(tipo_errore = errore)\r\n                    #articolo.update_record(giacenza=0)\r\n            except:\r\n            \terrore = "Articolo {0} con giacenza in errore".format(articolo.codice_articolo)\r\n                db.errori.insert(tipo_errore = errore)\r\n                articolo.update_record(giacenza=0)\r\n                pass\r\n            \r\n            if articolo.codice_iva is None:\r\n                errore = "Articolo {0} senza iva".format(articolo.codice_articolo)\r\n                db.errori.insert(tipo_errore = errore)\r\n                #articolo.update_record(giacenza=0)\r\n                \r\n            if articolo.trattamento is None:\r\n                errore = "Articolo {0} senza trattamento".format(articolo.codice_articolo)\r\n                db.errori.insert(tipo_errore = errore)\r\n                articolo.update_record(trattamento="Si")   \r\n               \r\n                           \r\n            if articolo.giacenza == "5000":\r\n                errore = "Articolo {0} senza giacenza".format(articolo.codice_articolo)\r\n                db.errori.insert(tipo_errore = errore)\r\n                articolo.update_record(giacenza=0)                              \r\n    \r\n    \r\n    anagrafica_banche_azienda = db(db.anagrafica_banche_azienda).select()\r\n    if anagrafica_banche_azienda is None:\r\n        errore = "INSERIRE ANAGRAFICA NOSTRA BANCA PER RIBA"\r\n        db.errori.insert(tipo_errore = errore)\r\n        \r\n    \r\n    """\r\n    per rimuovere il "|" dai ddt fattura\r\n    Commentare una volta eseguita questa routine!!\r\n    \r\n    fatture = db(db.fatture_salvate).select()\r\n    for fattura in fatture:\r\n        saved_date = fattura.scadenza\r\n        data_fattura = fattura.data_fattura\r\n        \r\n        \r\n        \r\n        if "|" in fattura.id_ddt:\r\n            #print "ok"\r\n            lista_ddt = fattura.id_ddt.split("|")\r\n            \r\n            lista_ddt = filter(None,lista_ddt)\r\n            #print lista_ddt\r\n            fattura.data_fattura=datetime.datetime.strptime("12/01/1979","%d/%m/%Y")\r\n            fattura.update_record(id_ddt=str(lista_ddt))\r\n            #print fattura\r\n            #db(db.fatture_salvate.id==fattura.id).update(id_ddt=lista_ddt)\r\n        \r\n        \r\n        if saved_date is None:\r\n            #print "Scadenza trovata = {0} ".format(return_scadenza(fattura.id))\r\n            fattura.update_record(scadenza=datetime.datetime.strptime(return_scadenza(fattura.id),"%d/%m/%Y"))\r\n        \r\n        ##print data_fattura\r\n        if fattura.id <= 100:\r\n           fattura.update_record(data_fattura=datetime.datetime.strptime("28/02/2017","%d/%m/%Y")) \r\n        \r\n            \r\n        #print fattura.id\r\n        pagamento,scadenza = ritorna_tipo_pagamento_da_fattura(fattura.id)\r\n        #print "si"\r\n        if "R.B." in pagamento:\r\n            fattura.update_record(richiede_riba=\'T\')\r\n        else:\r\n            fattura.update_record(richiede_riba=\'F\')\r\n            \r\n            \r\n     """     \r\n    """\r\n    rows=db(db.saved_righe_in_ddt_cliente).select()\r\n    for row in rows:\r\n        count_ddt = db(db.ddt_cliente.id == row.saved_ddt_id).count()\r\n        if count == 0:\r\n             errore = "Trovata riga non associata a ddt : id_riga = {0}".format(row.id)\r\n             db.errori.insert(tipo_errore = errore)\r\n             db(db.saved_righe_in_ddt_cliente.id == row.id).delete()\r\n             \r\n    """\r\n        \r\n    form = SQLFORM.grid(db.errori,maxtextlength=500,editable=False,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False)\r\n    \r\n    \r\n    return locals()\r\n\r\n\r\ndef ritorna_data_inserimento(ddt_id):\r\n    data = db(db.saved_ddt.numero_ddt == ddt_id).select().first()["data_inserimento"]\r\n    data_ddt=datetime.datetime.strptime(data[0:10],"%Y-%m-%d").date()\r\n    data_ddt=data_ddt.strftime("%d/%m/%Y")\r\n    return data_ddt\r\n\r\ndef ritorna_cliente_da_numero_ddt(ddt_id):\r\n    #ddt_id = db(db.saved_ddt.numero_ddt == ddt_id).select().first()["id"]\r\n    #print ddt_id\r\n    try:\r\n        nome_cliente = db(db.ddt_cliente.numero_ddt == ddt_id).select()["nome_cliente"]\r\n        \r\n    except:\r\n        nome_cliente = "NON ASSEGNATO"\r\n    return nome_cliente\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef insert_ddt_preview(*args):\r\n    \r\n    \r\n    id_ddt=args[0]\r\n    consegna = args[1]\r\n    trasporto = args[2]\r\n    ditta = args[3]\r\n    domicilio = args[4]\r\n    aspetto = args[5]\r\n    colli = args[6]\r\n    porto = args[7]\r\n    annotazioni = args[8]\r\n    peso = args[9]\r\n    causale = args[10]\r\n    data_scelta = args[11]\r\n    \r\n    \r\n    \r\n    \r\n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\r\n    \r\n    id_cliente = ddt_id.id_cliente\r\n    nome_cliente = ddt_id.nome_cliente\r\n    \r\n    row = db(db.clienti.id==id_cliente).select().first()\r\n    \r\n    try:\r\n        consegna = consegna.split(",")\r\n    except:\r\n        consegna = "Come intestazione ,,,,,,".split(",")\r\n    """\r\n    Insert into saved ddt table\r\n    \r\n    """\r\n    \r\n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\r\n    n = numero_ddt_salvato.split("/")[0]\r\n    a = numero_ddt_salvato.split("/")[1]\r\n    new_n = str(int(n) + 1)\r\n    numero_ddt_corrente = new_n + "/" + a\r\n    \r\n    #ddt_id.update_record(numero_ddt=numero_ddt_corrente)\r\n    \r\n    \r\n    #db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\r\n    #row2 = db(db.ddt).select().first()\r\n    #row2.update_record(numero_ddt = numero_ddt_corrente)\r\n    \r\n    \r\n    \r\n    if len(data_scelta)>0:\r\n        d = data_scelta\r\n    else:\r\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\r\n    \r\n    pa = DDT(d,numero_ddt_corrente,"Cliente",anteprima=True)\r\n    #print "DDT CORRENTE : ",numero_ddt_corrente\r\n    pa.rows=[]\r\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\r\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\r\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\r\n    try:\r\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\r\n    except:\r\n           pa.consegna("null","null","null","null","null")\r\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\r\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\r\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\r\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\r\n    \r\n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\r\n    \r\n    #tutte_le_righe_completate = True\r\n    \r\n    try:\r\n      for row in rows:\r\n         \r\n         id_ordine = row["id_ordine"]\r\n         codice_articolo = row["codice_articolo"]\r\n         codice_ordine = row["codice_ordine"]\r\n         \r\n         if "commento" not in codice_articolo:\r\n             quantita = row[\'quantita_prodotta\']\r\n             prezzo = row[\'prezzo\']\r\n            \r\n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\r\n            \r\n            \r\n             n_riga = row["n_riga"]\r\n             codice_iva = row["codice_iva"]\r\n             evasione = row["evasione"]\r\n             id_riga_ordine = row["id_riga_ordine"]\r\n        \r\n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\r\n         \r\n             if q is not None:\r\n                 try:\r\n                     quantita_richiesta = int(row["quantita_richiesta"])\r\n                     quantita_prodotta = int(row["quantita_prodotta"])\r\n                     quantita_prodotta_fino_ad_ora = 0\r\n             \r\n                     quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta) + quantita_prodotta\r\n                     #r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\r\n                     #r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\r\n                 except Exception,e:\r\n                     response.flash="Controlla le quantit\xc3\xa0"\r\n                     return "ok"\r\n                     #print e\r\n                     \r\n             else:\r\n                 """\r\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\r\n                 """\r\n                 #print "E\' la prima volta che inserisco la riga della quantita"\r\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\r\n                 quantita_prodotta = int(row["quantita_prodotta"])\r\n                 quantita_richiesta = int(row["quantita_richiesta"])\r\n                 #db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\r\n                 \r\n             \r\n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\r\n                     #print "Chiudo la riga"\r\n                     #to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n                     #to_update.update_record(riga_emessa_in_ddt = True)\r\n                     pass\r\n                 else:\r\n                   #tutte_le_righe_completate = Fals\r\n                   pass\r\n             \r\n                 #print "SONO QUII"\r\n                 ##print "{0}".format(tutte_le_righe_completate)\r\n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\r\n         \r\n         \r\n         \r\n             \r\n                  \r\n         ##print "CODICE ARTICOLO : ",codice_articolo\r\n         if len(codice_articolo)>0:\r\n               \r\n               if "commento" not in codice_articolo:\r\n               \r\n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n               \r\n               else:\r\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\r\n                   descrizione = d\r\n                   row.codice_articolo=" "\r\n                   n_riga=" "\r\n                   riferimento_ordine=" "\r\n                   quantita_prodotta=0\r\n                   prezzo=" "\r\n                   evasione=" "\r\n                   row["u_m"]=" "\r\n                   \r\n                   \r\n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\r\n               \r\n               #db.saved_righe_in_ddt_cliente.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\r\n         else:\r\n               descrizione =row.descrizione\r\n               pa.add_row(row.codice_articolo,descrizione,"","","")\r\n    \r\n         \r\n      \r\n          \r\n      \r\n    except Exception,e:\r\n        \r\n        response.flash="Errore inserimento ddt {0}".format(e)\r\n        return locals()     \r\n        \r\n         ##print row\r\n    \r\n    #p.insert_rows()\r\n    pa.insert_rows()\r\n    #print pa.rows\r\n    pa.create_pdf()\r\n    \r\n    ##print request.folder\r\n    #redirect(URL(\'ddt_clienti\'))\r\n    return "ok"\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef insert_ddt(*args):\r\n    \r\n    \r\n    id_ddt=args[0]\r\n    consegna = args[1]\r\n    trasporto = args[2]\r\n    ditta = args[3]\r\n    domicilio = args[4]\r\n    aspetto = args[5]\r\n    colli = args[6]\r\n    porto = args[7]\r\n    annotazioni = args[8]\r\n    peso = args[9]\r\n    causale = args[10]\r\n    data_scelta = args[11]\r\n    #print consegna\r\n    \r\n    \r\n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\r\n    \r\n    ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id,consegna=str(consegna))\r\n    \r\n    #print "Aggiornato"\r\n    #return locals()\r\n    id_cliente = ddt_id.id_cliente\r\n    nome_cliente = ddt_id.nome_cliente\r\n    \r\n    row = db(db.clienti.id==id_cliente).select().first()\r\n    \r\n    \r\n    \r\n    try:\r\n        consegna = consegna.split(",")\r\n    except:\r\n        consegna = "Come intestazione ,,,,,,".split(",")\r\n    """\r\n    Insert into saved ddt table\r\n    \r\n    """\r\n    \r\n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\r\n    n = numero_ddt_salvato.split("/")[0]\r\n    a = numero_ddt_salvato.split("/")[1]\r\n    new_n = str(int(n) + 1)\r\n    numero_ddt_corrente = new_n + "/" + a\r\n    \r\n    ddt_id.update_record(numero_ddt=numero_ddt_corrente)\r\n    \r\n    \r\n    \r\n    db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\r\n    row2 = db(db.ddt).select().first()\r\n    row2.update_record(numero_ddt = numero_ddt_corrente)\r\n    \r\n    \r\n    \r\n    if len(data_scelta)>0:\r\n        d = data_scelta\r\n    else:\r\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\r\n    \r\n    pa = DDT(d,numero_ddt_corrente,"Cliente")\r\n    #print "DDT CORRENTE : ",numero_ddt_corrente\r\n    pa.rows=[]\r\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\r\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\r\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\r\n    try:\r\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\r\n    except:\r\n           pa.consegna("null","null","null","null","null")\r\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\r\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\r\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\r\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\r\n    \r\n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\r\n    \r\n    #tutte_le_righe_completate = True\r\n    \r\n    try:\r\n      for row in rows:\r\n         \r\n         id_ordine = row["id_ordine"]\r\n         codice_articolo = row["codice_articolo"]\r\n         codice_ordine = row["codice_ordine"]\r\n         \r\n         if "commento" in codice_articolo:\r\n             id_riga_ordine = row["id_riga_ordine"]\r\n             evasione = row["evasione"]\r\n             n_riga = row["n_riga"]\r\n             \r\n         \r\n         elif "commento" not in codice_articolo:\r\n             quantita = row[\'quantita_prodotta\']\r\n             prezzo = row[\'prezzo\']\r\n            \r\n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\r\n            \r\n            \r\n             n_riga = row["n_riga"]\r\n             codice_iva = row["codice_iva"]\r\n             evasione = row["evasione"]\r\n             id_riga_ordine = row["id_riga_ordine"]\r\n        \r\n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\r\n         \r\n             if q is not None:\r\n                 try:\r\n                     quantita_richiesta = int(row["quantita_richiesta"])\r\n                     quantita_prodotta = int(row["quantita_prodotta"])\r\n                     quantita_prodotta_fino_ad_ora = 0\r\n             \r\n                     quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta) + quantita_prodotta\r\n                     r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\r\n                     r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\r\n                     \r\n                     if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\r\n                         #print "Chiudo la riga"\r\n                         to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n                         to_update.update_record(riga_emessa_in_ddt = True)\r\n                         db(db.riserva_quantita.id_riga_ordine==id_riga_ordine).delete()\r\n                     \r\n                 except Exception,e:\r\n                     response.flash="Controlla le quantit\xc3\xa0"\r\n                     return "ok"\r\n                     #print e\r\n                     \r\n             else:\r\n                 """\r\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\r\n                 """\r\n                 #print "E\' la prima volta che inserisco la riga della quantita"\r\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\r\n                 quantita_prodotta = int(row["quantita_prodotta"])\r\n                 quantita_richiesta = int(row["quantita_richiesta"])\r\n                 db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\r\n                 \r\n             \r\n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\r\n                     #print "Chiudo la riga"\r\n                     to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n                     to_update.update_record(riga_emessa_in_ddt = True)\r\n                     #db(db.riserva_quantita.id_riga_ordine==id_riga_ordine).delete()\r\n                 \r\n                 else:\r\n                   #tutte_le_righe_completate = Fals\r\n                   pass\r\n             \r\n                 #print "SONO QUII"\r\n                 ##print "{0}".format(tutte_le_righe_completate)\r\n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\r\n         \r\n         \r\n         \r\n             \r\n                  \r\n         ##print "CODICE ARTICOLO : ",codice_articolo\r\n         if len(codice_articolo)>0:\r\n               \r\n               if "commento" not in codice_articolo:\r\n               \r\n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n                   \r\n                   da_rimuovere = int(quantita_prodotta) * -1\r\n                   db.riserva_quantita.insert(codice_articolo = row.codice_articolo,quantita = da_rimuovere,id_riga_ordine = id_riga_ordine,user_id=auth.user_id)\r\n                   \r\n                   rimuovi_giacenza(codice_articolo,row.quantita_prodotta)\r\n               \r\n                   """Metto negativo per liberare la prenotazione articolo"""\r\n               \r\n               else:\r\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\r\n                   descrizione = d\r\n                   row.codice_articolo=" "\r\n                   #n_riga=" "\r\n                   riferimento_ordine=" "\r\n                   quantita_prodotta=0\r\n                   prezzo=" "\r\n                   evasione=datetime.datetime.now()\r\n                   row["u_m"]=" "\r\n                   \r\n                   \r\n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\r\n               \r\n               db.saved_righe_in_ddt_cliente.insert(id_riga_ordine=id_riga_ordine,saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\r\n               \r\n               \r\n              \r\n               \r\n               \r\n               \r\n               \r\n               \r\n         else:\r\n               descrizione =row.descrizione\r\n               pa.add_row(row.codice_articolo,descrizione,"","","")\r\n    \r\n         \r\n      \r\n         ##print descrizione\r\n      """\r\n      if tutte_le_righe_completate:\r\n             ordine = db(db.ordine_cliente.id == id_ordine).select().first()\r\n             ordine.update_record(ddt_completato = True)\r\n      """\r\n      if tutte_le_righe_completate():\r\n          ordine = db(db.ordine_cliente.id == id_ordine).select().first()\r\n          ordine.update_record(ddt_completato = True)\r\n          \r\n      \r\n    except Exception,e:\r\n        \r\n        response.flash="Errore inserimento ddt {0}".format(e)\r\n        return locals()     \r\n        \r\n         ##print row\r\n    \r\n    #p.insert_rows()\r\n    pa.insert_rows()\r\n    #print pa.rows\r\n    pa.create_pdf()\r\n    \r\n    ##print request.folder\r\n    redirect(URL(\'ddt_clienti\'))\r\n    return "ok"\r\n\r\n\r\ndef rimuovi_giacenza(codice_articolo,quantita_prodotta):\r\n    \r\n    #print codice_articolo,quantita_prodotta\r\n    row = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\r\n    #print row\r\n    attuale = int(row.giacenza)\r\n    da_aggiornare = str(attuale - int(quantita_prodotta))\r\n    \r\n    #print "Attuale : {0} Da aggiornare = {1}".format(attuale,da_aggiornare)\r\n    \r\n    row.update_record(giacenza = da_aggiornare)\r\n    \r\n    \r\n    \r\n\r\ndef manutenzione_righe_ordini_clienti():\r\n    \r\n    form = SQLFORM.grid(db.righe_in_ordine_cliente)\r\n    return locals()\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef insert_mod_ddt(*args):\r\n    \r\n    \r\n    id_ddt=args[0]\r\n    consegna = args[1]\r\n    trasporto = args[2]\r\n    ditta = args[3]\r\n    domicilio = args[4]\r\n    aspetto = args[5]\r\n    colli = args[6]\r\n    porto = args[7]\r\n    annotazioni = args[8]\r\n    peso = args[9]\r\n    causale = args[10]\r\n    \r\n    #print "Consegna ",consegna\r\n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\r\n    #print ddt_id\r\n    ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id,consegna=consegna)\r\n    \r\n    #print "CIAOOOO ",ddt_id\r\n    \r\n    #return locals()\r\n    id_cliente = ddt_id.id_cliente\r\n    nome_cliente = ddt_id.nome_cliente\r\n    \r\n    row = db(db.clienti.id==id_cliente).select().first()\r\n    \r\n    \r\n    \r\n    try:\r\n        consegna = consegna.split(",")\r\n    except:\r\n        consegna = "Come intestazione ,,,,,,".split(",")\r\n    """\r\n    Insert into saved ddt table\r\n    \r\n    """\r\n    \r\n    \r\n    numero_ddt_corrente = ddt_id.numero_ddt\r\n        \r\n    #print numero_ddt_corrente\r\n    #db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\r\n    \r\n    data_scelta=""\r\n    if len(data_scelta)>0:\r\n        d = data_scelta\r\n    else:\r\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\r\n    \r\n    pa = DDT(d,numero_ddt_corrente,"Cliente")\r\n    #print "DDT CORRENTE : ",numero_ddt_corrente\r\n    pa.rows=[]\r\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\r\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\r\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\r\n    try:\r\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\r\n    except:\r\n           pa.consegna("null","null","null","null","null")\r\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\r\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\r\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\r\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\r\n    \r\n    #print "ciao ",ddt_id\r\n    \r\n    """\r\n    1) salvare le righe del ddt in una tabella per creare UNDO\r\n    2) cancellare i riferimenti a saved_righe_in_ddt_cliente\r\n    3) inserire le righe ddt as usual\r\n    """\r\n    produzione_da_rimuovere=0\r\n    old_rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id ==ddt_id.id).select()\r\n    \r\n    #print old_rows\r\n    for r in old_rows:\r\n        #print old_rows\r\n        db.saved_righe_in_ddt_cliente_undo.insert(**db.saved_righe_in_ddt_cliente._filter_fields(r))\r\n        db(db.saved_righe_in_ddt_cliente.id == r.id).delete()\r\n        produzione_da_rimuovere = r.quantita\r\n        """\r\n        Ritornare id riga ordine anche se NULL\r\n        """\r\n        \r\n        if r.id_riga_ordine is None or len(r.id_riga_ordine)<1:\r\n                id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == r.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==r.n_riga)).select().first()["id"]\r\n        else:\r\n                id_riga_ordine = r.id_riga_ordine\r\n        \r\n        db((db.produzione_righe_per_ddt.quantita_prodotta == produzione_da_rimuovere) & (db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine)).delete()\r\n   \r\n    #return ""\r\n    \r\n    \r\n    #tutte_le_righe_completate = True\r\n    \r\n    \r\n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\r\n    db(db.saved_righe_in_ddt_cliente.saved_ddt_id ==ddt_id.id).delete()\r\n    try:\r\n      for row in rows:\r\n         \r\n         id_ordine = row["id_ordine"]\r\n         codice_articolo = row["codice_articolo"]\r\n         codice_ordine = row["codice_ordine"]\r\n         \r\n         \r\n         if row.id_riga_ordine is None or len(row.id_riga_ordine)<1:\r\n                id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == row.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==row.n_riga)).select().first()["id"]\r\n         else:\r\n                id_riga_ordine = row.id_riga_ordine\r\n                \r\n         #print "ID RIGA ORDINE ",id_riga_ordine\r\n         \r\n         \r\n         if "commento" not in codice_articolo:\r\n             quantita = row[\'quantita_prodotta\']\r\n             prezzo = row[\'prezzo\']\r\n            \r\n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\r\n            \r\n            \r\n             n_riga = row["n_riga"]\r\n             codice_iva = row["codice_iva"]\r\n             evasione = row["evasione"]\r\n             #id_riga_ordine = row["id_riga_ordine"]\r\n             \r\n             #print id_riga_ordine\r\n             \r\n                    \r\n             \r\n             \r\n             """\r\n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\r\n             #print "Quantita trovata gi\xc3\xa0 prodotta : ",q\r\n             if q is not None:\r\n                 try:\r\n                     quantita_richiesta = int(row["quantita_richiesta"])\r\n                     quantita_prodotta = int(row["quantita_prodotta"])\r\n                     quantita_prodotta_fino_ad_ora = 0\r\n             \r\n                     quantita_prodotta_fino_ad_ora =  quantita_prodotta\r\n                     r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\r\n                     r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\r\n                 except Exception,e:\r\n                     response.flash="Controlla le quantit\xc3\xa0"\r\n                     #print e\r\n                     return "ok"\r\n                     \r\n                     \r\n             else:\r\n             """\r\n             if True:\r\n                 """\r\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\r\n                 """\r\n                 #print "E\' la prima volta che inserisco la riga della quantita"\r\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\r\n                 quantita_prodotta = int(row["quantita_prodotta"])\r\n                 quantita_richiesta = int(row["quantita_richiesta"])\r\n                 db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\r\n                 \r\n                 #print "qui"\r\n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\r\n                     #print "Chiudo la riga"\r\n                     to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n                     to_update.update_record(riga_emessa_in_ddt = \'T\')\r\n                     db.riserva_quantita.insert\r\n                     \r\n                     rimuovi_giacenza(codice_articolo,row.quantita_prodotta)\r\n               \r\n                     """Metto negativo per liberare la prenotazione articolo"""\r\n                 \r\n                 else:\r\n                   #print "Riapro la riga"\r\n                   #print "ID RIGA ORDINE : ",id_riga_ordine\r\n                   to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n                   #print to_update.id\r\n                   to_update.update_record(riga_emessa_in_ddt = \'F\')\r\n                   \r\n                   \r\n                   \r\n                   \r\n                 da_rimuovere = int(quantita_prodotta_fino_ad_ora) * -1\r\n                 db.riserva_quantita.insert(codice_articolo = row.codice_articolo,quantita = da_rimuovere,id_riga_ordine = id_riga_ordine,user_id=auth.user_id)\r\n                 db.riserva_quantita.insert(codice_articolo = row.codice_articolo,quantita = quantita_prodotta_fino_ad_ora,id_riga_ordine = id_riga_ordine,user_id=auth.user_id)\r\n                   \r\n                            \r\n                 giacenza = int(produzione_da_rimuovere)\r\n                 \r\n                 #print "produzione da rimuovere = ",giacenza\r\n                 vecchia_giacenza = int(db(db.anagrafica_articoli.codice_articolo ==codice_articolo ).select().first()["giacenza"])\r\n                 #print "vecchia giacenza ",vecchia_giacenza\r\n                 \r\n                 \r\n                 nuova_giacenza = vecchia_giacenza - giacenza\r\n                 \r\n                 #print "nuova giacenza ",nuova_giacenza\r\n                 \r\n                 nuova_giacenza +=  int(quantita_prodotta_fino_ad_ora)\r\n                 \r\n                 #print "nuova giacenza 2 ",nuova_giacenza\r\n                 g = db(db.anagrafica_articoli.codice_articolo ==codice_articolo).select().first()\r\n                 g.update_record(giacenza = str(nuova_giacenza))\r\n                 \r\n                 \r\n                 \r\n                 \r\n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\r\n         \r\n         \r\n         \r\n             \r\n                  \r\n         ##print "CODICE ARTICOLO : ",codice_articolo\r\n         if len(codice_articolo)>0:\r\n               \r\n               if "commento" not in codice_articolo:\r\n               \r\n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n               \r\n               else:\r\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\r\n                   descrizione = d\r\n                   row.codice_articolo=" "\r\n                   n_riga=" "\r\n                   riferimento_ordine=" "\r\n                   quantita_prodotta=0\r\n                   prezzo=" "\r\n                   evasione=datetime.datetime.now()\r\n                   row["u_m"]=" "\r\n                   \r\n                   \r\n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\r\n               \r\n               db.saved_righe_in_ddt_cliente.insert(id_riga_ordine=row.id_riga_ordine,saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\r\n         else:\r\n               descrizione =row.descrizione\r\n               pa.add_row(row.codice_articolo,descrizione,"","","")\r\n    \r\n         \r\n      \r\n         ##print descrizione\r\n      """\r\n      if tutte_le_righe_completate:\r\n             ordine = db(db.ordine_cliente.id == id_ordine).select().first()\r\n             ordine.update_record(ddt_completato = True)\r\n      """\r\n      if tutte_le_righe_completate():\r\n          ordine = db(db.ordine_cliente.id == id_ordine).select().first()\r\n          ordine.update_record(ddt_completato = True)\r\n      else:\r\n          ordine = db(db.ordine_cliente.id == id_ordine).select().first()\r\n          ordine.update_record(ddt_completato = False)\r\n          \r\n          \r\n      \r\n    except Exception,e:\r\n        \r\n        response.flash="Errore inserimento ddt {0}".format(e)\r\n        return locals()     \r\n        \r\n         ##print row\r\n    \r\n    #p.insert_rows()\r\n    pa.insert_rows()\r\n    #print pa.rows\r\n    pa.create_pdf()\r\n    \r\n    ##print request.folder\r\n    redirect(URL(\'ddt_clienti\'))\r\n    return "ok"\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef insert_mod_ddt_preview(*args):\r\n    \r\n    \r\n    id_ddt=args[0]\r\n    consegna = args[1]\r\n    trasporto = args[2]\r\n    ditta = args[3]\r\n    domicilio = args[4]\r\n    aspetto = args[5]\r\n    colli = args[6]\r\n    porto = args[7]\r\n    annotazioni = args[8]\r\n    peso = args[9]\r\n    causale = args[10]\r\n    \r\n    \r\n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\r\n    \r\n    #ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id)\r\n    \r\n    #print "CIAOOOO ",ddt_id\r\n    \r\n    id_cliente = ddt_id.id_cliente\r\n    nome_cliente = ddt_id.nome_cliente\r\n    \r\n    row = db(db.clienti.id==id_cliente).select().first()\r\n    \r\n    \r\n    \r\n    try:\r\n        consegna = consegna.split(",")\r\n    except:\r\n        consegna = "Come intestazione ,,,,,,".split(",")\r\n    """\r\n    Insert into saved ddt table\r\n    \r\n    """\r\n    \r\n    \r\n    numero_ddt_corrente = ddt_id.numero_ddt\r\n        \r\n    #print numero_ddt_corrente\r\n    #db.saved_ddt.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\r\n    \r\n    data_scelta =""\r\n    \r\n    if len(data_scelta)>0:\r\n        d = data_scelta\r\n    else:\r\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\r\n    \r\n    pa = DDT(d,numero_ddt_corrente,"Cliente",anteprima=True)\r\n    #print "DDT CORRENTE : ",numero_ddt_corrente\r\n    pa.rows=[]\r\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\r\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\r\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\r\n    try:\r\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\r\n    except:\r\n           pa.consegna("null","null","null","null","null")\r\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\r\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\r\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\r\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\r\n    \r\n    #print "ciao ",ddt_id\r\n    \r\n    """\r\n    1) salvare le righe del ddt in una tabella per creare UNDO\r\n    2) cancellare i riferimenti a saved_righe_in_ddt_cliente\r\n    3) inserire le righe ddt as usual\r\n    """\r\n        \r\n   \r\n    #return ""\r\n    \r\n    \r\n    #tutte_le_righe_completate = True\r\n    \r\n    \r\n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\r\n    try:\r\n      for row in rows:\r\n         \r\n         id_ordine = row["id_ordine"]\r\n         codice_articolo = row["codice_articolo"]\r\n         codice_ordine = row["codice_ordine"]\r\n         \r\n         if "commento" not in codice_articolo:\r\n             quantita = row[\'quantita_prodotta\']\r\n             prezzo = row[\'prezzo\']\r\n            \r\n             riferimento_ordine = row["riferimento_ordine"]+" - POS."+row["n_riga"]\r\n            \r\n            \r\n             n_riga = row["n_riga"]\r\n             codice_iva = row["codice_iva"]\r\n             evasione = row["evasione"]\r\n             id_riga_ordine = row["id_riga_ordine"]\r\n             ##print row\r\n        \r\n             q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\r\n             #print "Quantita trovata gi\xc3\xa0 prodotta : ",q\r\n             if q is not None:\r\n                 try:\r\n                     quantita_richiesta = int(row["quantita_richiesta"])\r\n                     quantita_prodotta = int(row["quantita_prodotta"])\r\n                     quantita_prodotta_fino_ad_ora = 0\r\n             \r\n                     quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta) + quantita_prodotta\r\n                     #r = db(db.produzione_righe_per_ddt.id_riga_ordine == str(id_riga_ordine)).select().first()\r\n                     #r.update_record(quantita_prodotta=str(quantita_prodotta_fino_ad_ora))\r\n                 except Exception,e:\r\n                     response.flash="Controlla le quantit\xc3\xa0"\r\n                     #print e\r\n                     return "ok"\r\n                     \r\n                     \r\n             else:\r\n                 """\r\n                 E\' la prima volta che inserisco la riga della quantit\xc3\xa0\r\n                 """\r\n                 #print "E\' la prima volta che inserisco la riga della quantita"\r\n                 quantita_prodotta_fino_ad_ora = int(row["quantita_prodotta"])\r\n                 quantita_prodotta = int(row["quantita_prodotta"])\r\n                 quantita_richiesta = int(row["quantita_richiesta"])\r\n                 db.produzione_righe_per_ddt.insert(id_riga_ordine = id_riga_ordine,quantita_prodotta = quantita_prodotta)\r\n                 \r\n             \r\n                 if  quantita_prodotta_fino_ad_ora >= int(quantita_richiesta):\r\n                     #print "Chiudo la riga"\r\n                     #to_update = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n                     #to_update.update_record(riga_emessa_in_ddt = True)\r\n                     pass\r\n                 else:\r\n                   #tutte_le_righe_completate = Fals\r\n                   pass\r\n             \r\n                 #print "SONO QUII"\r\n                 ##print "{0}".format(tutte_le_righe_completate)\r\n                 quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\r\n         \r\n         \r\n         \r\n             \r\n                  \r\n         ##print "CODICE ARTICOLO : ",codice_articolo\r\n         if len(codice_articolo)>0:\r\n               \r\n               if "commento" not in codice_articolo:\r\n               \r\n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n               \r\n               else:\r\n                   d = db(db.righe_in_ordine_cliente.id == row.id_riga_ordine).select().first()["commento"]\r\n                   #print "COMMENTO {0}, RIGA ORDINE {1}".format(d,row.id_riga_ordine)\r\n                   \r\n                   descrizione = d\r\n                   row.codice_articolo=" "\r\n                   n_riga=" "\r\n                   riferimento_ordine=" "\r\n                   quantita_prodotta=0\r\n                   prezzo=" "\r\n                   evasione=" "\r\n                   row["u_m"]=" "\r\n                   \r\n                   \r\n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],str(row.quantita_prodotta))\r\n               \r\n               #db.saved_righe_in_ddt_cliente.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita_prodotta,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\r\n         else:\r\n               descrizione =row.descrizione\r\n               pa.add_row(row.codice_articolo,descrizione,"","","")\r\n    \r\n         \r\n      \r\n         ##print descrizione\r\n      """\r\n      if tutte_le_righe_completate:\r\n             ordine = db(db.ordine_cliente.id == id_ordine).select().first()\r\n             ordine.update_record(ddt_completato = True)\r\n      \r\n      \r\n      """\r\n          \r\n      \r\n    except Exception,e:\r\n        \r\n        response.flash="Errore inserimento ddt {0}".format(e)\r\n        return locals()     \r\n        \r\n         ##print row\r\n    \r\n    #p.insert_rows()\r\n    pa.insert_rows()\r\n    #print pa.rows\r\n    pa.create_pdf()\r\n    \r\n    ##print request.folder\r\n    redirect(URL(\'ddt_clienti\'))\r\n    return "ok"\r\n\r\n\r\ndef tutte_le_righe_completate():\r\n    rows = db(db.righe_in_ddt_cliente.user_id == auth.user_id).select()\r\n    \r\n    righe_completate = True\r\n    #print "IN TUTTE LE RIGHE COMPLETATE -----------------"\r\n    try:\r\n      for row in rows:\r\n         \r\n         \r\n         if row.id_riga_ordine is None or len(row.id_riga_ordine)<1:\r\n                id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == row.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==row.n_riga)).select().first()["id"]\r\n         else:\r\n                id_riga_ordine = row.id_riga_ordine\r\n         \r\n         \r\n         #print row\r\n         #print "-----"\r\n         \r\n         \r\n         \r\n         \r\n         codice_articolo = row["codice_articolo"]\r\n         \r\n         if "commento" not in codice_articolo:\r\n            riga = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n            #print riga\r\n            if not riga.riga_emessa_in_ddt:\r\n                 #print "non tutte le righe sono state completate"     \r\n                 righe_completate = False    \r\n             \r\n                \r\n    except Exception,e:\r\n         #print e\r\n                     #quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\r\n         pass\r\n    return righe_completate\r\n    \r\n\r\ndef riga_completata(id_riga_ordine):\r\n    row = db(db.righe_in_ordine_cliente.id == id_riga_ordine ).select().first()\r\n    #print row\r\n    return row.riga_emessa_in_ddt\r\n\r\n\r\n\r\ndef tutte_le_righe_completate_in_ordine_id(id_ordine):\r\n    rows = db(db.righe_in_ordine_cliente.id_ordine_cliente == id_ordine).select()\r\n    \r\n    righe_completate = True\r\n   \r\n    try:\r\n      for row in rows:\r\n                \r\n         codice_articolo = row["codice_articolo"]\r\n         \r\n         if "commento" not in codice_articolo:\r\n            \r\n            \r\n            if not row.riga_emessa_in_ddt:\r\n                 #print "non tutte le righe sono state completate"     \r\n                 righe_completate = False    \r\n             \r\n                \r\n    except Exception,e:\r\n         #print e\r\n         #quantita_totale_prodotta = int(quantita_prodotta) + int(quantita_prodotta_fino_ad_ora)\r\n         pass\r\n    return righe_completate\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef insert_ddt_fornitori(*args):\r\n    \r\n    \r\n    id_ddt=args[0]\r\n    consegna = args[1]\r\n    trasporto = args[2]\r\n    ditta = args[3]\r\n    domicilio = args[4]\r\n    aspetto = args[5]\r\n    colli = args[6]\r\n    porto = args[7]\r\n    annotazioni = args[8]\r\n    peso = args[9]\r\n    causale = args[10]\r\n    data_scelta = args[11]\r\n    \r\n    if len(data_scelta)>0:\r\n        d = data_scelta\r\n    else:\r\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\r\n    \r\n    \r\n    #print args\r\n    ddt_id = db(db.ddt_fornitore.id == id_ddt).select().first()\r\n    \r\n    ddt_id.update_record(porto=porto,aspetto=aspetto,peso=peso,annotazioni=annotazioni,trasporto_a_mezzo=trasporto,causale_del_trasporto=causale,inizio_del_trasporto="",ditta_vettore=ditta,domicilio_vettore=domicilio,data_e_ora_del_ritiro="",user_id = auth.user_id)\r\n    \r\n    id_fornitore = ddt_id.id_fornitore\r\n    nome_fornitore = ddt_id.nome_fornitore\r\n    \r\n    row = db(db.fornitori.id==id_fornitore).select().first()\r\n    \r\n    consegna = consegna.split(",")\r\n    \r\n    """\r\n    Insert into saved ddt table\r\n    \r\n    """\r\n    \r\n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\r\n    n = numero_ddt_salvato.split("/")[0]\r\n    a = numero_ddt_salvato.split("/")[1]\r\n    new_n = str(int(n) + 1)\r\n    numero_ddt_corrente = new_n + "/" + a\r\n    \r\n    ddt_id.update_record(numero_ddt=numero_ddt_corrente)\r\n    \r\n    \r\n    db.saved_ddt_fornitori.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = d, user_id = auth.user_id)\r\n    row2 = db(db.ddt).select().first()\r\n    row2.update_record(numero_ddt = numero_ddt_corrente)\r\n    \r\n    \r\n    \r\n    \r\n    pa = DDT(d,numero_ddt_corrente,"Fornitore")\r\n    #print "DDT CORRENTE : ",numero_ddt_corrente\r\n    pa.rows=[]\r\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\r\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\r\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\r\n    try:\r\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\r\n    except:\r\n           pa.consegna("null","null","null","null","null")\r\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\r\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\r\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\r\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\r\n    \r\n    rows = db(db.righe_in_ddt_fornitore.user_id == auth.user_id).select()\r\n    \r\n    for row in rows:\r\n         quantita = row[\'quantita\']\r\n         prezzo = row[\'prezzo\']\r\n         codice_articolo = row["codice_articolo"]\r\n         riferimento_ordine = row["codice_ordine"]+" - POS."+row["n_riga"]\r\n         id_ordine = row["id_ordine"]\r\n         codice_ordine = row["codice_ordine"]\r\n         n_riga = row["n_riga"]\r\n         codice_iva = row["codice_iva"]\r\n         evasione = row["evasione"]\r\n\r\n         ordine=db(db.ordine_fornitore.id == id_ordine).select().first()\r\n         ordine.update_record(ddt_completato = True)\r\n         \r\n         ##print "CODICE ARTICOLO : ",codice_articolo\r\n         if len(codice_articolo)>0:\r\n               #descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n               \r\n               if "commento" not in codice_articolo:\r\n               \r\n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n               \r\n               else:\r\n                   descrizione = row.descrizione\r\n                   row.codice_articolo=""\r\n                   n_riga=""\r\n                   \r\n               \r\n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],row["quantita"])\r\n               db.saved_righe_in_ddt_fornitore.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\r\n         else:\r\n               descrizione =row.descrizione\r\n               pa.add_row(row.codice_articolo,descrizione,"","","")\r\n         ##print descrizione\r\n         \r\n        \r\n         ##print row\r\n    \r\n    #p.insert_rows()\r\n    pa.insert_rows()\r\n    pa.create_pdf()\r\n\r\n    \r\n    \r\n    ##print request.folder\r\n    redirect(URL(\'ddt_fornitori\'))\r\n    return "ok"\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef insert_ddt_fornitori_preview(*args):\r\n    \r\n    \r\n    id_ddt=args[0]\r\n    consegna = args[1]\r\n    trasporto = args[2]\r\n    ditta = args[3]\r\n    domicilio = args[4]\r\n    aspetto = args[5]\r\n    colli = args[6]\r\n    porto = args[7]\r\n    annotazioni = args[8]\r\n    peso = args[9]\r\n    causale = args[10]\r\n    data_scelta = args[11]\r\n    \r\n    if len(data_scelta)>0:\r\n        d = data_scelta\r\n    else:\r\n        d = datetime.datetime.now().date().strftime("%d/%m/%Y")\r\n    \r\n    \r\n    #print args\r\n    ddt_id = db(db.ddt_fornitore.id == id_ddt).select().first()\r\n    \r\n    id_fornitore = ddt_id.id_fornitore\r\n    nome_fornitore = ddt_id.nome_fornitore\r\n    \r\n    row = db(db.fornitori.id==id_fornitore).select().first()\r\n    \r\n    consegna = consegna.split(",")\r\n    \r\n    """\r\n    Insert into saved ddt table\r\n    \r\n    """\r\n    \r\n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\r\n    n = numero_ddt_salvato.split("/")[0]\r\n    a = numero_ddt_salvato.split("/")[1]\r\n    new_n = str(int(n) + 1)\r\n    numero_ddt_corrente = new_n + "/" + a\r\n    \r\n    #ddt_id.update_record(numero_ddt=numero_ddt_corrente)\r\n    \r\n    \r\n    #db.saved_ddt_fornitori.insert(numero_ddt = numero_ddt_corrente,saved_ddt_id = ddt_id.id, data_inserimento = datetime.datetime.now(), user_id = auth.user_id)\r\n    row2 = db(db.ddt).select().first()\r\n    #row2.update_record(numero_ddt = numero_ddt_corrente)\r\n    \r\n    \r\n    \r\n    \r\n    pa = DDT(d,numero_ddt_corrente,"Fornitore",anteprima=True)\r\n    #print "DDT CORRENTE : ",numero_ddt_corrente\r\n    pa.rows=[]\r\n    #p.intestazione("LEONARDO SPA", "ROMA","PIAZZA MONTE GRAPPA 4", "00195", "RM", "IT", "123456", "00881841001")\r\n    pa.intestazione(row.nome, row.citta,row.indirizzo, row.cap, row.provincia, row.partita_iva, row.nazione,row.codice_fiscale)\r\n    # p.consegna("LEONARDO SPA", "CAMPI BISENZIO", "VIA ALBERT EINSTEIN 35", "50013", "FI")\r\n    try:\r\n      pa.consegna(consegna[0],consegna[1],consegna[2],consegna[3],consegna[4])\r\n    except:\r\n           pa.consegna("null","null","null","null","null")\r\n    #p.info_trasporto("Vettore", "TNT GLOBAL EXPRESS SPA", "VENDITA","29/11/16", "LODI", "28/11/16")\r\n    pa.info_trasporto(trasporto, ditta, causale,"", domicilio, "")\r\n    # p.footer("scatola su bancale","100","ASSEGNATO","NOTE","123")\r\n    pa.footer(aspetto,colli,porto,annotazioni,peso)\r\n    \r\n    rows = db(db.righe_in_ddt_fornitore.user_id == auth.user_id).select()\r\n    \r\n    for row in rows:\r\n         quantita = row[\'quantita\']\r\n         prezzo = row[\'prezzo\']\r\n         codice_articolo = row["codice_articolo"]\r\n         riferimento_ordine = row["codice_ordine"]+" - POS."+row["n_riga"]\r\n         id_ordine = row["id_ordine"]\r\n         codice_ordine = row["codice_ordine"]\r\n         n_riga = row["n_riga"]\r\n         codice_iva = row["codice_iva"]\r\n         evasione = row["evasione"]\r\n         \r\n         ##print "CODICE ARTICOLO : ",codice_articolo\r\n         if len(codice_articolo)>0:\r\n               #descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n               \r\n               if "commento" not in codice_articolo:\r\n               \r\n                   descrizione = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first().descrizione\r\n               \r\n               else:\r\n                   descrizione = row.descrizione\r\n                   row.codice_articolo=""\r\n                   n_riga=""\r\n                   \r\n               \r\n               pa.add_row(row.codice_articolo,descrizione,riferimento_ordine,row["u_m"],row["quantita"])\r\n               #db.saved_righe_in_ddt_fornitore.insert(saved_ddt_id = ddt_id.id,id_ordine = id_ordine,codice_ordine = codice_ordine, n_riga = n_riga,codice_articolo=codice_articolo,descrizione=descrizione,riferimento_ordine=row["riferimento_ordine"],u_m=row["u_m"],quantita=quantita,prezzo=prezzo,evasione=evasione,user_id = auth.user_id,codice_iva=row["codice_iva"])\r\n         else:\r\n               descrizione =row.descrizione\r\n               pa.add_row(row.codice_articolo,descrizione,"","","")\r\n         ##print descrizione\r\n         \r\n        \r\n         ##print row\r\n    \r\n    #p.insert_rows()\r\n    pa.insert_rows()\r\n    pa.create_pdf()\r\n    \r\n    ##print request.folder\r\n  \r\n    return "ok"\r\n\r\n\r\ndef fatture_per_riba():\r\n    fields=[db.fatture_scelte.numero_fattura,db.fatture_scelte.totale]\r\n    form = SQLFORM.grid(db.fatture_scelte,create=False,editable=False,deletable=True,csv=False,fields=fields)\r\n    return locals()\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef aggiungi_fattura(args):\r\n    id_fattura = args[\'0\']\r\n    fattura = db(db.fatture_salvate.id ==id_fattura).select().first()\r\n    \r\n    db((db.fatture_scelte.id_fattura == id_fattura) & (db.fatture_scelte.user_id == auth.user_id)).delete()\r\n    db.fatture_scelte.insert(scadenza=fattura.scadenza,id_cliente=fattura.id_cliente,cliente=fattura.nome_cliente,id_fattura=fattura.id,numero_fattura=fattura.numero_fattura,totale=fattura.totale,user_id = auth.user_id)\r\n    \r\n    return "ok"\r\n    \r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef add_row_to_ddt(args):\r\n    \r\n    id_ordine = args[\'0\']\r\n    \r\n    #ritorna_quantita_saldo\r\n    \r\n    #auth.user_id\r\n    #print "ID ORDINE : ",id_ordine\r\n    \r\n    db((db.righe_in_ddt_cliente.user_id == auth.user_id) & (db.righe_in_ddt_cliente.id_ordine == id_ordine)).delete()\r\n    \r\n    \r\n    row = db(db.ordine_cliente.id == id_ordine).select().first()\r\n    \r\n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\r\n    nome_cliente = row[\'nome_cliente\']\r\n    data_inserimento = row[\'data_inserimento\']\r\n    listino = row[\'listino\']\r\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\r\n    listino = row[\'listino\']\r\n    magazzino_interno = row[\'magazzino_interno\']\r\n    numero_ordine = row[\'ultimo_codice_ordine\']\r\n    saldo=0\r\n    quantita_da_produrre=0\r\n    \r\n    \r\n    rows = db((db.righe_in_ordine_cliente.id_ordine_cliente == id_ordine),(db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\')).select()\r\n    for row in rows:\r\n        #print "riga emessa in DDT"+str(row.riga_emessa_in_ddt)\r\n        if "commento" in row.codice_articolo:\r\n            quantita_da_produrre = prenotato = quantita_prodotta = saldo = 0\r\n            db.righe_in_ddt_cliente.insert(saldo=0,codice_ordine=numero_ordine,quantita_richiesta=0,quantita_prodotta = 0, prezzo=0,sconti=0,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_cliente,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,id_riga_ordine=row.id) \r\n            pass\r\n        \r\n        elif not row.riga_emessa_in_ddt:\r\n            \r\n            """\r\n            Vado a vedere la quantit\xc3\xa0 attualmente prodotta salvata nella tabella "produzione_righe_per_ddt"\r\n            """\r\n            row_id = row.id\r\n            dettagli_produzione_riga = db(db.produzione_righe_per_ddt.id_riga_ordine == row.id).select().first()\r\n            \r\n            if dettagli_produzione_riga is not None:\r\n                #print "Riga trovata"\r\n                """\r\n                Se ho trovato la riga vuol dire che \xc3\xa8 stata immessa una quantit\xc3\xa0 in saldo.\r\n                Vado a recuperare la quantit\xc3\xa0 prodotta\r\n                """\r\n                #quantita_da_produrre= int(row.quantita) - int(dettagli_produzione_riga.quantita_prodotta)\r\n                \r\n                quantita_da_produrre = prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(row.codice_articolo,row_id) \r\n                \r\n                \r\n                quantita_prodotta = dettagli_produzione_riga.quantita_prodotta\r\n                saldo=ritorna_quantita_saldo(row_id)\r\n                \r\n            else:\r\n                #print "Riga non trovata"\r\n                """\r\n                Metto la quantita prodotta = alla quantita richiesta per velocizzare l\'inserimento\r\n                row.quantita \xc3\xa8 l\'iniziale quantita richiesta nell\'ordine\r\n                """\r\n                quantita_da_produrre = prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(row.codice_articolo,row_id) \r\n                quantita_prodotta = 0\r\n                saldo=ritorna_quantita_saldo(row_id)\r\n                \r\n            \r\n            \r\n            \r\n            \r\n            db.righe_in_ddt_cliente.insert(saldo=saldo,codice_ordine=numero_ordine,quantita_richiesta=row.quantita,quantita_prodotta = quantita_da_produrre, prezzo=row.prezzo,sconti=row.sconti,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_cliente,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,id_riga_ordine=row.id)\r\n    \r\n    \r\n    return "ok"\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef add_row_to_ddt_mod(args):\r\n    \r\n    \r\n    id_ordine = args[\'0\']\r\n    \r\n    #auth.user_id\r\n    #print "ID ORDINE : ",id_ordine\r\n    \r\n    db((db.righe_in_ddt_cliente.user_id == auth.user_id) & (db.righe_in_ddt_cliente.id_ordine == id_ordine)).delete()\r\n    \r\n    \r\n    row = db(db.ordine_cliente.id == id_ordine).select().first()\r\n    \r\n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\r\n    nome_cliente = row[\'nome_cliente\']\r\n    data_inserimento = row[\'data_inserimento\']\r\n    listino = row[\'listino\']\r\n    riferimento_ordine_cliente = row[\'riferimento_ordine_cliente\']\r\n    listino = row[\'listino\']\r\n    magazzino_interno = row[\'magazzino_interno\']\r\n    numero_ordine = row[\'ultimo_codice_ordine\']\r\n    \r\n    rows = db(db.righe_in_ordine_cliente.id_ordine_cliente == id_ordine).select()\r\n    \r\n    quantita_prodotta=0\r\n    row_id=0\r\n    #print rows\r\n    for row in rows:\r\n        \r\n        \r\n        #print str(row.riga_emessa_in_ddt)\r\n        #print type(row.riga_emessa_in_ddt)\r\n        \r\n        if "commento" in row.codice_articolo:\r\n            quantita_da_produrre = prenotato = quantita_prodotta = saldo = 0\r\n            \r\n            pass\r\n        \r\n        elif not row.riga_emessa_in_ddt:\r\n            """\r\n            Vado a vedere la quantit\xc3\xa0 attualmente prodotta salvata nella tabella "produzione_righe_per_ddt"\r\n            """\r\n            row_id = row.id\r\n            dettagli_produzione_riga = db(db.produzione_righe_per_ddt.id_riga_ordine == row.id).select().first()\r\n            if dettagli_produzione_riga is not None:\r\n                #print "Riga trovata"\r\n                """\r\n                Se ho trovato la riga vuol dire che \xc3\xa8 stata immessa una quantit\xc3\xa0 in saldo.\r\n                Vado a recuperare la quantit\xc3\xa0 prodotta\r\n                """\r\n                quantita_da_produrre= int(row.quantita) - int(dettagli_produzione_riga.quantita_prodotta)\r\n                quantita_prodotta = dettagli_produzione_riga.quantita_prodotta\r\n                \r\n            else:\r\n                #print "Riga non trovata"\r\n                """\r\n                Metto la quantita prodotta = alla quantita richiesta per velocizzare l\'inserimento\r\n                row.quantita \xc3\xa8 l\'iniziale quantita richiesta nell\'ordine\r\n                """\r\n                quantita_da_produrre = 0\r\n                quantita_prodotta = 0\r\n            \r\n            \r\n         \r\n        quantita = 0  \r\n            \r\n        if row.quantita:\r\n        \tquantita = row.quantita\r\n        \r\n        #print row\r\n        \t\r\n        db.righe_in_ddt_cliente.insert(saldo=ritorna_quantita_saldo(row_id),codice_ordine=numero_ordine,quantita_richiesta=quantita,quantita_prodotta = quantita_prodotta, prezzo=row.prezzo,sconti=row.sconti,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_cliente,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,id_riga_ordine=row.id)\r\n    \r\n    \r\n    return "ok"\r\n\r\ndef ritorna_quantita_richiesta_da_riga_salvata(id_riga_salvata):\r\n    \r\n    #print "IN RITORNA QUANTITA DA RIGA SALVATA ",id_riga_salvata\r\n    try:\r\n        riga_salvata = db(db.righe_in_ordine_cliente.id == id_riga_salvata).select().first()\r\n                \r\n        #print "ECCOLO E ",riga_salvata\r\n    except Exception,e:\r\n        #print e\r\n        riga_salvata.quantita = 0\r\n        \r\n    return riga_salvata.quantita\r\n    return 0\r\n    \r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef add_row_to_ddt_fornitori(args):\r\n    \r\n    id_ordine = args[\'0\']\r\n    \r\n    #auth.user_id\r\n    #print "ID ORDINE : ",id_ordine\r\n    \r\n    db((db.righe_in_ddt_fornitore.user_id == auth.user_id) & (db.righe_in_ddt_fornitore.id_ordine == id_ordine)).delete()\r\n    \r\n    \r\n    row = db(db.ordine_fornitore.id == id_ordine).select().first()\r\n    \r\n    ultimo_codice_ordine = row[\'ultimo_codice_ordine\']\r\n    nome_fornitore = row[\'nome_fornitore\']\r\n    data_inserimento = row[\'data_inserimento\']\r\n    listino = row[\'listino\']\r\n    riferimento_ordine_fornitore = ""#row[\'riferimento_ordine_fornitore\']\r\n    listino = row[\'listino\']\r\n    magazzino_interno = row[\'magazzino_interno\']\r\n    numero_ordine = row[\'ultimo_codice_ordine\']\r\n    \r\n    rows = db((db.righe_in_ordine_fornitore.id_ordine_fornitore == id_ordine),(db.righe_in_ordine_fornitore.riga_emessa_in_ddt == \'F\')).select()\r\n    for row in rows:\r\n        \r\n        \r\n        #print str(row.riga_emessa_in_ddt)\r\n        #print type(row.riga_emessa_in_ddt)\r\n        if not row.riga_emessa_in_ddt:\r\n                       \r\n            \r\n            db.righe_in_ddt_fornitore.insert(codice_ordine=numero_ordine,quantita=row.quantita,prezzo=row.prezzo,sconti=row.sconti,codice_iva=row.codice_iva,evasione=row.evasione,user_id=auth.user_id,riferimento_ordine=riferimento_ordine_fornitore,id_ordine=id_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,descrizione=row.commento)\r\n    \r\n    \r\n    return "ok"\r\n\r\ndef return_fatture_in_scadenza():\r\n    try:\r\n        month = int(request.vars[\'m\'])\r\n    except:\r\n        month = datetime.datetime.now().month\r\n      \r\n        \r\n    day_start,day_end = monthrange(datetime.datetime.now().year, month)\r\n    day_start = 1\r\n    \r\n    st = str(day_start)+"/"+str(month)+"/"+str(datetime.datetime.now().year)\r\n    start_date = datetime.datetime(datetime.datetime.now().year,month,day_start)\r\n    end_date = datetime.datetime(datetime.datetime.now().year,month,day_end)\r\n    #print start_date,end_date\r\n    \r\n    \r\n    fields=[db.fatture_salvate.nome_cliente,db.fatture_salvate.numero_fattura,db.fatture_salvate.scadenza,db.fatture_salvate.totale]\r\n    links=[lambda row: BUTTON("Aggiungi fattura",_onclick=XML(\'aggiungiFatturaAEffetti(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n    form = SQLFORM.grid(db.fatture_salvate.scadenza <=end_date,user_signature=True,args=request.args[:1],create=False,editable=True,deletable=False,links=links,fields=fields,csv=False)\r\n    return dict(form=form)\r\n\r\ndef return_scadenziario():\r\n    try:\r\n        month = int(request.vars[\'m\'])\r\n    except:\r\n        month = datetime.datetime.now().month\r\n      \r\n    year = int(datetime.datetime.now().year)\r\n\t\t\t\r\n    \r\n    if  datetime.datetime.now().month > month:\r\n    \tyear = year +1\r\n    \t\r\n    #year=str(year)\r\n    \t\r\n    \r\n    day_start,day_end = monthrange(year, month)\r\n    day_start = 1\r\n    \r\n    st = str(day_start)+"/"+str(month)+"/"+str(year)\r\n    start_date = datetime.datetime(year,month,day_start)\r\n    end_date = datetime.datetime(year,month,day_end)\r\n    #print start_date,end_date\r\n    \r\n    db(db.scadenziario).delete()\r\n    \r\n    rows = db((db.righe_in_ordine_cliente.evasione >=start_date) & (db.righe_in_ordine_cliente.evasione <=end_date) & (db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo) & (db.righe_in_ordine_cliente.id_ordine_cliente == db.ordine_cliente.id)).select(orderby = db.righe_in_ordine_cliente.evasione)\r\n    for row in rows:\r\n         ##print row\r\n         \r\n         quantita_prodotta_fino_ad_ora = 0\r\n         q = db(db.produzione_righe_per_ddt.id_riga_ordine == row.righe_in_ordine_cliente.id).select().first()\r\n         \r\n         if q is not None:\r\n             quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta)\r\n             quantita_da_produrre = int(row.righe_in_ordine_cliente.quantita) - quantita_prodotta_fino_ad_ora\r\n         else:\r\n             quantita_da_produrre = row.righe_in_ordine_cliente.quantita\r\n         \r\n         row.quantita_da_produrre = quantita_da_produrre\r\n         \r\n         #print row.righe_in_ordine_cliente.prezzo\r\n         \r\n         \r\n         \r\n         try:\r\n             prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\r\n             #print prezzo\r\n             \r\n             prezzo = Money(str(prezzo),"EUR")\r\n             prezzo = prezzo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n             #prezzo = str(row.prezzo).replace(".",",")\r\n             """\r\n             prezzo=0\r\n             """\r\n             #prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\r\n         except:\r\n             prezzo="Null"\r\n             \r\n         if "commento" not in row.righe_in_ordine_cliente.codice_articolo:\r\n             if quantita_da_produrre >0:\r\n                 db.scadenziario.insert(data_consegna = row.righe_in_ordine_cliente.evasione,cliente= row.ordine_cliente.nome_cliente,riferimento_ordine=row.ordine_cliente.riferimento_ordine_cliente,codice_ordine = row.ordine_cliente.ultimo_codice_ordine,codice_articolo = row.anagrafica_articoli.codice_articolo,descrizione = row.anagrafica_articoli.descrizione,qta_ordine = row.righe_in_ordine_cliente.quantita,qta_saldo = quantita_da_produrre,prezzo=prezzo,id_riga=row.righe_in_ordine_cliente.id)\r\n    \r\n    db.scadenziario.id.readable = False\r\n    form = SQLFORM.grid(db.scadenziario,user_signature=True,args=request.args[:1],create=False,editable=False,deletable=False)\r\n    return dict(form=form)\r\n\r\n\r\ndef ritorna_quantita_saldo(id_riga_ordine_cliente):\r\n    \r\n    quantita_prodotta_fino_ad_ora = 0\r\n    q = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine_cliente).select().first()\r\n    quantita_da_produrre = 0\r\n    \r\n    riga = db(db.righe_in_ordine_cliente.id == id_riga_ordine_cliente).select().first()\r\n    \r\n    quantita_riga=0\r\n    if riga:\r\n     \tquantita_riga = int(riga.quantita)\r\n    \r\n    \r\n    #print "ID RIGA ORDINE ",id_riga_ordine_cliente\r\n    #print "quantita riga : ",quantita_riga\r\n    \r\n    if q is not None:\r\n             quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta)\r\n             #print "Prodotta fino ad ora ",quantita_prodotta_fino_ad_ora\r\n             quantita_da_produrre = quantita_riga - quantita_prodotta_fino_ad_ora\r\n    else:\r\n             quantita_da_produrre = quantita_riga\r\n         \r\n            \r\n    \r\n    return str(quantita_da_produrre)\r\n\r\n\r\ndef articoli_in_produzione():\r\n    db.articoli_in_produzione.id.readable = False\r\n    links=[lambda row: A(XML(\'Stampa RCP\'),_class=\'button btn btn-default\',_onClick=XML(\'stampaRcp(\'+str(row.id)+\')\'))]\r\n    form = SQLFORM.grid(db.articoli_in_produzione,create=False,editable=False,deletable=False,maxtextlength=100,paginate=10,links=links)\r\n    return dict(form=form)\r\n\r\n\r\ndef articoli_in_produzione_cron():\r\n  \r\n  \r\n    def ritorna_dettaglio_cliente(id_ordine,ordini_clienti):\r\n    \t\r\n    \t##print "IN RITORNA DETTAGLIO"\r\n        ##print "ID ORDINE CERCATO ",id_ordine\r\n    \t\r\n    \tfor ordine_cliente in ordini_clienti:\r\n    \t\t##print "ORDINE ID : ",ordine_cliente.id\r\n    \t\tif str(ordine_cliente.id) == str(id_ordine):\r\n    \t\t\t##print "TROVATO"\r\n    \t\t\t##print ordine_cliente\r\n    \t\t\treturn ordine_cliente\r\n    \t\t    \r\n    \t\t\r\n    \treturn None\r\n  \r\n    #print "qui"\r\n    db(db.articoli_in_produzione).delete()\r\n    #print "qui2"\r\n    #rows = db((db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo) & (db.righe_in_ordine_cliente.id_ordine_cliente == db.ordine_cliente.id)).select(orderby = db.righe_in_ordine_cliente.evasione)\r\n    #rows = db((db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo) & (db.righe_in_ordine_cliente.id_ordine_cliente == db.ordine_cliente.id)).select()\r\n    \r\n    \r\n    rows=db((db.righe_in_ordine_cliente.riga_emessa_in_ddt == \'F\') & (db.righe_in_ordine_cliente.codice_articolo == db.anagrafica_articoli.codice_articolo)).select(orderby = db.righe_in_ordine_cliente.evasione)\r\n    #print rows\r\n    \r\n    dati_clienti =  db(db.ordine_cliente).select()\r\n\r\n    \r\n\r\n    iterazione=0\r\n    for row in rows:\r\n         #print iterazione\r\n         iterazione+=1\r\n         \r\n         \r\n         dettaglio_cliente = ritorna_dettaglio_cliente(row.righe_in_ordine_cliente.id_ordine_cliente,dati_clienti)\r\n         #( db(db.ordine_cliente.id == db.righe_in_ordine_cliente.id_ordine_cliente).select().first()\r\n         \r\n         if dettaglio_cliente is not None:\r\n\t         quantita_prodotta_fino_ad_ora = 0\r\n\t         q = db(db.produzione_righe_per_ddt.id_riga_ordine == row.righe_in_ordine_cliente.id).select().first()\r\n\t         \r\n\t         if q is not None:\r\n\t             quantita_prodotta_fino_ad_ora = int(q.quantita_prodotta)\r\n\t             #print "Fino ad ora ",quantita_prodotta_fino_ad_ora\r\n\t             \r\n\t             quantita_da_produrre = int(row.righe_in_ordine_cliente.quantita) - quantita_prodotta_fino_ad_ora\r\n\t         else:\r\n\t             quantita_da_produrre = row.righe_in_ordine_cliente.quantita\r\n\t         \r\n\t         row.quantita_da_produrre = quantita_da_produrre\r\n\t         \r\n\t         #print row.righe_in_ordine_cliente.prezzo\r\n\t         \r\n\t         \r\n\t         \r\n\t         try:\r\n\t             prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\r\n\t             ##print prezzo\r\n\t             \r\n\t             prezzo = Money(str(prezzo),"EUR")\r\n\t             prezzo = prezzo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n\t             #prezzo = str(row.prezzo).replace(".",",")\r\n\t             """\r\n\t             prezzo=0\r\n\t             """\r\n\t             #prezzo = float(quantita_da_produrre) * float(row.righe_in_ordine_cliente.prezzo)\r\n\t         except:\r\n\t             prezzo="Null"\r\n\t             #print "Eccezzione"\r\n\t             \r\n\t         if "commento" not in row.righe_in_ordine_cliente.codice_articolo:\r\n\t             if quantita_da_produrre > 0:\r\n\t                 #print "Inserisco"\r\n\t                 dettaglio_cliente\r\n\t                 #dettaglio_cliente = dettaglio_cliente.ordine_cliente\r\n\t                 db.articoli_in_produzione.insert(data_consegna = row.righe_in_ordine_cliente.evasione,cliente= dettaglio_cliente.nome_cliente,riferimento_ordine=dettaglio_cliente.riferimento_ordine_cliente,codice_ordine = dettaglio_cliente.ultimo_codice_ordine,codice_articolo = row.anagrafica_articoli.codice_articolo,descrizione = row.anagrafica_articoli.descrizione,qta_ordine = row.righe_in_ordine_cliente.quantita,qta_saldo = quantita_da_produrre,prezzo=prezzo,id_riga=str(row.righe_in_ordine_cliente.id))\r\n    \r\n    return locals()\r\n\r\ndef scadenziario():\r\n    current_month = 1\r\n    return locals()\r\n\r\ndef gestione_numero_fattura():\r\n    form = SQLFORM.grid(db.fattura,csv=False,create=False,editable=True,searchable=False)\r\n    return locals()\r\n\r\ndef gestione_numero_ddt():\r\n    form = SQLFORM.grid(db.ddt,csv=False,create=False,editable=True,searchable=False,deletable=False)\r\n    return locals()\r\n\r\ndef ritorna_numero_ddt_da_ddt_id(id):\r\n    ddt_id = db(db.ddt_da_fatturare.id==id).select()\r\n    #print ddt_id\r\n    #numero_ddt = db(db.ddt_cliente.ddt_id == ddt_id).select().first()["numero_ddt"]\r\n    return ddt_id\r\n\r\ndef ddt_da_fatturare():\r\n    \r\n    db.ddt_da_fatturare.user_id.default = auth.user_id\r\n    #db.ddt_da_fatturare.numero_ddt = Field.Virtual("Numero_ddt",lambda row:ritorna_numero_ddt_da_ddt_id(row.ddt_da_fatturare.id))\r\n    fields = [db.ddt_da_fatturare.numero_ddt,db.ddt_da_fatturare.data_emissione,db.ddt_da_fatturare.totale]\r\n    form = SQLFORM.grid(db.ddt_da_fatturare,fields=fields,csv=False,create=False,editable=False,searchable=False)\r\n    return locals()\r\n\r\ndef righe_in_ddt_cliente():\r\n    \r\n    db.righe_in_ddt_cliente.user_id.default = auth.user_id\r\n    db.righe_in_ddt_cliente.quantita_richiesta.writable=False\r\n    db.righe_in_ddt_cliente.quantita_richiesta.readonly=True\r\n    \r\n    if len(request.args) > 1 and (\'edit\' in request.args):\r\n         #print "ECCOLO"\r\n         fields = [db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo]\r\n         form = SQLFORM.grid(db.righe_in_ddt_cliente,fields=fields,csv=False,user_signature=True,args=request.args[:1])\r\n    else:       \r\n    \r\n         fields = [db.righe_in_ddt_cliente.codice_ordine,db.righe_in_ddt_cliente.codice_articolo,db.righe_in_ddt_cliente.n_riga,db.righe_in_ddt_cliente.riferimento_ordine,db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.saldo,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo,db.righe_in_ddt_cliente.evasione]\r\n         form = SQLFORM.grid(db.righe_in_ddt_cliente.user_id==auth.user_id,fields=fields,csv=False)\r\n         \r\n    return locals()\r\n\r\ndef righe_in_ddt_cliente_mod():\r\n    \r\n    db.righe_in_ddt_cliente.user_id.default = auth.user_id\r\n    db.righe_in_ddt_cliente.quantita_richiesta.writable=False\r\n    db.righe_in_ddt_cliente.quantita_richiesta.readonly=True\r\n    \r\n    if len(request.args) > 1 and (\'edit\' in request.args):\r\n         #print "ECCOLO"\r\n         fields = [db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo]\r\n         form = SQLFORM.grid(db.righe_in_ddt_cliente,fields=fields,csv=False,user_signature=True,args=request.args[:1])\r\n    else:       \r\n    \r\n         fields = [db.righe_in_ddt_cliente.codice_ordine,db.righe_in_ddt_cliente.codice_articolo,db.righe_in_ddt_cliente.n_riga,db.righe_in_ddt_cliente.riferimento_ordine,db.righe_in_ddt_cliente.quantita_richiesta,db.righe_in_ddt_cliente.saldo,db.righe_in_ddt_cliente.quantita_prodotta,db.righe_in_ddt_cliente.prezzo,db.righe_in_ddt_cliente.evasione]\r\n         form = SQLFORM.grid(db.righe_in_ddt_cliente.user_id==auth.user_id,fields=fields,csv=False)\r\n         \r\n         \r\n    return locals()\r\n\r\ndef righe_in_ddt_fornitore():\r\n    \r\n    db.righe_in_ddt_fornitore.user_id.default = auth.user_id\r\n    fields = [db.righe_in_ddt_fornitore.codice_ordine,db.righe_in_ddt_fornitore.codice_articolo,db.righe_in_ddt_fornitore.n_riga,db.righe_in_ddt_fornitore.riferimento_ordine,db.righe_in_ddt_fornitore.u_m,db.righe_in_ddt_fornitore.quantita,db.righe_in_ddt_fornitore.prezzo,db.righe_in_ddt_fornitore.sconti,db.righe_in_ddt_fornitore.codice_iva,db.righe_in_ddt_fornitore.evasione]\r\n    form = SQLFORM.grid(db.righe_in_ddt_fornitore.user_id == auth.user_id,fields=fields,csv=False)\r\n    return locals()\r\n\r\ndef aspetto_esteriore_dei_beni():\r\n    form = SQLFORM.grid(db.aspetto_esteriore_dei_beni)\r\n    return locals()\r\n\r\ndef causali():\r\n    form = SQLFORM.grid(db.causali)\r\n    return locals()\r\n\r\ndef porto():\r\n    form = SQLFORM.grid(db.porto)\r\n    return locals()\r\n\r\ndef modifica_ddt():\r\n    \r\n    \r\n    errore = False\r\n    try:\r\n        ddt_id = request.vars.a\r\n        id_cliente = request.vars.b\r\n        \r\n        #print "DDT ID : "+ddt_id\r\n        nome_cliente = db(db.clienti.id==id_cliente).select().first()["nome"]\r\n        \r\n        db(db.righe_in_ddt_cliente.user_id==auth.user_id).delete() \r\n        \r\n        \r\n        d = db(db.saved_ddt.saved_ddt_id == ddt_id).select().first()\r\n        numero_ddt_corrente = numero_ddt=d["numero_ddt"]\r\n        data_ddt=datetime.datetime.strptime(d["data_inserimento"][0:10],"%Y-%m-%d").date()\r\n        \r\n        data_ddt=data_ddt.strftime("%d/%m/%Y")\r\n        \r\n        righe_form="ok"\r\n        \r\n        \r\n        db(db.righe_in_ddt_cliente).delete()\r\n        ##print "SONO QUI"\r\n        \r\n        query=db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id).select()\r\n        \r\n        for r in query:\r\n            \r\n            \r\n            if "commento" in r.codice_articolo:\r\n                quantita_da_produrre = prenotato = quantita_prodotta = saldo = 0\r\n            \r\n                pass\r\n            \r\n            elif "commento" not in r.codice_articolo:\r\n                #print "prima"\r\n                """\r\n                Vado a vedere la quantit\xc3\xa0 attualmente prodotta salvata nella tabella "produzione_righe_per_ddt"\r\n                """\r\n                ##print "RIGA VEFIASDFA"\r\n                ##print "ciao"\r\n                if r.id_riga_ordine is None or len(r.id_riga_ordine)<1:\r\n                    #print "riciao"\r\n                    id_riga_ordine=db((db.righe_in_ordine_cliente.id_ordine_cliente == r.id_ordine) & (db.righe_in_ordine_cliente.n_riga ==r.n_riga)).select().first()\r\n                    if id_riga_ordine is not None:\r\n                        id_riga_ordine = id_riga_ordine["id"]\r\n                    else:\r\n                        errore = True\r\n                        #print r\r\n                        msg = "La riga {0} dell\'ordine {1} \xc3\xa8 stata cancellata dalle righe dell\'ordine".format(r.n_riga,r.id_ordine)\r\n                        response.flash=msg\r\n                else:\r\n                    #print "provo"\r\n                    id_riga_ordine = r.id_riga_ordine\r\n                    \r\n                #print "ID RIGA ORDINE ",id_riga_ordine\r\n                \r\n                row_id = r.id\r\n                dettagli_produzione_riga = db(db.produzione_righe_per_ddt.id_riga_ordine == id_riga_ordine).select().first()\r\n                dettagli_produzione_riga = db((db.saved_righe_in_ddt_cliente.id_riga_ordine == id_riga_ordine) &  (db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id)).select().first()\r\n                #print dettagli_produzione_riga\r\n                if dettagli_produzione_riga is not None:\r\n                    #print "Riga trovata"\r\n                    """\r\n                    Se ho trovato la riga vuol dire che \xc3\xa8 stata immessa una quantit\xc3\xa0 in saldo.\r\n                    Vado a recuperare la quantit\xc3\xa0 prodotta\r\n                    """\r\n                    #quantita_da_produrre= int(ritorna_quantita_richiesta_da_riga_salvata(id_riga_ordine)) - int(dettagli_produzione_riga.quantita_prodotta)\r\n                    \r\n                    #quantita_da_produrre= int(dettagli_produzione_riga.quantita_prodotta)\r\n                    quantita_da_produrre= int(dettagli_produzione_riga.quantita)\r\n                    \r\n                    #print "quantita da produrre ",quantita_da_produrre\r\n                    quantita_prodotta = dettagli_produzione_riga.quantita\r\n                    \r\n                else:\r\n                    #print "Riga non trovata"\r\n                    """\r\n                    Metto la quantita prodotta = alla quantita richiesta per velocizzare l\'inserimento\r\n                    row.quantita \xc3\xa8 l\'iniziale quantita richiesta nell\'ordine\r\n                    """\r\n                    #quantita_da_produrre = r.quantita\r\n                    quantita_da_produrre = 0\r\n                    quantita_prodotta = 0\r\n            \r\n            \r\n            \r\n                \r\n            db.righe_in_ddt_cliente.insert(saldo=ritorna_quantita_saldo(id_riga_ordine),user_id = auth.user_id,codice_articolo = r.codice_articolo,descrizione=r.descrizione,riferimento_ordine=r.riferimento_ordine,u_m=r.u_m,prezzo=r.prezzo,sconti=r.sconti,codice_iva=r.codice_iva,n_riga=r.n_riga,evasione=r.evasione,id_ordine=r.id_ordine,codice_ordine=r.codice_ordine,quantita_richiesta=ritorna_quantita_richiesta_da_riga_salvata(id_riga_ordine),quantita_prodotta=quantita_da_produrre,id_riga_ordine=r.id_riga_ordine)\r\n        \r\n        \r\n        #print "SONO QUIkk"\r\n        #print ddt_id\r\n        ordine_id = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id).select().first()["id_ordine"]\r\n        #print "SONO QUI2"\r\n        numero_riga_corrente = db(db.righe_in_ordine_cliente.id_ordine_cliente==ordine_id).count()+1\r\n        db.righe_in_ordine_cliente.n_riga.default = numero_riga_corrente\r\n        db.righe_in_ordine_cliente.n_riga.writable = False\r\n        \r\n        db.righe_in_ordine_cliente.id_ordine_cliente.default = ordine_id\r\n        db.righe_in_ordine_cliente.id_ordine_cliente.writable = False\r\n        \r\n        db.righe_in_ordine_cliente.prezzo.default = 0\r\n        #db.righe_in_ordine_cliente.prezzo.writable = False\r\n        #fields=[\'\']\r\n        \r\n        \r\n        cliente = db(db.clienti.id == id_cliente).select().first()\r\n        db.righe_in_ordine_cliente.codice_iva.default=cliente.codice_iva\r\n       \r\n        ddt_id2 = db(db.ddt_cliente.id == ddt_id).select()\r\n        \r\n        links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRigheMod(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n        fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente]\r\n        query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\r\n        #query=(db.ordine_cliente.ddt_completato == \'0\')\r\n        \r\n        righe_in_ordine_cliente_form = SQLFORM.grid(query=query,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        luoghi = []\r\n        \r\n        row = db(db.clienti.id == id_cliente).select().first()\r\n        \r\n        error = False\r\n        if row.citta is None:\r\n            response.flash="Il cliente non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\r\n            error=True\r\n        \r\n        try:\r\n            if len(row.luogo_consegna_1) > 0:\r\n                luoghi.append(row.luogo_consegna_1)\r\n                \r\n            if len(row.luogo_consegna_2) > 0:\r\n                luoghi.append(row.luogo_consegna_2)\r\n            \r\n            if len(row.luogo_consegna_3) > 0:\r\n                luoghi.append(row.luogo_consegna_3)\r\n            \r\n            if len(row.luogo_consegna_4) > 0:\r\n                luoghi.append(row.luogo_consegna_4)\r\n            \r\n            if len(row.luogo_consegna_5) > 0:\r\n                luoghi.append(row.luogo_consegna_5)\r\n                \r\n                \r\n            if len(row.luogo_consegna_6) > 0:\r\n                luoghi.append(row.luogo_consegna_6)\r\n        except:\r\n            luoghi.append("Cliente,,,,,,")\r\n            \r\n        trasporto_a_mezzo = Set()\r\n        trasporto_a_mezzo.add("Mittente")\r\n        trasporto_a_mezzo.add("Destinatario")\r\n        trasporto_a_mezzo.add("Vettore")\r\n        \r\n        aspetto_esteriore_dei_beni = Set()\r\n        rows = db(db.aspetto_esteriore_dei_beni).select()\r\n        for row in rows:\r\n            aspetto_esteriore_dei_beni.add(row.nome)\r\n            \r\n        causali = Set()\r\n        rows = db(db.causali).select()\r\n        for row in rows:\r\n            causali.add(row.nome)\r\n            \r\n            \r\n        porto = Set()\r\n        rows = db(db.porto).select()\r\n        for row in rows:\r\n            porto.add(row.nome)\r\n    except Exception, e:\r\n        #print e\r\n        errore=True;\r\n    \r\n    return locals()\r\n\r\n\r\ndef fatturazione_istantanea_2():\r\n \r\n    #print request.args\r\n    id_cliente = request.args[0]\r\n    #print request.args[0]\r\n    #print "ID CLIENTE = {0}".format(id_cliente)\r\n    \r\n    nome_cliente =db(db.clienti.id==id_cliente).select().first()["nome"]\r\n   \r\n    \r\n    #print nome_cliente\r\n    form_righe = form = SQLFORM.grid(db.righe_in_fattura_istantanea,formname=\'mod\',maxtextlength=100,create=True,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1])    \r\n    \r\n    new_order = False\r\n    if \'new\' in request.args:\r\n        new_order = True\r\n    \r\n    return locals()\r\n\r\ndef nota_di_accredito_2():\r\n \r\n    id_cliente = request.args[0]\r\n    #print request.args[0]\r\n    #print "ID CLIENTE = {0}".format(id_cliente)\r\n    \r\n    nome_cliente =db(db.clienti.id==id_cliente).select().first()["nome"]\r\n    if "leonardo" in nome_cliente.lower():\r\n        enti=db(db.enti_leonardo).select()\r\n    else:\r\n        enti=""\r\n    \r\n    #print nome_cliente\r\n    form_righe = form = SQLFORM.grid(db.righe_in_fattura_istantanea,formname=\'mod\',maxtextlength=100,create=True,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True,args=request.args[:1])    \r\n\r\n    new_order = False\r\n    if \'new\' in request.args:\r\n        new_order = True\r\n    return locals()\r\n\r\n\r\ndef mod_ddt_clienti_2():\r\n \r\n    id_cliente = request.args[0]\r\n    nome_cliente =db(db.clienti.id==id_cliente).select().first()["nome"]    \r\n  \r\n    \r\n    """\r\n    Ritornare i ddt collegati al cliente\r\n    """\r\n    db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\r\n    \r\n    fields = [db.ddt_cliente.numero_ddt,db.ddt_cliente.data_richiesta]\r\n    query=((db.ddt_cliente.id_cliente == id_cliente) & (db.ddt_cliente.numero_ddt !="None")) \r\n    links=[lambda row: A("Modifica",_href=URL(\'modifica_ddt\',vars=dict(a=row.id,b=id_cliente)),_class=\'button btn btn-default\')]\r\n    form = SQLFORM.grid(query=query,formname=\'mod\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,fields=fields,user_signature=True,args=request.args[:1],links=links)\r\n    #form ="hello"\r\n    return locals()\r\n\r\ndef mod_ddt_clienti_3():\r\n    id_ddt = request.args[0]\r\n    \r\n    #db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\r\n    \r\n    \r\n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\r\n    id_cliente = ddt_id.id_cliente\r\n    nome_cliente = ddt_id.nome_cliente\r\n    \r\n    \r\n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\r\n    n = numero_ddt_salvato.split("/")[0]\r\n    a = numero_ddt_salvato.split("/")[1]\r\n    new_n = str(int(n) + 1)\r\n    numero_ddt_corrente = new_n + "/" + a\r\n    \r\n    #print "ID CLIENTE IN DDT2 = ",id_cliente\r\n    \r\n    \r\n    luoghi = []\r\n    \r\n    row = db(db.clienti.id == id_cliente).select().first()\r\n    \r\n    error = False\r\n    if row.citta is None:\r\n        response.flash="Il cliente non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\r\n        error=True\r\n    \r\n    try:\r\n        if len(row.luogo_consegna_1) > 0:\r\n            luoghi.append(row.luogo_consegna_1)\r\n            \r\n        if len(row.luogo_consegna_2) > 0:\r\n            luoghi.append(row.luogo_consegna_2)\r\n        \r\n        if len(row.luogo_consegna_3) > 0:\r\n            luoghi.append(row.luogo_consegna_3)\r\n        \r\n        if len(row.luogo_consegna_4) > 0:\r\n            luoghi.append(row.luogo_consegna_4)\r\n        \r\n        if len(row.luogo_consegna_5) > 0:\r\n            luoghi.append(row.luogo_consegna_5)\r\n            \r\n        if len(row.luogo_consegna_6) > 0:\r\n            luoghi.append(row.luogo_consegna_6)\r\n    except:\r\n        luoghi.append("Cliente,,,,,,")\r\n        \r\n    trasporto_a_mezzo = Set()\r\n    trasporto_a_mezzo.add("Mittente")\r\n    trasporto_a_mezzo.add("Destinatario")\r\n    trasporto_a_mezzo.add("Vettore")\r\n    \r\n    aspetto_esteriore_dei_beni = Set()\r\n    rows = db(db.aspetto_esteriore_dei_beni).select()\r\n    for row in rows:\r\n        aspetto_esteriore_dei_beni.add(row.nome)\r\n        \r\n    causali = Set()\r\n    rows = db(db.causali).select()\r\n    for row in rows:\r\n        causali.add(row.nome)\r\n        \r\n        \r\n    porto = Set()\r\n    rows = db(db.porto).select()\r\n    for row in rows:\r\n        porto.add(row.nome)\r\n    \r\n    \r\n\r\n    ddt_id2 = db(db.ddt_cliente.id == id_ddt).select()\r\n    \r\n    links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRighe(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n    fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente]\r\n    query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\r\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\r\n    \r\n    righe_in_ordine_cliente_form = SQLFORM.grid(query=query,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\r\n    \r\n    \r\n    \r\n    \r\n    return locals()\r\n\r\n\r\ndef ddt_clienti_2():\r\n    id_ddt = request.args[0]\r\n    \r\n    #db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\r\n    \r\n    \r\n    ddt_id = db(db.ddt_cliente.id == id_ddt).select().first()\r\n    id_cliente = ddt_id.id_cliente\r\n    nome_cliente = ddt_id.nome_cliente\r\n    \r\n    \r\n    numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\r\n    n = numero_ddt_salvato.split("/")[0]\r\n    a = numero_ddt_salvato.split("/")[1]\r\n    new_n = str(int(n) + 1)\r\n    numero_ddt_corrente = new_n + "/" + a\r\n    \r\n    #print "ID CLIENTE IN DDT2 = ",id_cliente\r\n    \r\n    \r\n    luoghi = []\r\n    \r\n    row = db(db.clienti.id == id_cliente).select().first()\r\n    \r\n    error = False\r\n    if row.citta is None:\r\n        response.flash="Il cliente non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\r\n        error=True\r\n    \r\n    try:\r\n        if len(row.luogo_consegna_1) > 0:\r\n            luoghi.append(row.luogo_consegna_1)\r\n            \r\n        if len(row.luogo_consegna_2) > 0:\r\n            luoghi.append(row.luogo_consegna_2)\r\n        \r\n        if len(row.luogo_consegna_3) > 0:\r\n            luoghi.append(row.luogo_consegna_3)\r\n        \r\n        if len(row.luogo_consegna_4) > 0:\r\n            luoghi.append(row.luogo_consegna_4)\r\n        \r\n        if len(row.luogo_consegna_5) > 0:\r\n            luoghi.append(row.luogo_consegna_5)\r\n        \r\n        if len(row.luogo_consegna_6) > 0:\r\n            luoghi.append(row.luogo_consegna_6)\r\n    except:\r\n        luoghi.append("Cliente,,,,,,")\r\n    \r\n    \r\n    selected_trasporto = row.trasporto_a_mezzo\r\n    selected_causale = row.causale_trasporto\r\n    selected_porto=row.porto\r\n    selected_vettore=row.vettore\r\n    \r\n    ##print selected_causale\r\n    \r\n        \r\n    trasporto_a_mezzo = Set()\r\n    trasporto_a_mezzo.add("Mittente")\r\n    trasporto_a_mezzo.add("Destinatario")\r\n    trasporto_a_mezzo.add("Vettore")\r\n    \r\n    aspetto_esteriore_dei_beni = Set()\r\n    rows = db(db.aspetto_esteriore_dei_beni).select()\r\n    for row in rows:\r\n        aspetto_esteriore_dei_beni.add(row.nome)\r\n        \r\n    causali = Set()\r\n    rows = db(db.causali).select()\r\n    for row in rows:\r\n        causali.add(row.nome)\r\n        \r\n        \r\n    porto = Set()\r\n    rows = db(db.porto).select()\r\n    for row in rows:\r\n        porto.add(row.nome)\r\n    \r\n    \r\n\r\n    ddt_id2 = db(db.ddt_cliente.id == id_ddt).select()\r\n    \r\n    links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRighe(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n    fields=[db.ordine_cliente.ultimo_codice_ordine,db.ordine_cliente.riferimento_ordine_cliente,db.ordine_cliente.data_ordine_cliente]\r\n    query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\r\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\r\n    \r\n    righe_in_ordine_cliente_form = SQLFORM.grid(query=query,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\r\n    \r\n    \r\n    \r\n    \r\n    return locals()\r\n\r\ndef ddt_fornitori_2():\r\n    id_ddt = request.args[0]\r\n    \r\n    db(db.righe_in_ddt_fornitore.user_id == auth.user_id).delete()\r\n    \r\n    \r\n    ddt_id = db(db.ddt_fornitore.id == id_ddt).select().first()\r\n    id_fornitore = ddt_id.id_fornitore\r\n    nome_fornitore = ddt_id.nome_fornitore\r\n    \r\n    try:\r\n        numero_ddt_salvato = db(db.ddt).select().first()["numero_ddt"]\r\n        n = numero_ddt_salvato.split("/")[0]\r\n        a = numero_ddt_salvato.split("/")[1]\r\n        new_n = str(int(n) + 1)\r\n        numero_ddt_corrente = new_n + "/" + a\r\n    except:\r\n        db.ddt.insert(numero_ddt="0/17")\r\n        numero_ddt_corrente = "1/17"\r\n    \r\n    \r\n    row = db(db.fornitori.id == id_fornitore).select().first()\r\n    \r\n    error = False\r\n    if row.citta is None:\r\n        response.flash="Il fornitore non ha la citt\xc3\xa0 in anagrafica\\nAggiornare l\'anagrafica per poter emettere il DDT"\r\n        error=True\r\n    \r\n    \r\n    luoghi = []\r\n    \r\n   \r\n    \r\n    try:\r\n        if len(row.luogo_consegna_1) is not Null:\r\n            luoghi.append(row.luogo_consegna_1)\r\n        \r\n        if len(row.luogo_consegna_2) is not Null:\r\n            luoghi.append(row.luogo_consegna_2)\r\n    except:\r\n        luoghi.append("Indirizzo fornitore,,,,,")\r\n   \r\n        \r\n       \r\n    trasporto_a_mezzo = Set()\r\n    trasporto_a_mezzo.add("Mittente")\r\n    trasporto_a_mezzo.add("Destinatario")\r\n    trasporto_a_mezzo.add("Vettore")\r\n    \r\n    aspetto_esteriore_dei_beni = Set()\r\n    rows = db(db.aspetto_esteriore_dei_beni).select()\r\n    for row in rows:\r\n        aspetto_esteriore_dei_beni.add(row.nome)\r\n        \r\n    causali = Set()\r\n    rows = db(db.causali).select()\r\n    for row in rows:\r\n        causali.add(row.nome)\r\n        \r\n        \r\n    porto = Set()\r\n    rows = db(db.porto).select()\r\n    for row in rows:\r\n        porto.add(row.nome)\r\n\r\n    ddt_id2 = db(db.ddt_cliente.id == id_ddt).select()\r\n    \r\n    links=[lambda row: BUTTON("Aggiungi righe",_onclick=XML(\'aggiungiRigheFornitore(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n    fields=[db.ordine_fornitore.ultimo_codice_ordine,db.ordine_fornitore.riferimento_ordine_cliente,db.ordine_fornitore.data_ordine_fornitore]\r\n    query=((db.ordine_fornitore.id_fornitore== id_fornitore) & (db.ordine_fornitore.ddt_completato ==\'F\'))\r\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\r\n    \r\n    righe_in_ordine_fornitore_form = SQLFORM.grid(query=query,formname=\'ordini_fornitorii_ddt\',maxtextlength=100,create=False,editable=True,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\r\n    \r\n    \r\n    \r\n    \r\n    return locals()\r\n\r\n\r\n\r\n\r\n\r\ndef crea_riba():\r\n    \r\n    current_month = 1\r\n    \r\n    return locals()\r\n    \r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef ristampa_fattura_da_id(args):\r\n    \r\n    \r\n    \r\n    id_fattura=args[\'0\']\r\n    dati_fattura = db(db.fatture_salvate.id == id_fattura).select().first()\r\n    \r\n    #print dati_fattura\r\n    \r\n    id_cliente = dati_fattura.id_cliente\r\n    \r\n    ddts_id = dati_fattura.id_ddt\r\n    #response.flash = ddts_id\r\n    \r\n    \r\n    numero_fattura_da_salvare = dati_fattura.numero_fattura\r\n     \r\n    """\r\n    Dati cliente\r\n    """\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    \r\n    \r\n    \r\n    fattura = FATTURA("FATTURA DIFFERITA",datetime.datetime.now().date().strftime("%d/%m/%Y"),numero_fattura_da_salvare)\r\n    fattura.intestazione(nome_cliente,citta_cliente,indirizzo_cliente,cap_cliente,provincia_cliente,nazione_cliente,cf_cliente,pi_cliente)\r\n    \r\n    \r\n    fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),"PAGAMENTO","SCADEMZA")\r\n    \r\n    \r\n    \r\n    ddts_id = eval(ddts_id)\r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    \r\n    lista_ddt = []\r\n    for ddt_id in ddts_id:\r\n        \r\n        \r\n        lista_ddt.append(ddt_id)\r\n        \r\n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id).select()\r\n        #print "DDT ID : ",ddt_id\r\n        for row in rows:\r\n            \r\n            \r\n            id_ordine = row.id_ordine\r\n            try:\r\n                  pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\r\n                  #print "pagamento = ",pagamento\r\n                  if pagamento is None:\r\n                        pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                        \r\n                  giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                  scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                  scadenza = scadenza.strftime("%d/%m/%Y")\r\n                  fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(dettagli_banca.iban),pagamento,str(scadenza))\r\n            except:\r\n                  response.flash="Controllare il tipo di pagamento in anagrafica"\r\n                  return locals()\r\n            \r\n            #print "Aggiunta rig"\r\n            sconti = row.sconti\r\n            if row.sconti is None:\r\n                \r\n                sconti=""\r\n            \r\n            importo = saved_importo = float(row.quantita) * float(row.prezzo)\r\n            importo = Money(str(importo),"EUR")\r\n            importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n            prezzo = str(row.prezzo).replace(".",",")\r\n            \r\n            codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n            percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n            \r\n            importo_totale +=saved_importo\r\n            imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n            \r\n            if not codice_iva in lista_codici_iva:\r\n                lista_codici_iva[codice_iva] = saved_importo\r\n            else:\r\n                lista_codici_iva[codice_iva] += saved_importo\r\n            \r\n            fattura.add_row(row.codice_articolo,row.descrizione,row.riferimento_ordine,row.u_m,row.quantita,prezzo,sconti,importo,codice_iva)\r\n        \r\n    \r\n    \r\n    #print lista_codici_iva\r\n    \r\n    \r\n    \r\n    bollo_presente = False\r\n    bollo = 0\r\n    for k,v in lista_codici_iva.iteritems():\r\n        codice_iva = k\r\n        importo_netto = v\r\n        #print "LISTA CODICI : ",codice_iva,importo_netto\r\n        dettaglio_iva = db(db.anagrafica_codici_iva.codice_iva == codice_iva).select().first()\r\n        percentuale_iva = dettaglio_iva.percentuale_iva\r\n        descrizione_iva = dettaglio_iva.descrizione_codice_iva\r\n        imposta_iva = return_imposta(v,percentuale_iva)\r\n        if dettaglio_iva.bollo_su_importi_esenti is True:\r\n            if not bollo_presente:\r\n                bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n                bollo_presente = True\r\n                \r\n        fattura.footer_2(codice_iva,"",return_currency(importo_netto),descrizione_iva,return_currency(imposta_iva),return_currency(bollo))\r\n        bollo = 0\r\n                \r\n                \r\n    if bollo_presente:\r\n        bollo = db(db.bolli.descrizione=="Fattura").select().first()["valore"]\r\n        importo_totale += float(bollo)\r\n     \r\n    importo_totale_da_salvare = importo_totale +imposta_iva\r\n    \r\n    \r\n              \r\n    importo_totale = Money(str(importo_totale),"EUR")\r\n    importo_totale = importo_totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    \r\n    fattura.footer(str(importo_totale)," "," "," "," ",str(importo_totale),str(return_currency(imposta_totale)))    \r\n    fattura.totale(str(importo_totale_da_salvare))\r\n    \r\n    #db.fatture_salvate.insert(nome_cliente=nome_cliente,data_fattura = datetime.datetime.now().strftime("%d/%m/%Y"),numero_fattura = numero_fattura_da_salvare,id_cliente=id_cliente,id_ddt = lista_ddt,totale = importo_totale_da_salvare)     \r\n        \r\n        \r\n    \r\n   \r\n    \r\n   \r\n    fattura.insert_rows()\r\n    fattura.create_pdf()\r\n    \r\n\r\ndef ristampa_fattura():\r\n      \r\n    links=[lambda row: BUTTON("Ristampa",_onclick=XML(\'ristampaFattura(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n    fields=[db.fatture_salvate.data_fattura,db.fatture_salvate.numero_fattura,db.fatture_salvate.nome_cliente,db.fatture_salvate.totale]\r\n    fatture_da_ristampare = SQLFORM.grid(db.fatture_salvate,formname=\'fatture_salvate\',maxtextlength=100,create=False,editable=False,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,fields=fields)\r\n    return locals()\r\n\r\ndef fatturazione_differita_2():\r\n    id_fattura = request.args[0]\r\n    \r\n    fattura = db(db.fattura_cliente.id == id_fattura).select().first()\r\n    id_cliente = fattura.id_cliente\r\n    dal = fattura.dal\r\n    al_fixed = fattura.al\r\n    al = fattura.al + datetime.timedelta(days=2)\r\n    nome_cliente = fattura.nome_cliente\r\n    \r\n    \r\n    """\r\n    """\r\n        \r\n    #print "ID CLIENTE IN FATTURA DIFFERITA = ",id_cliente\r\n    \r\n    """\r\n    Select all ddts of the selected client.\r\n    """\r\n    #print fattura.dal,al\r\n    ddts_id = ((db.ddt_cliente.id_cliente == id_cliente) & (db.ddt_cliente.data_richiesta >= fattura.dal) & (db.ddt_cliente.data_richiesta <= al) & (db.ddt_cliente.fattura_emessa == \'F\') & (db.ddt_cliente.numero_ddt != \'None\'))\r\n    #ddts_id = ((db.ddt_cliente.id_cliente == id_cliente) & (db.ddt_cliente.data_richiesta >= fattura.dal) & (db.ddt_cliente.data_richiesta <= al) & (db.ddt_cliente.numero_ddt != \'None\'))\r\n    \r\n\r\n    \r\n    links=[lambda row: BUTTON("Aggiungi DDT",_onclick=XML(\'aggiungiDDT(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n    db.ddt_cliente.totale = Field.Virtual("Totale", lambda row: calcola_totale_iva_inclusa_da_ddt(row.ddt_cliente.id))\r\n    #db.ddt_cliente.totale = Field.Virtual("Totale", lambda row: 0)\r\n    fields=[db.ddt_cliente.data_richiesta,db.ddt_cliente.numero_ddt,db.ddt_cliente.totale]\r\n    #query=((db.ordine_cliente.id_cliente== id_cliente) & (db.ordine_cliente.ddt_completato ==\'F\'))\r\n    #query=(db.ordine_cliente.ddt_completato == \'0\')\r\n    print "---------------"\r\n    ddt_da_fatturare = SQLFORM.grid(query=ddts_id,formname=\'ordini_clienti_ddt\',maxtextlength=100,create=False,editable=False,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,links=links,user_signature=True,args=request.args[:1],fields=fields)\r\n    \r\n   \r\n    \r\n    return locals()\r\n\r\ndef calcola_totale_per_mese_da_ddt_cliente():\r\n    current_month = 1\r\n    return locals()\r\n\r\ndef calcola_totale_per_anno():\r\n\tcurrent_year=2018\r\n\treturn locals()\r\n\r\ndef calcola_totale_per_anno_data():\r\n\t\r\n\tlista=[]\r\n\triga=[]\r\n\triga.append("Cliente")\r\n\triga.append("Totale")\r\n\tlista.append(riga)\r\n    \r\n\ttry:\r\n\t\tyear = int(request.vars[\'y\'])\r\n\texcept:\r\n\t\tyear = datetime.datetime.now().year\r\n\t  \r\n\t\t\r\n\t#day_start,day_end = monthrange(datetime.datetime.now().year, month)\r\n\t#day_start = 1\r\n\t\r\n\t#st = str(day_start)+"/"+str(month)+"/"+str(datetime.datetime.now().year)\r\n\tstart_date = datetime.datetime(year,1,1)\r\n\tend_date = datetime.datetime(year,12,31).date()\r\n\t#print start_date,end_date\r\n\t\r\n\t   \r\n\t\r\n\r\n\trows1= db(db.clienti).select()\r\n\t\r\n\tdb(db.totali_ddt_mese_).delete()\r\n\tdb.totali_ddt_mese_.id.readable=False;\r\n\t\r\n\ttotalissimo=0\r\n\tnome_cliente=""\r\n\tfor r1 in rows1:\r\n\t\t\r\n\t\ttry:\r\n\t\t\triga=[]\r\n\t\t\ttotale = 0\r\n\t\t\tddts = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\')).select()\r\n\t\t\t\r\n\t\t\t\r\n\t\t   \r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tfor ddt in ddts:\r\n\t\t\t\t\t\t  \r\n\t\t\t   \r\n\t\t\t\tnome_cliente = ddt.nome_cliente\r\n\t\t\t\t#print "NOME CLIENTE = ",nome_cliente,ddt.id\r\n\t\t\t\ttotale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\r\n\t\t\tif totale > 0:\t\r\n\t\t\t\triga.append(nome_cliente)\r\n\t\t\t\triga.append(totale)\r\n\t\t\t\tlista.append(riga)\r\n\t\t\t\tdb.totali_ddt_mese_.insert(cliente=nome_cliente,totale=ritorna_prezzo_europeo(totale))\r\n\t\t\t\ttotalissimo +=totale\r\n\t\texcept Exception,e:\r\n\t\t\t#print "ECCEZZIONE ",e\r\n\t\t\tpass\r\n\t\t\t\r\n\t##print lista\r\n\tform = SQLFORM.grid(db.totali_ddt_mese_,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\r\n\treturn dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))\r\n\t\r\n\t\r\n\t\r\n\treturn locals()\r\n\r\ndef calcola_totale_per_anno_leonardo():\r\n\tcurrent_year=1\r\n\treturn locals()\r\n\r\ndef calcola_totale_per_anno_leonardo_data():\r\n    \r\n    \r\n    lista=[]\r\n    \r\n    riga=[]\r\n    riga.append("Cliente")\r\n    riga.append("Totale")\r\n    lista.append(riga)\r\n    \r\n    \r\n    form=""\r\n    totalissimo=1000\r\n    \r\n    \r\n    try:\r\n        year = int(request.vars[\'y\'])\r\n    except:\r\n        year = datetime.datetime.now().year\r\n      \r\n        \r\n    #day_start,day_end = monthrange(datetime.datetime.now().year, month)\r\n    day_start = 1\r\n    \r\n    st = str(day_start)+"/"+str(1)+"/"+str(year)\r\n    start_date = datetime.datetime(year,1,day_start)\r\n    end_date = datetime.datetime(year,12,31).date() + timedelta(days=1)\r\n    #print start_date,end_date\r\n    \r\n    #return dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))   \r\n    \r\n\r\n    rows1= db(db.clienti.id==41).select()\r\n    \r\n    db(db.totali_ddt_anno_).delete()\r\n    db.totali_ddt_anno_.id.readable=False;\r\n    \r\n    totalissimo=0\r\n    nome_cliente=""\r\n    for r1 in rows1:\r\n        \r\n        try:\r\n            riga=[]\r\n            totale = 0\r\n            dest1 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'CHIETI\'))).select()\r\n            dest2 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'BISENZIO\'))).select()\r\n            dest3 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'BAINSIZZA\'))).select()\r\n            dest4 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'NERVIANO\'))).select()\r\n            dest5 = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\') & (db.ddt_cliente.consegna.contains(\'ADRIATICA\'))).select()\r\n            \r\n            riga=[]\r\n            totale=0\r\n            for ddt in dest1:\r\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\r\n            if totale > 0:    \r\n                consegna=\'CHIETI\'\r\n                riga.append(consegna)\r\n                riga.append(totale)\r\n                lista.append(riga)\r\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\r\n                totalissimo +=totale\r\n            \r\n            riga=[]\r\n            totale=0\r\n            for ddt in dest2:\r\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\r\n            if totale > 0:    \r\n                consegna=\'CAMPI BISENZIO\'\r\n                riga.append(consegna)\r\n                riga.append(totale)\r\n                lista.append(riga)\r\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\r\n                totalissimo +=totale\r\n            \r\n            riga=[]\r\n            totale=0                \r\n            for ddt in dest3:\r\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\r\n            if totale > 0:    \r\n                consegna=\'BORGO BAINSIZZA\'\r\n                riga.append(consegna)\r\n                riga.append(totale)\r\n                lista.append(riga)\r\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\r\n                totalissimo +=totale\r\n            \r\n            riga=[]\r\n            totale=0\r\n            for ddt in dest4:\r\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\r\n            if totale > 0:    \r\n                consegna=\'NERVIANO\'\r\n                riga.append(consegna)\r\n                riga.append(totale)\r\n                lista.append(riga)\r\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\r\n                totalissimo +=totale\r\n            \r\n            riga=[]\r\n            totale=0\r\n            for ddt in dest5:\r\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\r\n            if totale > 0:    \r\n                consegna=\'FOCACCIA GROUP SRL\'\r\n                riga.append(consegna)\r\n                riga.append(totale)\r\n                lista.append(riga)\r\n                db.totali_ddt_anno_.insert(destinazione=consegna,totale=ritorna_prezzo_europeo(totale))\r\n                totalissimo +=totale\r\n                \r\n            \r\n        except Exception,e:\r\n            #print "ECCEZZIONE ",e\r\n            pass\r\n            \r\n    #print lista\r\n    form = SQLFORM.grid(db.totali_ddt_anno_,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\r\n    return dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))\r\n\r\n\r\ndef calcola_totale_per_mese_da_ddt_cliente_data():\r\n    \r\n    \r\n    lista=[]\r\n    \r\n    riga=[]\r\n    riga.append("Cliente")\r\n    riga.append("Totale")\r\n    lista.append(riga)\r\n    \r\n    try:\r\n        month = int(request.vars[\'m\'])\r\n    except:\r\n        month = datetime.datetime.now().month\r\n      \r\n        \r\n    day_start,day_end = monthrange(datetime.datetime.now().year, month)\r\n    day_start = 1\r\n    \r\n    st = str(day_start)+"/"+str(month)+"/"+str(datetime.datetime.now().year)\r\n    start_date = datetime.datetime(datetime.datetime.now().year,month,day_start)\r\n    end_date = datetime.datetime(datetime.datetime.now().year,month,day_end).date() + timedelta(days=1)\r\n    #print start_date,end_date\r\n    \r\n       \r\n    \r\n\r\n    rows1= db(db.clienti).select()\r\n    \r\n    db(db.totali_ddt_mese_).delete()\r\n    db.totali_ddt_mese_.id.readable=False;\r\n    \r\n    totalissimo=0\r\n    nome_cliente=""\r\n    for r1 in rows1:\r\n        \r\n        try:\r\n            riga=[]\r\n            totale = 0\r\n            ddts = db((db.ddt_cliente.id_cliente == r1.id) & (db.ddt_cliente.data_richiesta >= start_date) & (db.ddt_cliente.data_richiesta <= end_date) & (db.ddt_cliente.numero_ddt != \'None\')).select()\r\n            \r\n            \r\n           \r\n            \r\n            \r\n            \r\n            for ddt in ddts:\r\n                          \r\n               \r\n                nome_cliente = ddt.nome_cliente\r\n                #print "NOME CLIENTE = ",nome_cliente,ddt.id\r\n                totale += ritorna_int_calcola_totale_iva_esclusa_da_ddt(ddt.id)\r\n            if totale > 0:    \r\n                riga.append(nome_cliente)\r\n                riga.append(totale)\r\n                lista.append(riga)\r\n                db.totali_ddt_mese_.insert(cliente=nome_cliente,totale=ritorna_prezzo_europeo(totale))\r\n                totalissimo +=totale\r\n        except Exception,e:\r\n            #print "ECCEZZIONE ",e\r\n            pass\r\n            \r\n    ##print lista\r\n    form = SQLFORM.grid(db.totali_ddt_mese_,deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,user_signature=True,args=request.args[:1])\r\n    return dict(lista=json.dumps(lista),form=form,totalissimo = ritorna_prezzo_europeo(totalissimo))\r\n    \r\n    \r\n    \r\ndef ritorna_prezzo_europeo(importo):\r\n    importo = Money(str(importo),"EUR")\r\n    importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n    return importo\r\n\r\n\r\ndef ritorna_int_calcola_totale_iva_esclusa_da_ddt(id_ddt):\r\n    \r\n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt).select()\r\n        ##print "DDT ID : ",id_ddt\r\n        totale = 0\r\n        importo_totale = 0\r\n        imposta_totale = 0\r\n        \r\n        for row in rows:\r\n            if not "commento" in row.codice_articolo:             \r\n                id_ordine = row.id_ordine\r\n                try:\r\n                      importo = saved_importo = float(row.quantita) * float(row.prezzo)\r\n                      importo = Money(str(importo),"EUR")\r\n                      importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                      prezzo = str(row.prezzo).replace(".",",")\r\n                      \r\n                      #codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                      #percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n                      \r\n                      importo_totale += saved_importo\r\n                      #imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                except:\r\n                      pass\r\n                       \r\n            \r\n         \r\n        \r\n    \r\n    \r\n        totale = importo_totale+imposta_totale\r\n       \r\n        #print "DDT NUMERO : {0} TOTALE {1}".format(id_ddt,totale)\r\n        \r\n        return totale    \r\n\r\ndef ritorna_int_calcola_totale_iva_inclusa_da_ddt(id_ddt):\r\n    \r\n        rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt).select()\r\n        ##print "DDT ID : ",id_ddt\r\n        totale = 0\r\n        importo_totale = 0\r\n        imposta_totale = 0\r\n        \r\n        for row in rows:\r\n            if not "commento" in row.codice_articolo:             \r\n                id_ordine = row.id_ordine\r\n                try:\r\n                      importo = saved_importo = float(row.quantita) * float(row.prezzo)\r\n                      importo = Money(str(importo),"EUR")\r\n                      importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                      prezzo = str(row.prezzo).replace(".",",")\r\n                      \r\n                      codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                      percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n                      \r\n                      importo_totale += saved_importo\r\n                      imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n                except:\r\n                      pass\r\n                       \r\n            \r\n         \r\n        \r\n    \r\n    \r\n        totale = importo_totale+imposta_totale\r\n       \r\n        #print "DDT NUMERO : {0} TOTALE {1}".format(id_ddt,totale)\r\n        \r\n        return totale\r\n        \r\n        \r\n\r\ndef calcola_totale_iva_inclusa_da_ddt(id_ddt):\r\n\r\n        print "Dentro qui"\r\n        print "DDT ID : ",id_ddt\r\n        rows = db((db.saved_righe_in_ddt_cliente.saved_ddt_id == id_ddt) & (db.saved_righe_in_ddt_cliente.codice_articolo !="commento")).select()\r\n        print "DDT ID : ",id_ddt\r\n        totale = 0\r\n        importo_totale = 0\r\n        imposta_totale = 0\r\n        print "sono qui"\r\n        for row in rows:\r\n                        \r\n            id_ordine = row.id_ordine\r\n            try:\r\n                importo = saved_importo = float(row.quantita) * float(row.prezzo)\r\n                importo = Money(str(importo),"EUR")\r\n                importo = importo.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n                prezzo = str(row.prezzo).replace(".",",")\r\n                \r\n                codice_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["codice_iva"]\r\n                percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == row.codice_iva).select().first()["percentuale_iva"]\r\n            \r\n                    \r\n                importo_totale += saved_importo\r\n                imposta_totale += return_imposta(saved_importo,int(percentuale_iva))\r\n            except Exception,e:\r\n                print e\r\n                pass\r\n                \r\n            \r\n         \r\n        \r\n    \r\n    \r\n        totale = importo_totale+imposta_totale\r\n        totale = Money(str(totale),"EUR")\r\n        totale = totale.format("it_IT").encode(\'ascii\', \'ignore\').decode(\'ascii\')\r\n        print "Totale calcolato = ",totale\r\n        return totale\r\n        \r\n\r\ndef fatturazione_differita():\r\n    fields = [\'nome_cliente\',\'dal\',\'al\']\r\n    cliente_form = SQLFORM(db.fattura_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\r\n    \r\n    if cliente_form.process().accepted:\r\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\r\n        #print "ID CLIENTE = ",id_cliente\r\n        db(db.ddt_da_fatturare.user_id == auth.user_id).delete()\r\n        row = db(db.fattura_cliente.id == cliente_form.vars.id).select().first()\r\n        row.update_record(id_cliente = id_cliente.id)\r\n        redirect(URL(\'fatturazione_differita_2\',args=cliente_form.vars.id))\r\n    \r\n    return locals()\r\n\r\n\r\ndef fatturazione_istantanea():\r\n    \r\n    fields = [\'nome_cliente\']\r\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\r\n    \r\n    if cliente_form.process().accepted:\r\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\r\n        #print "ID CLIENTE = ",id_cliente\r\n        #print cliente_form.vars.id #LAST IMSERTED ID\r\n        \r\n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\r\n        #print "SELECTED ROW : ",row\r\n        row.update_record(id_cliente = id_cliente.id)\r\n        db(db.righe_in_fattura_istantanea).delete()\r\n        redirect(URL(\'fatturazione_istantanea_2\',args=id_cliente.id))\r\n    \r\n    return locals()\r\n\r\ndef nota_di_accredito():\r\n    \r\n    fields = [\'nome_cliente\']\r\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\r\n    \r\n    if cliente_form.process().accepted:\r\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\r\n        #print "ID CLIENTE = ",id_cliente\r\n        #print cliente_form.vars.id #LAST IMSERTED ID\r\n        \r\n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\r\n        #print "SELECTED ROW : ",row\r\n        row.update_record(id_cliente = id_cliente.id)\r\n        db(db.righe_in_fattura_istantanea).delete()\r\n        redirect(URL(\'nota_di_accredito_2\',args=id_cliente.id))\r\n        \r\n    return locals()\r\n\r\ndef ddt_clienti():\r\n    \r\n    fields = [\'nome_cliente\']\r\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form\',formstyle = \'table3cols\',fields=fields)\r\n    \r\n    if cliente_form.process().accepted:\r\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\r\n        #print "ID CLIENTE = ",id_cliente\r\n        #print cliente_form.vars.id #LAST IMSERTED ID\r\n        \r\n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\r\n        #print "SELECTED ROW : ",row\r\n        row.update_record(id_cliente = id_cliente.id)\r\n        db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\r\n        redirect(URL(\'ddt_clienti_2\',args=cliente_form.vars.id))\r\n    \r\n    return locals()\r\n    \r\ndef mod_ddt_clienti():\r\n    \r\n    fields = [\'nome_cliente\']\r\n    cliente_form = SQLFORM(db.ddt_cliente,formname=\'cliente_form_mod\',formstyle = \'table3cols\',fields=fields)\r\n    \r\n    if cliente_form.process().accepted:\r\n        id_cliente = db(db.clienti.nome == cliente_form.vars.nome_cliente).select().first()\r\n        #print "ID CLIENTE = ",id_cliente\r\n        #print cliente_form.vars.id #LAST IMSERTED ID\r\n        \r\n        row = db(db.ddt_cliente.id == cliente_form.vars.id).select().first()\r\n        #print "SELECTED ROW : ",row\r\n        #row.update_record(id_cliente = id_cliente.id)\r\n        #db(db.righe_in_ddt_cliente.user_id == auth.user_id).delete()\r\n        redirect(URL(\'mod_ddt_clienti_2\',args=id_cliente.id))\r\n    \r\n    return locals()\r\n\r\ndef ddt_fornitori():\r\n    \r\n    fields = [\'nome_fornitore\']\r\n    \r\n    fornitore_form = SQLFORM(db.ddt_fornitore,formname=\'fornitore_form\',formstyle = \'table3cols\',fields=fields)\r\n    \r\n    if fornitore_form.process().accepted:\r\n        #print fornitore_form.vars.nome_fornitore\r\n        id_fornitore = db(db.fornitori.nome == fornitore_form.vars.nome_fornitore).select().first()\r\n       \r\n        \r\n        row = db(db.ddt_fornitore.id == fornitore_form.vars.id).select().first()\r\n        #print "SELECTED ROW : ",row\r\n        row.update_record(id_fornitore = id_fornitore.id)\r\n        redirect(URL(\'ddt_fornitori_2\',args=fornitore_form.vars.id))\r\n    \r\n    return locals()\r\n\r\ndef ddt_clienti_old():\r\n    \r\n    links=[lambda row: A(XML(\'Crea bolla\'),_class=\'button btn btn-default\',_href=URL(\'dettaglio_bolla\',args=row.id))]\r\n    fields=[db.righe_in_ordine_cliente.n_riga,db.righe_in_ordine_cliente.codice_articolo,db.righe_in_ordine_cliente.quantita,db.righe_in_ordine_cliente.prezzo,db.righe_in_ordine_cliente.sconti,db.righe_in_ordine_cliente.codice_iva,db.righe_in_ordine_cliente.evasione]\r\n    righe_in_ordine_cliente_form = SQLFORM.grid(db.ordine_cliente,formname=\'ordini_clienti\',maxtextlength=100,create=False,editable=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,links=links)\r\n    \r\n    return dict(righe_in_ordine_cliente_form=righe_in_ordine_cliente_form)\r\n\r\ndef gestione_piano_dei_conti():\r\n  \r\n    \r\n    return dict(message="ok")\r\n\r\ndef anagrafica_codici_iva():\r\n    codici_iva_form = SQLFORM.grid(db.anagrafica_codici_iva,formname=\'codici_iva\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\r\n    codici_iva_form.element(\'.web2py_counter\', replace=None)\r\n\r\n    return dict(codici_iva_form = codici_iva_form)\r\n\r\ndef anagrafica_banche():\r\n    anagrafica_banche_form = SQLFORM.grid(db.anagrafica_banche,formname=\'anagrafica_banche_form\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\r\n    anagrafica_banche_form.element(\'.web2py_counter\', replace=None)\r\n    try:\r\n        anagrafica_banche_form.element(\'input[name=descrizione_sottoconto]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n        anagrafica_banche_form.element(\'input[name=descrizione]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n    except:\r\n        pass\r\n    return dict(anagrafica_banche_form = anagrafica_banche_form)\r\n\r\ndef anagrafica_banche_azienda():\r\n    anagrafica_banche_form = SQLFORM.grid(db.anagrafica_banche_azienda,formname=\'anagrafica_banche_form\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n    anagrafica_banche_form.element(\'.web2py_counter\', replace=None)\r\n    try:\r\n        anagrafica_banche_form.element(\'input[name=descrizione_sottoconto]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n        anagrafica_banche_form.element(\'input[name=descrizione]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n    except:\r\n        pass\r\n    return dict(anagrafica_banche_form = anagrafica_banche_form)    \r\n\r\ndef fatture_form():\r\n    fields = [db.fatture_salvate.data_fattura,db.fatture_salvate.numero_fattura,db.fatture_salvate.totale,db.fatture_salvate.nome_cliente,db.fatture_salvate.scadenza]\r\n    \r\n    """Patch per sistemare la data\r\n      \r\n    \r\n    """\r\n    x = datetime.datetime(1999, 5, 17)\r\n    fatture=db(db.fatture_salvate.scadenza > x).select()\r\n    \r\n    for fattura in fatture:\r\n    \toriginal_start_date = fattura.data_fattura\r\n    \tif original_start_date is not None:\r\n    \t \t\r\n    \t \tday_start,day_end = monthrange(original_start_date.year, original_start_date.month)\r\n       \t\td = str(day_end)+"/"+str(original_start_date.month)+"/"+str(original_start_date.year)\r\n    \r\n      \t\tstart_date = datetime.datetime.strptime(d,"%d/%m/%Y")\r\n      \t\t#print original_start_date,start_date\r\n      \t\tfattura.data_fattura = start_date\r\n      \t\tfattura.update_record()\r\n    \r\n    \r\n    if len(request.args) > 1 and (\'edit\' in request.args):\r\n        db.fatture_salvate.numero_fattura.writable=False\r\n        db.fatture_salvate.id_ddt.writable=False\r\n        db.fatture_salvate.id_ddt.readable=False\r\n        \r\n        db.fatture_salvate.id_cliente.writable=False\r\n        db.fatture_salvate.id_cliente.readable=False\r\n        \r\n        db.fatture_salvate.id_cliente.writable=False\r\n        db.fatture_salvate.id_cliente.readable=False\r\n        \r\n        db.fatture_salvate.richiede_riba.writable=False\r\n        db.fatture_salvate.richiede_riba.readable=False\r\n        \r\n        \r\n        db.fatture_salvate.riba_emessa.writable=False\r\n        db.fatture_salvate.riba_emessa.readable=False\r\n        \r\n    \r\n    links=[lambda row: BUTTON("Aggiungi fattura",_onclick=XML(\'aggiungiFattura(\'+str(row.id)+\')\'),_class=\'button btn btn-default\')]\r\n        \r\n    fatture_form = SQLFORM.grid(db.fatture_salvate.richiede_riba==\'T\',formname=\'fatture\',maxtextlength=100,create=False,     deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,fields=fields,links=links,exportclasses=export_classes)   \r\n        \r\n    \r\n   \r\n    \r\n    \r\n    return locals()\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef successivo_riba(banca):\r\n    \r\n    if db(db.fatture_scelte).isempty():\r\n        response.flash="Selezionare almeno una fattura"\r\n        return 1/0\r\n    \r\n    \r\n    db(db.temp_banca).delete()\r\n    db.temp_banca.insert(banca=banca)\r\n    \r\n    return "ok"\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef accorpa(id,val):\r\n    d=db(db.fatture_scelte.id == id).select().first()\r\n    if "True" in str(val):\r\n        d.update_record(accorpa=True)\r\n    else:\r\n         d.update_record(accorpa=False)\r\n    \r\n    \r\n    return "ok"\r\n\r\n\r\n\r\n\r\n\r\ndef crea_indici_riba():\r\n    """\r\n    Formato : id_cliente,lista(id_fatture)\r\n    """\r\n    \r\n    cliente = []\r\n    lista_riba=[]\r\n    \r\n    fatture_accorpate = []\r\n    fatture=db(db.fatture_scelte).select()\r\n    \r\n    for f in fatture:\r\n        id_cliente = f.id_cliente\r\n        \r\n        fatture_accorpate = []\r\n        lista_fatture = []\r\n        if db((db.fatture_scelte.id_cliente == id_cliente) & (db.fatture_scelte.accorpa == \'T\')).count() < 2:\r\n            """\r\n            Nessuna fattura da accorpare per questo cliente\r\n            """\r\n            lista_fatture.append(f.id_fattura)\r\n            pass\r\n        else:\r\n            da_accorpare = db((db.fatture_scelte.id_cliente == id_cliente) & (db.fatture_scelte.accorpa == \'T\')).select()\r\n            for item in da_accorpare:\r\n                if not item in lista_fatture:\r\n                    \r\n                    lista_fatture.append(item.id_fattura)\r\n    \r\n        cliente = []\r\n        cliente.append(id_cliente)\r\n        cliente.append(lista_fatture)\r\n        if not cliente in lista_riba:\r\n            lista_riba.append(cliente)\r\n            \r\n    return lista_riba\r\n\r\ndef ritorna_dettaglio_fattura(id_fattura):\r\n    fattura = db(db.fatture_salvate.id ==id_fattura).select().first()\r\n    \r\n    msg = "Fattura numero "+fattura.numero_fattura +" Del " + fattura.data_fattura.strftime("%d/%m/%Y")+ " Tot. " + ritorna_prezzo_europeo(fattura.totale) + " <b>Scadenza</b> "+fattura.scadenza.strftime("%d/%m/%Y")\r\n    return msg\r\n\r\ndef ritorna_nome_cliente_da_id(id):\r\n    return db(db.clienti.id==id).select().first().nome\r\n\r\n\r\ndef ritorna_abi_nostra_banca_scelta():\r\n    \r\n    banca_scelta = db(db.temp_banca).select().first().banca\r\n    return  db(db.anagrafica_banche_azienda.descrizione == banca_scelta).select().first().codice_abi\r\n\r\ndef ritorna_cab_nostra_banca_scelta():\r\n    \r\n    banca_scelta = db(db.temp_banca).select().first().banca\r\n    return  db(db.anagrafica_banche_azienda.descrizione == banca_scelta).select().first().codice_cab\r\n\r\ndef ritorna_scadenza_e_totale_fattura_per_riba(id_fattura):\r\n    d = db(db.fatture_salvate.id == id_fattura).select().first()\r\n    scadenza = d.scadenza.strftime("%d%m%y")\r\n    totale = d.totale\r\n    #print "TOT : ".format(totale)\r\n    return scadenza,totale\r\n\r\n\r\ndef ritorna_abi_cab_da_cliente_id(cliente_id):\r\n\r\n    #print cliente_id\r\n    codice_banca = db(db.clienti.id == cliente_id).select().first().codice_banca\r\n    \r\n    codice_abi=""\r\n    codice_cab=""\r\n    try:\r\n\t    d= db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n\t    codice_abi=d.codice_abi\r\n\t    codice_cab=d.codice_cab\r\n    except:\r\n          pass\r\n    \r\n    return d.codice_abi,d.codice_cab\r\n    \r\n    \r\ndef truncate_float(number, length):\r\n    """Truncate float numbers, up to the number specified\r\n    in length that must be an integer"""\r\n\r\n    number = number * pow(10, length)\r\n    number = int(number)\r\n    number = float(number)\r\n    number /= pow(10, length)\r\n    return number\r\n    \r\ndef crea_file_riba():\r\n    \r\n    """Numero Univoco per ogni file riba creato?"""\r\n    try:\r\n        numero_disposizione = db(db.numero_disposizioni_riba).select().first().numero\r\n        numero_disposizione = int(numero_disposizione)\r\n    except:\r\n        numero_disposizione = 1\r\n    \r\n    """Contenitore per il flusso CBI"""\r\n    \r\n    flow = wrapper.Flow()\r\n    flow.header = wrapper.Record(\'IB\')\r\n    flow.footer = wrapper.Record(\'EF\')\r\n    \r\n    \r\n    \r\n    codice_assegnato_dalla_sia_alla_azienda_emittente ="60I33"\r\n    codice_abi_banca_assuntrice = ritorna_abi_nostra_banca_scelta()\r\n    codice_cab_banca_assuntrice = ritorna_cab_nostra_banca_scelta()\r\n    data_creazione = datetime.datetime.now().date().strftime("%d/%m/%y").replace("/","")\r\n    nome_supporto = "OpenGest"\r\n    codice_divisa = "E"\r\n    \r\n    flow.header[\'mittente\'] = codice_assegnato_dalla_sia_alla_azienda_emittente\r\n    flow.header[\'ricevente\'] = codice_abi_banca_assuntrice\r\n    flow.header[\'data_creazione\'] = data_creazione\r\n    flow.header[\'nome_supporto\'] = nome_supporto\r\n    flow.header[\'codice_divisa\'] = codice_divisa\r\n    \r\n    flow.footer[\'mittente\']=codice_assegnato_dalla_sia_alla_azienda_emittente\r\n    flow.footer[\'ricevente\']=codice_abi_banca_assuntrice\r\n    flow.footer[\'data_creazione\']=data_creazione\r\n    flow.footer[\'nome_supporto\']=nome_supporto\r\n    flow.footer[\'codice_divisa\']=codice_divisa\r\n    \r\n    numero_emissioni = crea_indici_riba()\r\n    #print "NUMERO EMISSIONI = {0} ".format(len(numero_emissioni))\r\n    flow.footer[\'numero_disposizioni\']=str(len(numero_emissioni)).zfill(7)\r\n    \r\n    \r\n    totalissimo = 0\r\n    flow.disposals = []\r\n    for numero_progressivo in range(1,len(numero_emissioni) +1):\r\n        """Contiene tutti e 7 i record"""\r\n        disposizione = wrapper.Disposal()\r\n        \r\n        #print "QUI"\r\n        """instanza ai vari record cbi"""\r\n        first_record = wrapper.Record(\'14\')\r\n        second_record = wrapper.Record(\'20\')\r\n        third_record = wrapper.Record(\'30\')\r\n        fourth_record = wrapper.Record(\'40\')\r\n        fifth_record = wrapper.Record(\'50\')\r\n        fifty_one = wrapper.Record(\'51\')\r\n        seventieth_record = wrapper.Record(\'70\')\r\n         \r\n         \r\n        emissione_corrente = numero_emissioni[numero_progressivo - 1]\r\n        cliente_id = emissione_corrente[0]\r\n        fatture = emissione_corrente[1]\r\n        """\r\n        Raccolta dati per il record 14 first_record\r\n        """\r\n        codice_abi_domiciliaria,codice_cab_domiciliaria=ritorna_abi_cab_da_cliente_id(cliente_id)\r\n        codice_cliente_debitore = cliente_id\r\n        #print ritorna_abi_cab_da_cliente_id\r\n                                \r\n                        \r\n        importo_della_ricevuta_in_centesimi = 0\r\n        riferimento_fattura = ""\r\n        for id_fattura in fatture:\r\n            data_pagamento,totale = ritorna_scadenza_e_totale_fattura_per_riba(id_fattura)\r\n            \r\n            importo_della_ricevuta_in_centesimi += float(totale)\r\n            totalissimo += importo_della_ricevuta_in_centesimi\r\n            \r\n            riferimento_fattura+= db(db.fatture_salvate.id == id_fattura).select().first().numero_fattura+" del "+db(db.fatture_salvate.id == id_fattura).select().first().data_fattura.strftime("%d/%m/%Y") + " "\r\n        \r\n        importo_della_ricevuta_in_centesimi = \'%.2f\' % round(importo_della_ricevuta_in_centesimi,2)\r\n        \r\n        importo_della_ricevuta_in_centesimi = importo_della_ricevuta_in_centesimi.replace(".","").zfill(13)\r\n        \r\n        #print "importo : {0}".format(importo_della_ricevuta_in_centesimi)\r\n        first_record[\'numero_progressivo\']=str(numero_progressivo).zfill(7)\r\n        first_record[\'data_pagamento\']=data_pagamento\r\n        first_record[\'importo\']=str(importo_della_ricevuta_in_centesimi)\r\n        first_record[\'codice_abi_banca\']=codice_abi_banca_assuntrice\r\n        first_record[\'cab_banca\']=codice_cab_banca_assuntrice\r\n        first_record[\'codice_abi_domiciliaria\']=codice_abi_domiciliaria\r\n        first_record[\'codice_cab_domiciliaria\']=codice_cab_domiciliaria\r\n        first_record[\'codice_azienda\']=codice_assegnato_dalla_sia_alla_azienda_emittente\r\n        first_record[\'codice_cliente_debitore\']=codice_cliente_debitore\r\n        first_record[\'codice_divisa\']=codice_divisa\r\n        first_record[\'causale\']="30000"\r\n        first_record[\'segno\']="-"\r\n        first_record[\'tipo_codice\']="4"\r\n           \r\n        \r\n        \r\n        second_record[\'numero_progressivo\']=str(numero_progressivo).zfill(7)\r\n        second_record[\'1_segmento\']="Microcarp"\r\n        second_record[\'2_segmento\']="Strada statale 416"\r\n        second_record[\'3_segmento\']="26020 Castelleone (CR)"\r\n        second_record[\'4_segmento\']="Italia"\r\n        \r\n        dati_cliente = db(db.clienti.id == cliente_id).select().first()\r\n        \r\n        third_record[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\r\n        third_record[\'codice_fiscale_cliente\'] = dati_cliente.codice_fiscale\r\n        third_record[\'1_segmento\'] = dati_cliente.nome[:27]\r\n        third_record[\'2_segmento\'] = ""\r\n        \r\n        fourth_record[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\r\n        fourth_record[\'indirizzo\'] = dati_cliente.indirizzo\r\n        fourth_record[\'cap\'] = dati_cliente.cap\r\n        fourth_record[\'comune_e_sigla_provincia\'] = dati_cliente.provincia\r\n        fourth_record[\'completamento_indirizzo\'] = ""\r\n        fourth_record[\'codice_paese\'] = "IT"\r\n        \r\n        riferimento_fattura =(riferimento_fattura[:30] + \'..\') if len(riferimento_fattura) > 30 else riferimento_fattura\r\n        \r\n        fifth_record[\'numero_progressivo\'] =str(numero_progressivo).zfill(7)\r\n        fifth_record[\'1_segmento\'] = "R.F. " + riferimento_fattura\r\n        fifth_record[\'2_segmento\'] = "IMPORTO  " + importo_della_ricevuta_in_centesimi\r\n        fifth_record[\'codifica_fiscale_creditore\'] = str(dati_cliente.partita_iva)\r\n        \r\n        \r\n        \r\n        \r\n        \r\n        fifty_one[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\r\n        fifty_one[\'numero_ricevuta\'] = str(numero_disposizione).zfill(10)\r\n        fifty_one[\'denominazione_creditore\'] = "MICROCARP S.R.L."\r\n        \r\n        seventieth_record[\'numero_progressivo\'] = str(numero_progressivo).zfill(7)\r\n        \r\n        numero_disposizione +=1\r\n        \r\n        """ ALLA FINE DI TUTTI I RECORDS """\r\n        \r\n        disposizione.records.append(first_record)\r\n        disposizione.records.append(second_record)\r\n        disposizione.records.append(third_record)\r\n        disposizione.records.append(fourth_record)\r\n        disposizione.records.append(fifth_record)\r\n        disposizione.records.append(fifty_one)\r\n        disposizione.records.append(seventieth_record)\r\n        \r\n        \r\n        flow.disposals.append(disposizione)\r\n        disposizione = None\r\n    \r\n    \r\n    #print "TOTALISSIMO {0}".format(totalissimo)\r\n    #totalissimo = \'%.2f\' % totalissimo\r\n    #totalissimo = str(totalissimo)[:]\r\n    totalissimo = str(truncate_float(totalissimo,2))\r\n    #print "TOTALISSIMO {0}".format(totalissimo)\r\n    totalissimo = totalissimo.replace(".","").zfill(15)\r\n    \r\n    flow.footer[\'tot_importi_negativi\']=totalissimo\r\n    flow.footer[\'tot_importi_positivi\']="".zfill(15)\r\n    \r\n    numero_record = str((len(numero_emissioni) * 7)+2).zfill(7)\r\n    flow.footer[\'numero_record\']=numero_record\r\n    \r\n    filename = os.getcwd()+"/applications/gestionale/static/"+"riba.txt"\r\n    try:\r\n        os.remove(filename)\r\n    except:\r\n        pass\r\n    flow.writefile(filename)\r\n    \r\n    #print "LUNGHEZZA DISPOSIZIONE : ",len(flow.disposals)\r\n    \r\n    db.numero_disposizioni_riba.insert(numero=str(numero_disposizione))\r\n\r\ndef genera_riba():\r\n    \r\n    crea_file_riba()\r\n    \r\n    \r\n    nomefile = "riba.txt"\r\n    filename = os.getcwd()+"/applications/gestionale/static/"+"riba.txt"\r\n    import cStringIO \r\n    #import contenttype as c\r\n    s=cStringIO.StringIO()\r\n    \r\n    with open(filename,"r") as file:\r\n        \r\n        s.write(file.read())\r\n        response.headers[\'Content-Type\'] =gluon.contenttype.contenttype(filename)\r\n        response.headers[\'Content-Disposition\'] = "attachment; filename=%s" % nomefile  \r\n        return s.getvalue() \r\n    \r\n    \r\n\r\ndef emissione_riba_3():\r\n    \r\n    banca_scelta = db(db.temp_banca).select().first().banca\r\n    try:\r\n        numero_disposizione = db(db.numero_disposizioni_riba).select().first().numero\r\n    except:\r\n        numero_disposizione = 1\r\n    \r\n    lista_riba = crea_indici_riba()\r\n    \r\n    html ="""<table id="resoconto" class="table table-bordered">"""\r\n    \r\n    html += """<thead>"""\r\n    html += """<tr>"""\r\n    \r\n    html += """<th>"""\r\n    html += "Cliente" \r\n    \r\n    html += """</th>"""\r\n    \r\n    html += """<th>"""\r\n    html += "Dettaglio" \r\n    html += """</th>"""\r\n    \r\n    html += """<th>"""\r\n    html += "Totale" \r\n    html += """</th>"""\r\n    \r\n    html += """</tr>"""\r\n    \r\n    html += """</thead>"""\r\n    \r\n    \r\n    html += """<tbody>"""\r\n    \r\n    totale_distinta=0\r\n    errore = False\r\n    for item in lista_riba:\r\n        html += """<tr>"""\r\n        html += """<td>"""+ritorna_nome_cliente_da_id(item[0]) + """</td>"""\r\n        html += """<td>"""\r\n        \r\n        banca_cliente = db(db.clienti.id==item[0]).select().first().codice_banca\r\n        dati_banca_cliente = db(db.anagrafica_banche.descrizione == banca_cliente).select().first()\r\n        \r\n        if dati_banca_cliente is not None:\r\n            abi = dati_banca_cliente.codice_abi\r\n            cab = dati_banca_cliente.codice_cab\r\n            \r\n            if abi is None or len(abi) !=5:\r\n                response.flash="La banca {0} collegata al cliente {1} non ha il codice ABI corretto".format(dati_banca_cliente.descrizione,ritorna_nome_cliente_da_id(item[0]))\r\n                errore = True\r\n            \r\n            if cab is None or len(cab) !=5:\r\n                response.flash="La banca {0} collegata al cliente {1} non ha il codice CAB corretto".format(dati_banca_cliente.descrizione,ritorna_nome_cliente_da_id(item[0]))\r\n                errore = True\r\n        else:\r\n        \r\n             response.flash="La banca {0} collegata al cliente {1} non \xc3\xa8 presente in anagrafica".format(banca_cliente,ritorna_nome_cliente_da_id(item[0]))\r\n             errore = True\r\n        \r\n        \r\n        totale = 0\r\n        for fatture in item[1]:\r\n          html += ritorna_dettaglio_fattura(fatture) +"<br>"\r\n          totale += float(db(db.fatture_salvate.id ==fatture).select().first().totale)\r\n          \r\n        html += """</td>"""\r\n        html += """<td>"""\r\n        html += ritorna_prezzo_europeo(totale)\r\n        html += """</td>"""\r\n        \r\n        totale_distinta += totale\r\n        html += """</tr>"""\r\n     \r\n        ###print "Cliente = ",ritorna_nome_cliente_da_id(item[0]) , "Fatture = ",item[1]\r\n    html += """</tbody>"""    \r\n    html +="""</table>"""\r\n    html=XML(html)\r\n    \r\n    indietro = avanti =""\r\n    if not errore:\r\n        indietro = A(BUTTON("Indietro"),_href=URL(\'emissione_riba_2\'))\r\n        avanti = A(BUTTON("Crea e scarica file Riba"),_href=URL(\'genera_riba\'))\r\n    \r\n    totale_distinta = ritorna_prezzo_europeo(totale_distinta)\r\n    \r\n    return locals()\r\n\r\n\r\ndef return_radio_button(id):\r\n    \r\n    return XML("<input type=\'checkbox\' id =\'check"+str(id)+"\' onclick=\'accorpa("+str(id)+");\'></input>")\r\n    pass\r\n\r\ndef emissione_riba_2():\r\n    \r\n    db.fatture_scelte.a = Field.Virtual(\'accorpa\',lambda row: return_radio_button(row.fatture_scelte.id))\r\n    #db.fatture_scelte.a = Field.Virtual(\'radio\',\'boolean\')\r\n    \r\n    fields=[db.fatture_scelte.numero_fattura,db.fatture_scelte.totale,db.fatture_scelte.cliente,db.fatture_scelte.scadenza,db.fatture_scelte.a]\r\n   \r\n    #db.fatture_scelte.id.readable=False;\r\n    riba_form =  SQLFORM.grid(db.fatture_scelte.user_id == auth.user_id,formname=\'riba_form\',maxtextlength=100,create=False,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False, fields=fields)\r\n    \r\n    button = A(BUTTON("Successivo"),_href=URL(\'emissione_riba_3\'))\r\n    \r\n    return locals()\r\n\r\ndef emissione_riba():\r\n    \r\n    db(db.fatture_scelte.user_id == auth.user_id).delete()\r\n    \r\n    banca_azienda = Set()\r\n    \r\n    b = db(db.anagrafica_banche_azienda).select()\r\n    for e in b:\r\n        banca_azienda.add(e.descrizione)\r\n        \r\n    \r\n    return locals()\r\n    \r\n\r\ndef ritorna_tipo_pagamento_da_fattura(fattura_id):\r\n     row = db(db.fatture_salvate.id == fattura_id).select().first()\r\n     scadenza = row.scadenza\r\n     ids = eval(row.id_ddt)    \r\n     for ddt in ids:\r\n        \r\n        try:\r\n            id_ordine = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt).select().first().id_ordine\r\n            pagamento = db(db.ordine_cliente.id == id_ordine).select().first().pagamento\r\n        except:\r\n            #print "ERRORE FATTURA ID ",fattura_id\r\n            pagamento = scadenza =""\r\n        return pagamento,scadenza\r\n        \r\n   \r\n\r\ndef anagrafica_clienti():\r\n    clienti_form = SQLFORM.grid(db.clienti,formname=\'clienti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\r\n    clienti_form.element(\'.web2py_counter\', replace=None)\r\n    try:\r\n        clienti_form.element(\'select[name=codice_banca]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n        clienti_form.element(\'input[name=luogo_consegna_1]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n        clienti_form.element(\'input[name=luogo_consegna_2]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n        clienti_form.element(\'input[name=luogo_consegna_3]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n        clienti_form.element(\'input[name=luogo_consegna_4]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n        clienti_form.element(\'input[name=luogo_consegna_5]\')[\'_style\'] = \'width:350px;height:25px;\'\r\n    except:\r\n        pass\r\n    \r\n    #articli_form = SQLFORM.grid(db.clienti,formname=\'articoli\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=True)\r\n    \r\n    return dict(clienti_form = clienti_form)\r\n\r\ndef anagrafica_fornitori():\r\n    fornitori_form = SQLFORM.grid(db.fornitori,formname=\'fornitori\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=4, formstyle = \'table3cols\',csv=True,exportclasses=export_classes)\r\n    fornitori_form.element(\'.web2py_counter\', replace=None)\r\n\r\n    return dict(fornitori_form = fornitori_form)\r\n\r\n\r\ndef gestione_codici_causali():\r\n    form = SQLFORM.grid(db.codici_causali,formname=\'causali\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\')\r\n    form.element(\'.web2py_counter\', replace=None)\r\n    return dict(form = form)\r\n\r\ndef gestione_codici_pagamenti():\r\n    form = SQLFORM.grid(db.codici_pagamenti,formname=\'pagamenti\',maxtextlength=100,create=True, editable=True,    deletable=False,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\')\r\n    form.element(\'.web2py_counter\', replace=None)\r\n    return dict(form = form)\r\n\r\n\r\n\r\n\r\ndef anagrafica_piano_dei_conti():\r\n    anagrafica_piano_dei_conti_form = SQLFORM.grid(db.anagrafica_piano_dei_conti,formname=\'anagrafica_piano_dei_conti\',maxtextlength=100,create=True,     deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\')\r\n    #anagrafica_piano_dei_conti_form.element(\'.web2py_counter\', replace=None)\r\n\r\n    return dict(anagrafica_piano_dei_conti_form = anagrafica_piano_dei_conti_form)\r\n\r\ndef index():\r\n    response.flash = T("Home page")\r\n    return dict(message=T(\'\'))\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef return_listini(nome_cliente,tipo):\r\n    \r\n    \r\n     nomi_listini = db(db.anagrafica_listini.nome_cliente == nome_cliente,db.anagrafica_listini.tipologia_listino == tipo).select()\r\n     return nomi_listini.as_json()\r\n    \r\n    \r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef return_pagamenti(*args):\r\n    \r\n    nome = args[0]\r\n    if "cliente" in args[1]:\r\n    ##print "Nome cliente ",nome_cliente\r\n    \tnomi_listini = db(db.clienti.nome == nome).select().first()["pagamento"]\r\n    else:\r\n    \tnomi_listini = db(db.fornitori.nome == nome).select().first()["pagamento"]\r\n    return nomi_listini\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef aggiorna_quantita(id_riga_ordine,codice_articolo,quantita_prodotta):\r\n    """\r\n    questa quantit\xc3\xa0 prodotta viene messa in relazione alla riga d\'ordine.\r\n    la quantit\xc3\xa0 prodotta viene sommata a quella in magazzino\r\n    Nell\'anagrafica articoli viene visualizzata anche la quantit\xc3\xa0 riservata\r\n    \r\n    Quando si emette un ddt ricordarsi di cancellare dalla tabella riserva_quantita le righe d\'ordine associate.\r\n    \r\n    """\r\n    \r\n    \r\n    record_giacenza_articolo_attuale = db(db.anagrafica_articoli.codice_articolo == str(codice_articolo)).select().first()\r\n    giacenza = int(record_giacenza_articolo_attuale.giacenza) + int (quantita_prodotta)\r\n    record_giacenza_articolo_attuale.update_record(giacenza = str(giacenza))\r\n    \r\n    db.riserva_quantita.insert(codice_articolo=codice_articolo,quantita=quantita_prodotta,id_riga_ordine=id_riga_ordine,user_id=auth.user_id)\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    return "ok"\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef riserva_giacenza(id_riga_ordine,da_riservare):\r\n    \r\n        #print id_riga_ordine,da_riservare\r\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n        codice_articolo = data.codice_articolo\r\n        id_ordine_cliente = data.id_ordine_cliente\r\n       \r\n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\r\n        \r\n        \r\n        #print data_articolo.giacenza,da_riservare\r\n        #data_articolo.update_record(giacenza = str(giacenza))\r\n        \r\n             \r\n        db.riserva_quantita.insert(codice_articolo=codice_articolo,quantita=da_riservare,id_riga_ordine=id_riga_ordine,user_id=auth.user_id)\r\n    \r\n        return "ok"   \r\n    \r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef disdire_giacenza(id_riga_ordine,da_riservare):\r\n    \r\n        #print id_riga_ordine,da_riservare\r\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n        codice_articolo = data.codice_articolo\r\n        id_ordine_cliente = data.id_ordine_cliente\r\n       \r\n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\r\n        \r\n        \r\n        if int(ritorna_totale_prenotazione_da_codice_articolo(codice_articolo)) - int(da_riservare) <0:\r\n            return 1/0\r\n        \r\n        da_riservare = int(da_riservare) *-1\r\n        \r\n      \r\n                \r\n             \r\n        db.riserva_quantita.insert(codice_articolo=codice_articolo,quantita=da_riservare,id_riga_ordine=id_riga_ordine,user_id=auth.user_id)\r\n    \r\n        return "ok"  \r\n   \r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef aggiorna_giacenza(id_riga_ordine,da_riservare):\r\n    \r\n        #print id_riga_ordine,da_riservare\r\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n        codice_articolo = data.codice_articolo\r\n        id_ordine_cliente = data.id_ordine_cliente\r\n       \r\n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\r\n        \r\n        \r\n        try:\r\n            giacenza = int(da_riservare)\r\n            \r\n            if giacenza < 0:\r\n                return 1/0\r\n            \r\n            data_articolo.update_record(giacenza=str(giacenza))\r\n            \r\n        except:\r\n            return 1/0\r\n            \r\n            \r\n        return "ok"\r\n\r\ndef return_dettagli_articolo_da_riga_ordine():\r\n    \r\n    errore = False\r\n    riga_evasa = False\r\n    try:\r\n        \r\n        id_riga_ordine =request.vars[\'id_riga_ordine\']\r\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n        codice_articolo = data.codice_articolo\r\n        id_ordine_cliente = data.id_ordine_cliente\r\n        quantita_ordine = data.quantita\r\n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\r\n        \r\n        \r\n        ubicazione = data_articolo.ubicazione\r\n        if ubicazione is None:\r\n            ubicazione = "Nessuna"\r\n          \r\n        data_ordine = db(db.ordine_cliente.id ==id_ordine_cliente).select().first()\r\n        codice_ordine = data_ordine.ultimo_codice_ordine\r\n        \r\n        nome_cliente = data_ordine.nome_cliente\r\n        \r\n        riferimento_ordine = data_ordine.riferimento_ordine_cliente\r\n       \r\n        data_inserimento = data_ordine.data_inserimento\r\n        \r\n        \r\n        descrizione = data_articolo.descrizione\r\n        giacenza = data_articolo.giacenza\r\n        quantita_saldo = ritorna_quantita_saldo(id_riga_ordine)\r\n        \r\n        prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(codice_articolo,id_riga_ordine)\r\n        \r\n        #print "PRENOTATO = ",prenotato\r\n        \r\n        #print "GIACENZA = ",giacenza\r\n        \r\n      \r\n        \r\n        giacenza_non_riservata = int(giacenza) - int(prenotato)\r\n        \r\n        \r\n        #print "NON RISERVATA = ",giacenza_non_riservata\r\n          \r\n        produzione_da_riservare_per_completare_la_produzione = int(quantita_saldo) - int(prenotato)\r\n        \r\n        if produzione_da_riservare_per_completare_la_produzione < 1:\r\n            produzione_da_riservare_per_completare_la_produzione = "PRODUZIONE COMPLETATA\\n" + "SURPLUS DI " +str(abs(produzione_da_riservare_per_completare_la_produzione)) + " ARTICOLI"\r\n        """\r\n        """       \r\n        \r\n        if int(quantita_saldo) <1:\r\n            quantita_saldo = "Quantit\xc3\xa0 richiesta raggiunta"\r\n        \r\n        \r\n        if riga_completata(id_riga_ordine):\r\n           riga_evasa = True\r\n           ddts = return_ddts_for_row_id(id_riga_ordine)\r\n        \r\n        \r\n    except Exception, e:\r\n        #print e\r\n        errore = True\r\n        id_riga_ordine=""\r\n        codice_articolo = ""\r\n        descrizione =""\r\n        giacenza = ""\r\n        cliente = ""\r\n        codice_ordine = ""\r\n        quantita_ordine =""\r\n        prenotato =""\r\n        giacenza_non_riservata =""\r\n        produzione_da_riservare_per_completare_la_produzione=""\r\n        riferimento_ordine=""\r\n        data_inserimento=""\r\n        quantita_saldo=""\r\n        giacenza_non_riservata=""\r\n        produzione_da_riservare_per_completare_la_produzione=""\r\n        ubicazione=""\r\n        return locals()\r\n    return locals()\r\n\r\ndef return_dettagli_articolo_da_riga_ordine_per_cartellini():\r\n    \r\n    errore = False\r\n    riga_evasa = False\r\n    try:\r\n        \r\n        id_riga_ordine =request.vars[\'id_riga_ordine\']\r\n        data = db(db.righe_in_ordine_cliente.id == id_riga_ordine).select().first()\r\n        codice_articolo = data.codice_articolo\r\n        id_ordine_cliente = data.id_ordine_cliente\r\n        quantita_ordine = data.quantita\r\n        data_articolo = db(db.anagrafica_articoli.codice_articolo == codice_articolo).select().first()\r\n        \r\n        \r\n        ubicazione = data_articolo.ubicazione\r\n        if ubicazione is None:\r\n            ubicazione = "Nessuna"\r\n          \r\n        data_ordine = db(db.ordine_cliente.id ==id_ordine_cliente).select().first()\r\n        codice_ordine = data_ordine.ultimo_codice_ordine\r\n        \r\n        nome_cliente = data_ordine.nome_cliente\r\n        \r\n        riferimento_ordine = data_ordine.riferimento_ordine_cliente\r\n       \r\n        data_inserimento = data_ordine.data_inserimento\r\n        \r\n        \r\n        descrizione = data_articolo.descrizione\r\n        giacenza = data_articolo.giacenza\r\n        quantita_saldo = ritorna_quantita_saldo(id_riga_ordine)\r\n        \r\n        prenotato = ritorna_totale_prenotazione_da_codice_articolo_e_riga_id(codice_articolo,id_riga_ordine)\r\n        \r\n        #print "PRENOTATO = ",prenotato\r\n        \r\n        #print "GIACENZA = ",giacenza\r\n        \r\n      \r\n        \r\n        giacenza_non_riservata = int(giacenza) - int(prenotato)\r\n        \r\n        \r\n        #print "NON RISERVATA = ",giacenza_non_riservata\r\n          \r\n        produzione_da_riservare_per_completare_la_produzione = int(quantita_saldo) - int(prenotato)\r\n        \r\n        if produzione_da_riservare_per_completare_la_produzione < 1:\r\n            produzione_da_riservare_per_completare_la_produzione = "PRODUZIONE COMPLETATA\\n" + "SURPLUS DI " +str(abs(produzione_da_riservare_per_completare_la_produzione)) + " ARTICOLI"\r\n        """\r\n        """       \r\n        \r\n        if int(quantita_saldo) <1:\r\n            quantita_saldo = "Quantit\xc3\xa0 richiesta raggiunta"\r\n        \r\n        \r\n        if riga_completata(id_riga_ordine):\r\n           riga_evasa = True\r\n           ddts = return_ddts_for_row_id(id_riga_ordine)\r\n        \r\n        \r\n        quantita_prodotta = return_quantity_for_row_id(id_riga_ordine)\r\n    except Exception, e:\r\n        #print e\r\n        errore = True\r\n        id_riga_ordine=""\r\n        codice_articolo = ""\r\n        descrizione =""\r\n        giacenza = ""\r\n        cliente = ""\r\n        codice_ordine = ""\r\n        quantita_ordine =""\r\n        prenotato =""\r\n        giacenza_non_riservata =""\r\n        produzione_da_riservare_per_completare_la_produzione=""\r\n        riferimento_ordine=""\r\n        data_inserimento=""\r\n        quantita_saldo=""\r\n        giacenza_non_riservata=""\r\n        produzione_da_riservare_per_completare_la_produzione=""\r\n        ubicazione=""\r\n        return locals()\r\n    return locals()\r\n            \r\n#return_dettagli_articolo_da_riga_ordine\r\n\r\ndef stampa_cartellini_1():\r\n    articoli_form = SQLFORM.grid(db.anagrafica_articoli,formname=\'articoli1\',maxtextlength=100,create=True,        \tdeletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True)\r\n    return locals()\r\n\r\ndef aggiorna_giacenze():\r\n     \r\n    articoli_form = SQLFORM.grid(db.anagrafica_articoli,formname=\'articoli1\',maxtextlength=100,create=True,        deletable=True,searchable=True,sortable=True,paginate=5, formstyle = \'table3cols\',csv=False,user_signature=True)\r\n    return locals()\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef return_description(cod):\r\n\trows = db(db.anagrafica_articoli.codice_articolo==cod).select().first()\r\n\treturn rows.descrizione\r\n\t\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef return_price(articolo,numero,listino,cliente):\r\n       \r\n   \r\n    prezzo_corrente = 0\r\n    start = 0\r\n    end = 0\r\n    \r\n    h = HTMLParser()\r\n    cliente = h.unescape(cliente)\r\n    \r\n    rows = db(db.articolo_in_listino.nome_cliente == cliente,db.articolo_in_listino == listino).select()\r\n\r\n   \r\n   \r\n    for row in rows:\r\n        if row[\'listino\'] == listino:\r\n            if row[\'codice_articolo\'] == articolo:\r\n                #print "OK"\r\n                end = int(row[\'numero_pezzi\'])\r\n                if (int(numero) > start) and (int(numero) <= end):\r\n                    prezzo_corrente = float(row[\'prezzo\'])\r\n                start = end\r\n                    \r\n    #print prezzo_corrente\r\n    if prezzo_corrente == 0:\r\n        prezzo_corrente=""                \r\n    return prezzo_corrente\r\n    \r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef return_price_fornitori(articolo,numero,listino,cliente):\r\n       \r\n   \r\n    prezzo_corrente = 0\r\n    start = 0\r\n    end = 0\r\n    \r\n    #print "-----------------------------------"\r\n    h = HTMLParser()\r\n    cliente = h.unescape(cliente)\r\n    rows = db(db.articolo_in_listino_fornitori.nome_fornitore == cliente).select()\r\n\r\n   \r\n    \r\n    for row in rows:\r\n        #print "{0} {1} {2} {3}".format(row[\'nome_fornitore\'],len(row[\'nome_fornitore\']),cliente,len(cliente))\r\n        \r\n        if row[\'listino\'] == listino:\r\n            if row[\'codice_articolo\'] == articolo:\r\n                #print "OK"\r\n                end = int(row[\'numero_pezzi\'])\r\n                #print "Numero pezzi : ",end\r\n                if (int(numero) > start) and (int(numero) <= end):\r\n                    #print "prezzo corrente : ",float(row[\'prezzo\'])\r\n                    prezzo_corrente = float(row[\'prezzo\'])\r\n                start = end\r\n                    \r\n    #print prezzo_corrente\r\n    if prezzo_corrente == 0:\r\n        prezzo_corrente=""                \r\n    return prezzo_corrente\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef search_piano_dei_conti(args):\r\n    return_data = []\r\n    gruppo = args[:-5]\r\n    conto = args[2:4]\r\n    sottoconto = args[4:]\r\n    \r\n    gruppo_to_search=gruppo + "00000"\r\n    conto_to_search=gruppo+conto+"000"\r\n    sottoconto_to_search = gruppo + conto + sottoconto\r\n   \r\n    descrizione_gruppo = ""\r\n    descrizione_conto = ""\r\n    descrizione_sottoconto = ""\r\n    \r\n    #print gruppo_to_search,conto_to_search,sottoconto_to_search\r\n        \r\n    try:\r\n        descrizione_gruppo = db(db.anagrafica_piano_dei_conti.codice_piano_dei_conti == gruppo_to_search).select().first()["descrizione_codice"]\r\n    except:\r\n       pass\r\n    \r\n    \r\n    if not conto_to_search == gruppo_to_search:\r\n        try:\r\n            descrizione_conto = db(db.anagrafica_piano_dei_conti.codice_piano_dei_conti == conto_to_search).select().first()["descrizione_codice"]\r\n        except:\r\n            pass\r\n        \r\n    if not sottoconto_to_search == gruppo_to_search and not sottoconto_to_search == conto_to_search:\r\n        try:\r\n            descrizione_sottoconto = db(db.anagrafica_piano_dei_conti.codice_piano_dei_conti == sottoconto_to_search).select().first()["descrizione_codice"]\r\n        except:\r\n            pass\r\n    \r\n    if len(descrizione_gruppo)<1:\r\n        gruppo_to_search=""\r\n        \r\n    if len(descrizione_conto)<1:\r\n        conto_to_search=""\r\n    \r\n    if len(descrizione_sottoconto)<1:\r\n        sottoconto_to_search=""\r\n        \r\n    \r\n    return_data.append(gruppo_to_search)\r\n    return_data.append(descrizione_gruppo)\r\n    \r\n    return_data.append(conto_to_search)\r\n    return_data.append(descrizione_conto)\r\n    \r\n    return_data.append(sottoconto_to_search)\r\n    return_data.append(descrizione_sottoconto)\r\n    \r\n    #print return_data\r\n    return return_data\r\n\r\ndef ritorna_nome_cliente_da_riga_ordine(id_ordine):\r\n\t#id_ordine_cliente=db(db.righe_in_ordine_cliente.id==id_riga_ordine).select().first()["id_ordine_cliente"]\r\n\ttry:\r\n        \tnome=db(db.ordine_cliente.id==id_ordine).select().first()["nome_cliente"]\r\n        except:\r\n            nome=""\r\n\treturn nome\r\n\r\ndef ritorna_nome_fornitore_da_riga_ordine(id_ordine):\r\n    \t#id_ordine_cliente=db(db.righe_in_ordine_cliente.id==id_riga_ordine).select().first()["id_ordine_cliente"]\r\n\ttry:\r\n        \tnome=db(db.ordine_fornitore.id==id_ordine).select().first()["nome_fornitore"]\r\n        except:\r\n            nome=""\r\n\treturn nome\t\r\n\t\r\ndef ritorna_ddt_da_id(ddt_id):\r\n    try:\r\n        ddt=db(db.saved_ddt.saved_ddt_id==ddt_id).select().first()["numero_ddt"]\r\n    except:\r\n        ddt=""\r\n    \r\n    return ddt\r\n\r\ndef ritorna_ddt_da_id_fornitori(ddt_id):\r\n    try:\r\n        ddt=db(db.saved_ddt_fornitori.saved_ddt_id==ddt_id).select().first()["numero_ddt"]\r\n    except:\r\n        ddt=""\r\n    \r\n    return ddt\r\n\r\n\r\ndef storico_articoli_prodotti_cron():\r\n    db(db.storico_articoli_prodotti).delete()\r\n    rows=db(db.saved_righe_in_ddt_cliente.codice_articolo !="commento").select()\r\n    for row in rows:\r\n        ddt=ddt=ritorna_ddt_da_id(row.saved_ddt_id)\r\n        if len(ddt)>0:\r\n            db.storico_articoli_prodotti.insert(cliente=ritorna_nome_cliente_da_riga_ordine(row.id_ordine),codice_ordine=row.codice_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,descrizione=row.descrizione,riferimento_ordine=row.riferimento_ordine,quantita=row.quantita,prezzo=row.prezzo,codice_iva=row.codice_iva,evasione=row.evasione,ddt=ddt)\r\n    return locals()\r\n\r\n\r\ndef storico_articoli_prodotti():\r\n    #db.saved_righe_in_ddt_cliente.nome_cliente=Field.Virtual("Cliente", lambda row: ritorna_nome_cliente_da_riga_ordine(row.saved_righe_in_ddt_cliente.id_ordine))\r\n    db.storico_articoli_prodotti.id.readable=False\r\n    articoli=SQLFORM.grid(db.storico_articoli_prodotti,formname=\'articoli\',maxtextlength=100,create=False,        deletable=False,editable=False,searchable=True,sortable=True,paginate=7, formstyle = \'table3cols\',csv=False,user_signature=True)\r\n    \r\n    return locals()\r\n\r\ndef storico_articoli_prodotti_fornitore_cron():\r\n    db(db.storico_articoli_prodotti_fornitore).delete()\r\n    rows=db(db.saved_righe_in_ddt_fornitore).select()\r\n    for row in rows:\r\n        ddt=ddt=ritorna_ddt_da_id_fornitori(row.saved_ddt_id)\r\n        if len(ddt)>0:\r\n            db.storico_articoli_prodotti_fornitore.insert(fornitore=ritorna_nome_fornitore_da_riga_ordine(row.id_ordine),codice_ordine=row.codice_ordine,n_riga=row.n_riga,codice_articolo=row.codice_articolo,descrizione=row.descrizione,riferimento_ordine=row.riferimento_ordine,quantita=row.quantita,prezzo=row.prezzo,codice_iva=row.codice_iva,evasione=row.evasione,ddt=ddt)\r\n    \r\n    return locals()\r\n\r\n\r\n\r\ndef storico_articoli_prodotti_fornitore():\r\n    #db.saved_righe_in_ddt_cliente.nome_cliente=Field.Virtual("Cliente", lambda row: ritorna_nome_cliente_da_riga_ordine(row.saved_righe_in_ddt_cliente.id_ordine))\r\n    db.storico_articoli_prodotti_fornitore.id.readable=False\r\n    articoli=SQLFORM.grid(db.storico_articoli_prodotti_fornitore,formname=\'articoli\',maxtextlength=100,create=False,        deletable=False,editable=False,searchable=True,sortable=True,paginate=7, formstyle = \'table3cols\',csv=False,user_signature=True)\r\n    \r\n    return locals()\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef stampa_etichetta(*args):\r\n    cliente = args[0]\r\n    codice_articolo = args[1]\r\n    descrizione = args[2]\r\n    quantita= args[3]\r\n    lotto = args[4]\r\n    numero_etichette = args[5]\r\n    ordine = args[6]\r\n    contenitore = args[7]\r\n\r\n    #print quantita\r\n    #print contenitore\r\n    \r\n    etichette_totali,ultima_capienza_contenitore = divmod(int(quantita),int(contenitore))\r\n    \r\n    \r\n    if ultima_capienza_contenitore == 0:\r\n        ultima_capienza_contenitore = contenitore\r\n        etichette_da_scrivere = etichette_totali\r\n        if etichette_totali == 1:\r\n                #print "qui"\r\n\t\tetichette_totali ==0\r\n    else:\r\n       etichette_da_scrivere = etichette_totali +1\r\n \r\n    \r\n    \r\n\r\n    if True:\r\n        """\r\n        if cliente == "new_global":\r\n    \t\tprn_file = request.folder + \'prn_labels/new_global.prn\'\r\n        \tcodice_articolo = codice_articolo[1:]\r\n                destinazione = args[8]\r\n                ordine +=destinazione\r\n\t\r\n\tif cliente == "siat":\r\n    \t\tprn_file = request.folder + \'prn_labels/siat.prn\'\r\n    \t\t\r\n    \t\r\n    \tif cliente == "mc":\r\n    \t\tprn_file = request.folder + \'prn_labels/mc.prn\'\r\n        \t\r\n        \r\n\r\n        if cliente == "new_global_romania":\r\n    \t\tprn_file = request.folder + \'prn_labels/new_global_romania.prn\'\r\n        \tcodice_articolo = codice_articolo[1:]\r\n                destinazione = args[8]\r\n                ordine +="  "+destinazione\t\r\n\r\n        if "cimbali" in cliente:\r\n    \t\tprn_file = request.folder + \'prn_labels/cimbali.prn\'\r\n        \t\r\n                destinazione = args[8]\r\n                ordine +=destinazione\t        \r\n\r\n        if "rhea" in cliente:\r\n    \t\tprn_file = request.folder + \'prn_labels/rhea.prn\'\r\n                if codice_articolo[len(codice_articolo)-1].isdigit():\r\n\t\t\t\r\n                \tcodice_articolo = "Z"+codice_articolo[:-2]\r\n\t\telse:\r\n\t\t\tcodice_articolo = "Z" + codice_articolo[:-4] + codice_articolo[len(codice_articolo)-2:] \r\n\r\n                destinazione = args[8]\r\n                ordine +=destinazione\t\r\n\t"""\r\n\t\r\n\tprn_file = request.folder + \'prn_labels/mc.prn\'\r\n        for x in range(etichette_totali):\r\n   \t    \r\n    \t    _content = []\r\n            #print "IN FOR"\r\n    \r\n    \t    with open(prn_file, \'r\') as content_file:\r\n    \t\t    content = content_file.read()\r\n    \t    \r\n    \t\t    content = content.replace("[*1*]", codice_articolo)\r\n    \t\t    content = content.replace("[*2*]", descrizione)\r\n    \t\t    content = content.replace("[*3*]", quantita)\r\n    \t\t    content = content.replace("[*5*]", ordine)\r\n    \t\t    content = content.replace("[*6*]", contenitore)\r\n    \t\t    content = content.replace("[*10*]", str(x + 1))\r\n    \t\t    content = content.replace("[*11*]", str(etichette_da_scrivere))\r\n    \t\t    content = content.replace("[*12*]", cliente)\r\n    \t\t\r\n            with open("/tmp/to#print.prn", \'w\') as content_file:\r\n                   content_file.write(content)\r\n    \t\t\t \r\n            print_label(numero_etichette)\r\n        \r\n            with open(prn_file, \'r\') as content_file:\r\n    \r\n                content = content_file.read()\r\n    \t  \r\n        if etichette_totali ==1:\r\n             with open(prn_file, \'r\') as content_file:\r\n    \t\t    content = content_file.read()\r\n\r\n    \tcontent = content.replace("[*1*]", codice_articolo)\r\n    \tcontent = content.replace("[*2*]", descrizione)\r\n    \tcontent = content.replace("[*3*]", quantita)\r\n    \tcontent = content.replace("[*5*]", ordine)\r\n    \tcontent = content.replace("[*6*]", str(ultima_capienza_contenitore))\r\n    \tcontent = content.replace("[*10*]", str(etichette_da_scrivere))\r\n    \tcontent = content.replace("[*11*]", str(etichette_da_scrivere))\r\n    \tcontent = content.replace("[*12*]", cliente)   \r\n    \t    \r\n    \twith open("/tmp/to#print.prn", \'w\') as content_file:\r\n    \t\tcontent_file.write(content)\r\n        print etichette_totali,ultima_capienza_contenitore\r\n    \tif etichette_totali >0 and not ultima_capienza_contenitore == contenitore:\t \r\n    \t\tprint_label(numero_etichette)\r\n\r\ndef print_label(numero_etichette):\r\n    \r\n        ip="192.168.0.208"\r\n        port = "9100"\r\n        prn_file = "/tmp/to#print.prn"\r\n        \r\n        try:\r\n           numero = int(numero_etichette)\r\n        except:\r\n           numero = 1\r\n        \r\n        for x in range(numero):\r\n        \t#command = "ncat --send-only "+ip+" "+port+" < "+prn_file\r\n        \tcommand = "nc "+ip+" "+port+" < "+prn_file\r\n        \t#print command\r\n        \tp = subprocess.Popen(command, shell=True)\r\n        \tp.wait()\r\n\r\n\r\ndef user():\r\n    """\r\n    exposes:\r\n    http://..../[app]/default/user/login\r\n    http://..../[app]/default/user/logout\r\n    http://..../[app]/default/user/register\r\n    http://..../[app]/default/user/profile\r\n    http://..../[app]/default/user/retrieve_password\r\n    http://..../[app]/default/user/change_password\r\n    http://..../[app]/default/user/bulk_register\r\n    use @auth.requires_login()\r\n        @auth.requires_membership(\'group name\')\r\n        @auth.requires_permission(\'read\',\'table name\',record_id)\r\n    to decorate functions that need access control\r\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\r\n    """\r\n    return dict(form=auth())\r\n\r\n\r\n@cache.action()\r\ndef download():\r\n    """\r\n    allows downloading of uploaded files\r\n    http://..../[app]/default/download/[filename]\r\n    """\r\n    return response.download(request, db)\r\n\r\n\r\ndef call():\r\n    """\r\n    exposes services. for example:\r\n    http://..../[app]/default/call/jsonrpc\r\n    decorate with @services.jsonrpc the functions to expose\r\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\r\n    """\r\n    return service()\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_xml(args):\r\n\r\n    data={}\r\n    fattura=None\r\n    fattura=FatturaXml()\r\n    articoli=set([])\r\n\r\n    partitaIvaCarpal="01619570193"\r\n    codiceFiscaleCarpal="01619570193"\r\n    denominazioneCarpal="MICROCARP S.R.L."\r\n    indirizzoCarpal="Strada Statale 415"\r\n    capCarpal="26012"\r\n    provinciaCarpal="CR"\r\n    paeseCarpal="Castelleone"\r\n\r\n    #Progressivo Invio\r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    numeroDocumento=str(numero)\r\n\r\n    progressivoInvio=numero_fattura_da_salvare\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    """\r\n    Dati cliente\r\n    """\r\n    id_cliente=args[\'0\']\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    iban_cliente = dati_cliente.codice_iban\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\r\n    annotazioni=dati_cliente.annotazioni\r\n    codiceDestinatario=dati_cliente.codiceDestinatario\r\n    pecDestinatario=dati_cliente.pec\r\n    dichiarazione=dati_cliente.descrizione_esenzione_iva\r\n    bollo_interno=dati_cliente.bollo\r\n\r\n    esigibilitaIva="I"\r\n    if "leonardo" in nome_cliente.lower():\r\n         esigibilitaIva="S"\r\n         try:\r\n             ddt = db(db.ddt_da_fatturare.user_id == auth.user_id).select().first()\r\n             ddt_id=ddt.ddt_id\r\n             print "Dettaglio ddt",ddt\r\n             numero_ddt=ddt.numero_ddt\r\n             data_emissione_ddt=ddt.data_emissione\r\n             print data_emissione_ddt\r\n             data_emissione_ddt=datetime.datetime.strptime(data_emissione_ddt,"%d/%m/%Y")\r\n             fattura.addSingleDdt(numero_ddt,data_emissione_ddt.strftime("%Y-%m-%d"))\r\n\r\n\r\n             righe=db(db.saved_righe_in_ddt_cliente.saved_ddt_id==ddt_id).select().first()\r\n             id_ordine=righe.id_ordine\r\n             dati_ordine=db(db.ordine_cliente.id==id_ordine).select().first()\r\n             print dati_ordine\r\n             ente=dati_ordine.ente\r\n             idOrdineAcquisto=dati_ordine.riferimento_ordine_cliente\r\n             cig=dati_ordine.cig\r\n             cup=dati_ordine.cup\r\n             if cig is not None or cup is not None:\r\n                fattura.addOrdineAcquisto(idOrdineAcquisto,cig,cup)\r\n\r\n             print "Trovata ente : "+ente\r\n             \r\n             if "ETN" in ente:\r\n                 codiceDestinatario="DL33NSJ"\r\n\r\n             if "SAS" in ente:\r\n                 codiceDestinatario="OXPJRM5"\r\n             \r\n             if "SSI" in ente:\r\n                 codiceDestinatario="RUZUQNZ"\r\n             \r\n\r\n         except:\r\n             data[\'msg\']="Impossibile recuperare ente per "+str(nome_cliente)\r\n             data[\'error\']=True\r\n             return json.dumps(data)\r\n\r\n         \r\n\r\n    if bollo_interno:\r\n        fattura.addBollo()\r\n\r\n    if dichiarazione is not None:\r\n            if len(dichiarazione)>0:\r\n                    fattura.addDichiarazione(dichiarazione)\r\n\r\n    if codiceDestinatario is None and pecDestinatario is None:\r\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if len(codiceDestinatario)<5 and len(pecDestinatario)<5:\r\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if pi_cliente is None:\r\n        data[\'msg\']="Inserire la partita iva per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n   \r\n    \r\n    fattura.addDatiTrasmissione("IT",codiceFiscaleCarpal,progressivoInvio,codiceDestinatario,pecDestinatario)\r\n    fattura.addCedentePrestatore("IT",partitaIvaCarpal,denominazioneCarpal)\r\n    fattura.addSedeCedentePrestatore(indirizzoCarpal,capCarpal,paeseCarpal,provinciaCarpal,"IT")\r\n\r\n    #Dati cliente\r\n    fattura.addCessionarioCommittente("IT",pi_cliente.replace("IT",""),nome_cliente)\r\n    fattura.addSedeCessionarioCommittente(indirizzo_cliente,cap_cliente,citta_cliente,provincia_cliente,"IT")\r\n\r\n    tipoDocumento=ritornaTipoDiPagamento(args[\'1\'])\r\n\r\n\r\n    #Calcolo data fattura\r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    for r in ddts_id:\r\n        data_scelta = r.data_emissione\r\n        \r\n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\r\n        \r\n    day_start,day_end = monthrange(m.year, m.month)\r\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\r\n    \r\n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\r\n\r\n    #Creazione descrizione fattura\r\n    descrizione_fattura=""\r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    for ddt_id in ddts_id:\r\n        descrizione_fattura += "Rif. DDT : " + ddt_id.numero_ddt + " del " + ddt_id.data_emissione+" "\r\n\r\n    fattura.addDatiGeneraliDocumento(tipoDocumento,fixDate(start_date.strftime("%d-%m-%Y")),numeroDocumento,descrizione_fattura)\r\n    \r\n    #Controllare se ci possono essere pi\xc3\xb9 rate di pagamento\r\n\r\n    """\r\n    if len(righeDataScadenza)>1:\r\n        pagamento="TP01"\r\n    else:\r\n        pagamento="TP02"\r\n    \r\n    """\r\n    #Per ora metto sempre solo 1 rata\r\n    pagamento="TP02"\r\n    fattura.addCondizioniPagamento(pagamento)\r\n\r\n    articoli=[]\r\n    for ddt_id in ddts_id:\r\n      rows = db(db.saved_righe_in_ddt_cliente.saved_ddt_id == ddt_id.ddt_id).select()\r\n      for row in rows:\r\n        if not "commento" in row.codice_articolo:\r\n                articolo=[]\r\n                id_ordine = row.id_ordine\r\n                try:\r\n                      \r\n                      try:\r\n                          pagamento = db(db.ordine_cliente.id == id_ordine).select().first()["pagamento"]\r\n                     \r\n                      except:\r\n                          pagamento = None\r\n                                                                \r\n                      if pagamento is None:\r\n                            pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                       \r\n                      if "F.M." in pagamento:\r\n                          fine_mese = True\r\n                      else:\r\n                          fine_mese = False\r\n\r\n                      if not fine_mese:\r\n                              \r\n                          try:\r\n                              giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                              \r\n                              if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                          \r\n                              scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                              scadenza_salvata = scadenza\r\n                              scadenza = scadenza.strftime("%d/%m/%Y")\r\n                          except:\r\n                               response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                               return locals()\r\n                              \r\n                      else:\r\n                          \r\n                           if ("M.S." or "ms") in pagamento:\r\n                               \r\n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                               \r\n                               giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                               scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                               scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                               scadenza = scadenza.strftime("%d/%m/%Y") \r\n                               \r\n                           else:\r\n                               #Fine mese senza M.S.               \r\n                               giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                               if start_date.date().month==12 or start_date.date().month==1 or start_date.date().month==2:\r\n                               \t   if int(giorni_da_aggiungere)==60:\r\n                               \t   \tgiorni_da_aggiungere="56"\r\n                               \t   if int(giorni_da_aggiungere)==90:\r\n                               \t   \tgiorni_da_aggiungere="86"\r\n                               \t   \t\r\n                               \t   if int(giorni_da_aggiungere)==120:\r\n                               \t   \tgiorni_da_aggiungere="116"\r\n                               \r\n                               \r\n                               scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                               day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                               scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n\r\n                      #fattura.dettaglio(str(id_cliente),dettagli_banca.descrizione,str(iban_cliente),pagamento,str(scadenza))\r\n                      codice_articolo=row.codice_articolo\r\n                      descrizione=row.descrizione\r\n                      um=row.u_m\r\n                      qta=row.quantita\r\n                      codice_iva=row.codice_iva\r\n                      riferimento_ordine=row.riferimento_ordine\r\n                      prezzo=row.prezzo\r\n                      n_riga=str(row.n_riga)\r\n                      descrizione+=" Pos. "+n_riga \r\n\r\n                      percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["percentuale_iva"]\r\n                      codice_iva_interno=db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["codice_iva"]\r\n                      bollo = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["bollo_su_importi_esenti"]\r\n\r\n                      #print codice_articolo,descrizione,um,qta,prezzo,riferimento_ordine,pagamento,scadenza\r\n                      articolo.append(codice_articolo)\r\n                      articolo.append(descrizione)\r\n                      articolo.append(codice_iva)\r\n                      articolo.append(percentuale_iva)\r\n                      articolo.append(bollo)\r\n                      articolo.append(um)\r\n                      articolo.append(qta)\r\n                      articolo.append(controllaPrezzo(prezzo))\r\n                      articolo.append(riferimento_ordine)\r\n                      articolo.append(pagamento)\r\n                      articolo.append(scadenza)\r\n                      articolo.append(ritornaCondizioniPagamento(pagamento))\r\n                      articolo.append(codice_iva_interno)\r\n\r\n                      add=True\r\n                      for a in articoli:\r\n                          #print a,articolo,a==articolo\r\n                          if a==articolo:\r\n                              add=False\r\n                              break\r\n\r\n                      if add:\r\n                          \r\n                          articoli.append(articolo)\r\n                     \r\n                      articolo=[]\r\n                except Exception,e:\r\n                     \r\n                       data[\'msg\']="Controllare tipo pagamento per  cliente "+str(nome_cliente)+str(e)\r\n                       data[\'error\']=True\r\n                       return json.dumps(data)\r\n    \r\n\r\n\r\n    if bollo_interno:\r\n        articolo=[]\r\n \r\n        codice_iva_interno="54"\r\n      \r\n        articolo.append("")\r\n        articolo.append("Imposta di bollo assolta in modo virtuale ex DM 17/06/2014")\r\n        articolo.append("Esente Iva")\r\n        articolo.append(0.00)\r\n        articolo.append("")\r\n        articolo.append("Nr")\r\n        articolo.append("1")\r\n        articolo.append("2.00")\r\n        articolo.append("")\r\n        articolo.append(pagamento)\r\n        articolo.append(scadenza)\r\n        articolo.append(ritornaCondizioniPagamento(pagamento))\r\n        articolo.append(codice_iva_interno)\r\n        articoli.append(articolo) \r\n\r\n    def ritornaImponibile(qta,prezzo):\r\n        imponibile= float(qta)*float(prezzo)\r\n        print imponibile,float("%0.2f"%imponibile)\r\n        return float("%0.2f"%imponibile)\r\n\r\n\r\n    def ritornaTotaleArticoli(articoli):\r\n        totale=0.0\r\n        for articolo in articoli:\r\n            imponibile=ritornaImponibile(articolo[6],articolo[7])\r\n            percentualeIva=articolo[3]\r\n            totaleIvaInclusa=imponibile + (imponibile*percentualeIva)/100\r\n            totale+=totaleIvaInclusa\r\n\r\n        return str("{:.2f}".format(totale))\r\n    \r\n\r\n\r\n    #Dettagilio Pagamento\r\n    articolo=articoli[0]\r\n    dataToFix=articolo[10]\r\n    d=dataToFix.split("/")\r\n\r\n    if len(d[1])==1:\r\n        d[1]="0"+d[1]\r\n\r\n    if len(d[0])==1:\r\n        d[0]="0"+d[1]\r\n    \r\n    \r\n    d=d[2]+"-"+d[1]+"-"+d[0]\r\n    fattura.addDettaglioPagamento(articolo[11],d,ritornaTotaleArticoli(articoli))\r\n    print "Totale iva inclusa : ",ritornaTotaleArticoli(articoli)\r\n\r\n\r\n    #TotalerigheCodiciIva\r\n\r\n    db(db.anagrafica_codici_iva).select()\r\n\r\n    TotaleRigheCodiciIva={}\r\n\r\n\r\n\r\n    for articolo in articoli:\r\n        percentuale_iva=articolo[3]\r\n        codice_iva_interno=articolo[12]\r\n        \r\n        imponibile=ritornaImponibile(articolo[6],articolo[7])\r\n        if not TotaleRigheCodiciIva.has_key(codice_iva_interno):\r\n            TotaleRigheCodiciIva[codice_iva_interno] = imponibile\r\n\r\n        else:\r\n            TotaleRigheCodiciIva[codice_iva_interno] = TotaleRigheCodiciIva[codice_iva_interno] + imponibile\r\n\r\n\r\n           \r\n    print TotaleRigheCodiciIva\r\n    for k in TotaleRigheCodiciIva:\r\n    \r\n       aliquota_iva = db(db.anagrafica_codici_iva.codice_iva == k).select().first()["percentuale_iva"]\r\n       imponibile=TotaleRigheCodiciIva[k]\r\n       \r\n       if k=="22":\r\n           aliquota_iva="22.00"\r\n           descrizione_imposta=""\r\n           if esigibilitaIva=="S":\r\n                 descrizione_imposta=scritta_esenzione_cliente\r\n           \r\n           imposta=(imponibile*22.0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),esigibilitaIva,descrizione_imposta,k)\r\n\r\n       if k=="10":\r\n           aliquota_iva="10.00"\r\n           descrizione_imposta=""\r\n           imposta=(imponibile*10.0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),esigibilitaIva,descrizione_imposta,k)\r\n\r\n\r\n\r\n\r\n       if k=="53":\r\n           aliquota_iva="0.00"\r\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\r\n           imposta=(imponibile*0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),esigibilitaIva,descrizione_imposta,k)\r\n           print "sono qui"\r\n\r\n       if k=="54":\r\n           aliquota_iva="0.00"\r\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\r\n           imposta=(imponibile*0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\r\n\r\n\r\n    numero_linea=1\r\n    for articolo in articoli:\r\n        if "22" in articolo[12]:\r\n            aliquota="22.00"\r\n        elif "10" in articolo[12]:\r\n            aliquota="10.00"\r\n        else:\r\n            aliquota="0.00"\r\n   \r\n\r\n        descrizione=articolo[0]+" "+articolo[1]+" Ord. "+articolo[8] #riferimento ordine\r\n        qta=fixPrezzo(articolo[6])+".00"\r\n        prezzo=str(articolo[7])\r\n        codice_iva=str(articolo[12])\r\n        importo=str("{:.2f}".format(ritornaImponibile(qta,prezzo)))\r\n\r\n        \r\n\r\n        fattura.addLinea(str(numero_linea),descrizione,qta,prezzo,importo,aliquota,codice_iva)\r\n        numero_linea+=1\r\n    \r\n\r\n    nome_file=fattura.writeXml()\r\n    #cwd = os.getcwd()+"/applications/gestionale/uploads/fatture/"\r\n    #id_cliente=args[\'0\']\r\n    #tipo_fattura=args[\'1\']\r\n\r\n    #data[\'error\']=None\r\n    data[\'msg\']="Tutapost"\r\n    data[\'filename\']=nome_file\r\n\r\n    return json.dumps(data)\r\n\r\n\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_xml_istantanea(args):\r\n\r\n    data={}\r\n    fattura=None\r\n    fattura=FatturaXml()\r\n    articoli=set([])\r\n\r\n    partitaIvaCarpal="01619570193"\r\n    codiceFiscaleCarpal="01619570193"\r\n    denominazioneCarpal="MICROCARP S.R.L."\r\n    indirizzoCarpal="Strada Statale 415"\r\n    capCarpal="26012"\r\n    provinciaCarpal="CR"\r\n    paeseCarpal="Castelleone"\r\n\r\n    #Progressivo Invio\r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    numeroDocumento=str(numero)\r\n\r\n    progressivoInvio=numero_fattura_da_salvare\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    """\r\n    Dati cliente\r\n    """\r\n    id_cliente=args[\'0\']\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    iban_cliente = dati_cliente.codice_iban\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\r\n    annotazioni=dati_cliente.annotazioni\r\n    codiceDestinatario=dati_cliente.codiceDestinatario\r\n    pecDestinatario=dati_cliente.pec\r\n    bollo_interno=dati_cliente.bollo\r\n\r\n    dichiarazione=dati_cliente.descrizione_esenzione_iva\r\n\r\n    if dichiarazione is not None:\r\n            if len(dichiarazione)>0:\r\n                    fattura.addDichiarazione(dichiarazione)\r\n\r\n\r\n    if codiceDestinatario is None and pecDestinatario is None:\r\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if pi_cliente is None:\r\n        data[\'msg\']="Inserire la partita iva per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if len(codiceDestinatario)<5 and len(pecDestinatario)<5:\r\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if bollo_interno:\r\n        fattura.addBollo()\r\n\r\n   \r\n    \r\n    fattura.addDatiTrasmissione("IT",codiceFiscaleCarpal,progressivoInvio,codiceDestinatario,pecDestinatario)\r\n    fattura.addCedentePrestatore("IT",partitaIvaCarpal,denominazioneCarpal)\r\n    fattura.addSedeCedentePrestatore(indirizzoCarpal,capCarpal,paeseCarpal,provinciaCarpal,"IT")\r\n\r\n    #Dati cliente\r\n    fattura.addCessionarioCommittente("IT",pi_cliente.replace("IT",""),nome_cliente)\r\n    fattura.addSedeCessionarioCommittente(indirizzo_cliente,cap_cliente,citta_cliente,provincia_cliente,"IT")\r\n\r\n    tipoDocumento=ritornaTipoDiPagamento(args[\'1\'])\r\n\r\n\r\n    #Calcolo data fattura\r\n    """\r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    for r in ddts_id:\r\n        data_scelta = r.data_emissione\r\n        \r\n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\r\n        \r\n    day_start,day_end = monthrange(m.year, m.month)\r\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\r\n    \r\n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\r\n    """\r\n    start_date = datetime.datetime.now()\r\n\r\n    #Creazione descrizione fattura\r\n    descrizione_fattura="Fattura Immediata"\r\n    fattura.addDatiGeneraliDocumento(tipoDocumento,fixDate(start_date.strftime("%d-%m-%Y")),numeroDocumento,descrizione_fattura)\r\n    \r\n    #Controllare se ci possono essere pi\xc3\xb9 rate di pagamento\r\n\r\n    """\r\n    if len(righeDataScadenza)>1:\r\n        pagamento="TP01"\r\n    else:\r\n        pagamento="TP02"\r\n    \r\n    """\r\n    #Per ora metto sempre solo 1 rata\r\n    pagamento="TP02"\r\n    fattura.addCondizioniPagamento(pagamento)\r\n\r\n    articoli=[]\r\n    articolo=[]\r\n\r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n    if True:\r\n        rows = db(db.righe_in_fattura_istantanea).select()\r\n        for row in rows:\r\n        \r\n            try:\r\n         \r\n                \r\n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                  print "Pagamento :",pagamento\r\n                        \r\n                  if "F.M." in pagamento:\r\n                      fine_mese = True\r\n                  else:\r\n                      fine_mese = False\r\n                      \r\n                   \r\n                  \r\n                    \r\n                  \r\n                  \r\n                  if not fine_mese:\r\n                       try:\r\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                          scadenza_salvata = scadenza\r\n                          scadenza = scadenza.strftime("%d/%m/%Y")\r\n                         \r\n                       except:\r\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                           return locals()\r\n                  else:\r\n                      \r\n                       if ("M.S." or "ms") in pagamento:\r\n                           \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                           scadenza = scadenza.strftime("%d/%m/%Y") \r\n                           \r\n                       else:\r\n                           #Fine mese senza M.S.               \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           print "Scadenza : ",scadenza\r\n                       \r\n                  print "qui prima articolo"\r\n                  print row\r\n                  codice_articolo=row.codice_articolo\r\n                  descrizione=row.descrizione\r\n                  um=row.u_m\r\n                  qta=row.qta\r\n                  codice_iva=row.codice_iva\r\n                  print "Codice iva",codice_iva\r\n                  riferimento_ordine=row.riferimento_ordine\r\n                  prezzo=row.prezzo\r\n                  print "qui dopo articolo"\r\n                  \r\n                  percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["percentuale_iva"]\r\n                  codice_iva_interno=db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["codice_iva"]\r\n                  bollo = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["bollo_su_importi_esenti"]\r\n\r\n                  articolo.append(codice_articolo)\r\n                  articolo.append(descrizione)\r\n                  articolo.append(codice_iva)\r\n                  articolo.append(percentuale_iva)\r\n                  articolo.append(bollo)\r\n                  articolo.append(um)\r\n                  articolo.append(qta)\r\n                  articolo.append(controllaPrezzo(prezzo))\r\n                  articolo.append(riferimento_ordine)\r\n                  articolo.append(pagamento)\r\n                  articolo.append(scadenza)\r\n                  articolo.append(ritornaCondizioniPagamento(pagamento))\r\n                  articolo.append(codice_iva_interno)\r\n\r\n                  add=True\r\n                  for a in articoli:\r\n                          print a,articolo,a==articolo\r\n                          if a==articolo:\r\n                              add=False\r\n                              break\r\n\r\n                  if add:\r\n                      articoli.append(articolo)\r\n                      articolo=[]\r\n            except Exception,e:\r\n                     \r\n                       data[\'msg\']="Controllare tipo pagamento per  cliente "+str(nome_cliente)+str(e)\r\n                       data[\'error\']=True\r\n                       return json.dumps(data) \r\n                      \r\n\r\n\r\n    if bollo_interno:\r\n        articolo=[]\r\n \r\n        codice_iva_interno="54"\r\n      \r\n        articolo.append("")\r\n        articolo.append("Imposta di bollo assolta in modo virtuale ex DM 17/06/2014")\r\n        articolo.append("Esente Iva")\r\n        articolo.append(0.00)\r\n        articolo.append("")\r\n        articolo.append("Nr")\r\n        articolo.append("1")\r\n        articolo.append("2.00")\r\n        articolo.append("")\r\n        articolo.append(pagamento)\r\n        articolo.append(scadenza)\r\n        articolo.append(ritornaCondizioniPagamento(pagamento))\r\n        articolo.append(codice_iva_interno)\r\n        articoli.append(articolo)     \r\n\r\n\r\n    print articoli\r\n    def ritornaImponibile(qta,prezzo):\r\n        imponibile= float(qta)*float(prezzo)\r\n        return float("%0.2f"%imponibile)\r\n\r\n\r\n    def ritornaTotaleArticoli(articoli):\r\n        totale=0.0\r\n        for articolo in articoli:\r\n            imponibile=ritornaImponibile(articolo[6],articolo[7])\r\n            percentualeIva=articolo[3]\r\n            totaleIvaInclusa=imponibile + (imponibile*percentualeIva)/100\r\n            totale+=totaleIvaInclusa\r\n\r\n        return str("{:.2f}".format(totale))\r\n    \r\n\r\n\r\n    #Dettagilio Pagamento\r\n    articolo=articoli[0]\r\n    dataToFix=articolo[10]\r\n    d=dataToFix.split("/")\r\n\r\n    if len(d[1])==1:\r\n        d[1]="0"+d[1]\r\n\r\n    if len(d[0])==1:\r\n        d[0]="0"+d[1]\r\n    \r\n    \r\n    d=d[2]+"-"+d[1]+"-"+d[0]\r\n    fattura.addDettaglioPagamento(articolo[11],d,ritornaTotaleArticoli(articoli))\r\n\r\n    print articolo[11],d,ritornaTotaleArticoli(articoli)\r\n    print "Totale iva inclusa : ",ritornaTotaleArticoli(articoli)\r\n\r\n\r\n    #TotalerigheCodiciIva\r\n\r\n    db(db.anagrafica_codici_iva).select()\r\n\r\n    TotaleRigheCodiciIva={}\r\n\r\n\r\n\r\n    for articolo in articoli:\r\n        print articolo\r\n        percentuale_iva=articolo[3]\r\n        codice_iva_interno=articolo[12]\r\n        \r\n        imponibile=ritornaImponibile(articolo[6],articolo[7])\r\n        if not TotaleRigheCodiciIva.has_key(codice_iva_interno):\r\n            TotaleRigheCodiciIva[codice_iva_interno] = imponibile\r\n\r\n        else:\r\n            TotaleRigheCodiciIva[codice_iva_interno] = TotaleRigheCodiciIva[codice_iva_interno] + imponibile\r\n\r\n\r\n           \r\n\r\n    for k in TotaleRigheCodiciIva:\r\n    \r\n       aliquota_iva = db(db.anagrafica_codici_iva.codice_iva == k).select().first()["percentuale_iva"]\r\n       imponibile=TotaleRigheCodiciIva[k]\r\n       \r\n       if k=="22":\r\n           aliquota_iva="22.00"\r\n           descrizione_imposta=""\r\n           imposta=(imponibile*22.0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\r\n\r\n       if k=="10":\r\n           aliquota_iva="10.00"\r\n           descrizione_imposta=""\r\n           imposta=(imponibile*10.0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\r\n\r\n\r\n\r\n\r\n       if k=="53":\r\n           aliquota_iva="0.00"\r\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\r\n           imposta=(imponibile*0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\r\n\r\n       if k=="54":\r\n           aliquota_iva="0.00"\r\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\r\n           imposta=(imponibile*0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\r\n\r\n\r\n\r\n    numero_linea=1\r\n    for articolo in articoli:\r\n        if "22" in articolo[12]:\r\n            aliquota="22.00"\r\n        elif "10" in articolo[12]:\r\n            aliquota="10.00"\r\n        else:\r\n            aliquota="0.00"\r\n   \r\n\r\n        descrizione=articolo[0]+" "+articolo[1]+" "+articolo[8] #riferimento ordine\r\n        qta=fixPrezzo(articolo[6])+".00"\r\n        prezzo=str(articolo[7])\r\n        codice_iva=str(articolo[12])\r\n        importo=str("{:.2f}".format(ritornaImponibile(qta,prezzo)))\r\n\r\n        \r\n\r\n        fattura.addLinea(str(numero_linea),descrizione,qta,prezzo,importo,aliquota,codice_iva)\r\n        numero_linea+=1\r\n    \r\n\r\n    nome_file=fattura.writeXml()\r\n    #cwd = os.getcwd()+"/applications/gestionale/uploads/fatture/"\r\n    #id_cliente=args[\'0\']\r\n    #tipo_fattura=args[\'1\']\r\n\r\n    #data[\'error\']=None\r\n    data[\'msg\']="Tutapost"\r\n    data[\'filename\']=nome_file\r\n\r\n    return json.dumps(data)\r\n\r\n\r\ndef controllaPrezzo(prezzo):\r\n    p = str(prezzo)\r\n    if "." not in p:\r\n        p+=".00"\r\n    return p\r\n\r\n@service.jsonrpc\r\n@service.jsonrpc2\r\ndef crea_fattura_xml_accredito(args):\r\n\r\n    data={}\r\n    fattura=None\r\n    fattura=FatturaXml()\r\n    articoli=set([])\r\n\r\n    partitaIvaCarpal="01619570193"\r\n    codiceFiscaleCarpal="01619570193"\r\n    denominazioneCarpal="MICROCARP S.R.L."\r\n    indirizzoCarpal="Strada Statale 415"\r\n    capCarpal="26012"\r\n    provinciaCarpal="CR"\r\n    paeseCarpal="Castelleone"\r\n\r\n    #Progressivo Invio\r\n    numero_corrente_fattura = db(db.fattura).select().first()["numero_fattura"]\r\n    numero = int(numero_corrente_fattura.split("/")[0])\r\n    anno = int(numero_corrente_fattura.split("/")[1])\r\n    numero +=1\r\n    numero_fattura_da_salvare = str(numero)+"/"+str(anno)\r\n    numeroDocumento=str(numero)\r\n\r\n    progressivoInvio=numero_fattura_da_salvare\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n    """\r\n    Dati cliente\r\n    """\r\n    id_cliente=args[\'0\']\r\n    dati_cliente = db(db.clienti.id == id_cliente).select().first()\r\n    nome_cliente=dati_cliente.nome\r\n    citta_cliente = dati_cliente.citta\r\n    indirizzo_cliente = dati_cliente.indirizzo\r\n    cap_cliente = dati_cliente.cap\r\n    provincia_cliente = dati_cliente.provincia\r\n    cf_cliente = dati_cliente.codice_fiscale\r\n    pi_cliente = dati_cliente.partita_iva\r\n    nazione_cliente = dati_cliente.nazione\r\n    codice_banca = dati_cliente.codice_banca\r\n    iban_cliente = dati_cliente.codice_iban\r\n    dettagli_banca = db(db.anagrafica_banche.descrizione == codice_banca).select().first()\r\n    scritta_esenzione_cliente = dati_cliente.descrizione_esenzione_iva\r\n    annotazioni=dati_cliente.annotazioni\r\n    codiceDestinatario=dati_cliente.codiceDestinatario\r\n    pecDestinatario=dati_cliente.pec\r\n    bollo_interno=dati_cliente.bollo\r\n\r\n    dichiarazione=dati_cliente.descrizione_esenzione_iva\r\n\r\n    if dichiarazione is not None:\r\n            if len(dichiarazione)>0:\r\n                    fattura.addDichiarazione(dichiarazione)\r\n    \r\n    """\r\n    arguments[\'1\']=\'accredito\'\r\n    arguments[\'2\']=ente\r\n    arguments[\'3\'] =causale\r\n    arguments[\'4\'] = riferimento_ordine\r\n    arguments[\'5\'] = cig\r\n    arguments[\'6\'] = cup\r\n    """\r\n\r\n    causale=args[\'3\']\r\n    riferimento_ordine=args[\'4\']\r\n    cig=args[\'5\']\r\n    cup=args[\'6\']\r\n\r\n    fattura.addOrdineAcquisto(riferimento_ordine,cig,cup)\r\n\r\n    esigibilitaIva="I"\r\n    if "leonardo" in nome_cliente.lower():\r\n\r\n         esigibilitaIva="S"\r\n         try:\r\n             ente=args[\'2\']\r\n             print "Trovata ente : "+ente\r\n             \r\n             if "ETN" in ente:\r\n                 codiceDestinatario="DL33NSJ"\r\n\r\n             if "SAS" in ente:\r\n                 codiceDestinatario="OXPJRM5"\r\n             \r\n             if "SSI" in ente:\r\n                 codiceDestinatario="RUZUQNZ"\r\n             \r\n\r\n         except:\r\n             data[\'msg\']="Impossibile recuperare ente per "+str(nome_cliente)\r\n             data[\'error\']=True\r\n             return json.dumps(data)\r\n    \r\n\r\n    if codiceDestinatario is None and pecDestinatario is None:\r\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if pi_cliente is None:\r\n        data[\'msg\']="Inserire la partita iva per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if len(codiceDestinatario)<5 and len(pecDestinatario)<5:\r\n        data[\'msg\']="Inserire codice destinatario o pec per il cliente "+str(nome_cliente)\r\n        data[\'error\']=True\r\n        return json.dumps(data)\r\n\r\n    if bollo_interno:\r\n        fattura.addBollo()\r\n\r\n    \r\n    \r\n    fattura.addDatiTrasmissione("IT",codiceFiscaleCarpal,progressivoInvio,codiceDestinatario,pecDestinatario)\r\n    fattura.addCedentePrestatore("IT",partitaIvaCarpal,denominazioneCarpal)\r\n    fattura.addSedeCedentePrestatore(indirizzoCarpal,capCarpal,paeseCarpal,provinciaCarpal,"IT")\r\n\r\n    #Dati cliente\r\n    fattura.addCessionarioCommittente("IT",pi_cliente.replace("IT",""),nome_cliente)\r\n    fattura.addSedeCessionarioCommittente(indirizzo_cliente,cap_cliente,citta_cliente,provincia_cliente,"IT")\r\n\r\n    tipoDocumento=ritornaTipoDiPagamento(args[\'1\'])\r\n\r\n\r\n    #Calcolo data fattura\r\n    """\r\n    ddts_id = db(db.ddt_da_fatturare.user_id == auth.user_id).select()\r\n    for r in ddts_id:\r\n        data_scelta = r.data_emissione\r\n        \r\n    m = datetime.datetime.strptime(data_scelta,"%d/%m/%Y").date()\r\n        \r\n    day_start,day_end = monthrange(m.year, m.month)\r\n    d = str(day_end)+"/"+str(m.month)+"/"+str(m.year)\r\n    \r\n    start_date = datetime.datetime.strptime(d,"%d/%m/%Y")\r\n    """\r\n    start_date = datetime.datetime.now()\r\n\r\n    #Creazione descrizione fattura\r\n    descrizione_fattura=causale\r\n    fattura.addDatiGeneraliDocumento(tipoDocumento,fixDate(start_date.strftime("%d-%m-%Y")),numeroDocumento,descrizione_fattura)\r\n    \r\n    #Controllare se ci possono essere pi\xc3\xb9 rate di pagamento\r\n\r\n    """\r\n    if len(righeDataScadenza)>1:\r\n        pagamento="TP01"\r\n    else:\r\n        pagamento="TP02"\r\n    \r\n    """\r\n    #Per ora metto sempre solo 1 rata\r\n    pagamento="TP02"\r\n    fattura.addCondizioniPagamento(pagamento)\r\n\r\n    articoli=[]\r\n    articolo=[]\r\n\r\n    fattura.rows=[]\r\n    lista_codici_iva =  {}\r\n    \r\n    importo_totale = 0\r\n    imposta_totale = 0\r\n    imposta_iva = 0\r\n    lista_ddt = []\r\n    if True:\r\n        rows = db(db.righe_in_fattura_istantanea).select()\r\n        for row in rows:\r\n        \r\n            try:\r\n         \r\n                \r\n                  pagamento = db(db.clienti.id == id_cliente).select().first()["pagamento"]\r\n                  print "Pagamento :",pagamento\r\n                        \r\n                  if "F.M." in pagamento:\r\n                      fine_mese = True\r\n                  else:\r\n                      fine_mese = False\r\n                      \r\n                   \r\n                  \r\n                    \r\n                  \r\n                  \r\n                  if not fine_mese:\r\n                       try:\r\n                          giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                          scadenza = datetime.datetime.now().date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                          scadenza_salvata = scadenza\r\n                          scadenza = scadenza.strftime("%d/%m/%Y")\r\n                         \r\n                       except:\r\n                           response.flash="Tipo di pagamento \'{0}\' non esistente in anagraficaca pagamenti".format(pagamento)\r\n                           return locals()\r\n                  else:\r\n                      \r\n                       if ("M.S." or "ms") in pagamento:\r\n                           \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           giorni_mese_successivo = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni_mese_successivo"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))\r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           scadenza = datetime.datetime.strptime(scadenza,"%d/%m/%Y")\r\n                           scadenza = scadenza.date() + datetime.timedelta(days = int(giorni_mese_successivo))\r\n                           scadenza = scadenza.strftime("%d/%m/%Y") \r\n                           \r\n                       else:\r\n                           #Fine mese senza M.S.               \r\n                           giorni_da_aggiungere = db(db.codici_pagamenti.descrizione_codice_pagamento == pagamento).select().first()["giorni"]\r\n                           scadenza = start_date.date() + datetime.timedelta(days = int(giorni_da_aggiungere))                           \r\n                           day_start,day_end = monthrange(scadenza.year, scadenza.month)\r\n                           scadenza = str(day_end)+"/"+str(scadenza.month)+"/"+str(scadenza.year)\r\n                           print "Scadenza : ",scadenza\r\n                       \r\n                  print "qui prima articolo"\r\n                  print row\r\n                  codice_articolo=row.codice_articolo\r\n                  descrizione=row.descrizione\r\n                  um=row.u_m\r\n                  qta=row.qta\r\n                  codice_iva=row.codice_iva\r\n                  riferimento_ordine=row.riferimento_ordine\r\n                  prezzo=row.prezzo\r\n                  print "qui dopo articolo"\r\n                  \r\n                  percentuale_iva = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["percentuale_iva"]\r\n                  codice_iva_interno=db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["codice_iva"]\r\n                  bollo = db(db.anagrafica_codici_iva.descrizione_codice_iva == codice_iva).select().first()["bollo_su_importi_esenti"]\r\n\r\n                  articolo.append(codice_articolo)\r\n                  articolo.append(descrizione)\r\n                  articolo.append(codice_iva)\r\n                  articolo.append(percentuale_iva)\r\n                  articolo.append(bollo)\r\n                  articolo.append(um)\r\n                  articolo.append(qta)\r\n                  articolo.append(controllaPrezzo(prezzo))\r\n                  articolo.append(riferimento_ordine)\r\n                  articolo.append(pagamento)\r\n                  articolo.append(scadenza)\r\n                  articolo.append(ritornaCondizioniPagamento(pagamento))\r\n                  articolo.append(codice_iva_interno)\r\n\r\n                  add=True\r\n                  for a in articoli:\r\n                          print a,articolo,a==articolo\r\n                          if a==articolo:\r\n                              add=False\r\n                              break\r\n\r\n                  if add:\r\n                      if "commento" not in articolo[0]:\r\n                          articoli.append(articolo)\r\n                      articolo=[]\r\n            except Exception,e:\r\n                     \r\n                       data[\'msg\']="Controllare tipo pagamento per  cliente "+str(nome_cliente)+str(e)\r\n                       data[\'error\']=True\r\n                       return json.dumps(data) \r\n\r\n\r\n    if bollo_interno:\r\n        articolo=[]\r\n \r\n        codice_iva_interno="54"\r\n      \r\n        articolo.append("")\r\n        articolo.append("Imposta di bollo assolta in modo virtuale ex DM 17/06/2014")\r\n        articolo.append("Esente Iva")\r\n        articolo.append(0.00)\r\n        articolo.append("")\r\n        articolo.append("Nr")\r\n        articolo.append("1")\r\n        articolo.append("2.00")\r\n        articolo.append("")\r\n        articolo.append(pagamento)\r\n        articolo.append(scadenza)\r\n        articolo.append(ritornaCondizioniPagamento(pagamento))\r\n        articolo.append(codice_iva_interno)\r\n        articoli.append(articolo)           \r\n                        \r\n    def ritornaImponibile(qta,prezzo):\r\n        try:\r\n            imponibile= float(qta)*float(prezzo)\r\n            print imponibile,float("%0.2f"%imponibile)\r\n            return round(imponibile,2)\r\n        except:\r\n            return 0\r\n\r\n\r\n    def ritornaTotaleArticoli(articoli):\r\n        totale=0.0\r\n        for articolo in articoli:\r\n            try:\r\n                imponibile=ritornaImponibile(articolo[6],articolo[7])\r\n                percentualeIva=articolo[3]\r\n                totaleIvaInclusa=imponibile + (imponibile*percentualeIva)/100\r\n                totale+=totaleIvaInclusa\r\n            except Exception,e:\r\n                print e\r\n                pass\r\n\r\n        return str("{:.2f}".format(totale))\r\n    \r\n\r\n\r\n    #Dettagilio Pagamento\r\n    articolo=articoli[0]\r\n    dataToFix=articolo[10]\r\n    d=dataToFix.split("/")\r\n\r\n    if len(d[1])==1:\r\n        d[1]="0"+d[1]\r\n\r\n    if len(d[0])==1:\r\n        d[0]="0"+d[1]\r\n    \r\n    \r\n    d=d[2]+"-"+d[1]+"-"+d[0]\r\n    fattura.addDettaglioPagamento(articolo[11],d,ritornaTotaleArticoli(articoli))\r\n    print "Totale iva inclusa : ",ritornaTotaleArticoli(articoli)\r\n\r\n\r\n    #TotalerigheCodiciIva\r\n\r\n    db(db.anagrafica_codici_iva).select()\r\n\r\n    TotaleRigheCodiciIva={}\r\n\r\n\r\n\r\n    for articolo in articoli:\r\n        percentuale_iva=articolo[3]\r\n        codice_iva_interno=articolo[12]\r\n        \r\n        imponibile=ritornaImponibile(articolo[6],articolo[7])\r\n        if not TotaleRigheCodiciIva.has_key(codice_iva_interno):\r\n            TotaleRigheCodiciIva[codice_iva_interno] = imponibile\r\n\r\n        else:\r\n            TotaleRigheCodiciIva[codice_iva_interno] = TotaleRigheCodiciIva[codice_iva_interno] + imponibile\r\n\r\n\r\n   \r\n\r\n\r\n    for k in TotaleRigheCodiciIva:\r\n    \r\n       aliquota_iva = db(db.anagrafica_codici_iva.codice_iva == k).select().first()["percentuale_iva"]\r\n       imponibile=TotaleRigheCodiciIva[k]\r\n       \r\n       if k=="22":\r\n           aliquota_iva="22.00"\r\n           descrizione_imposta=""\r\n           if esigibilitaIva=="S":\r\n                 descrizione_imposta=scritta_esenzione_cliente\r\n\r\n           imposta=(imponibile*22.0)/100\r\n           \r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)), esigibilitaIva,descrizione_imposta,k)\r\n\r\n       if k=="10":\r\n           aliquota_iva="10.00"\r\n           descrizione_imposta=""\r\n           imposta=(imponibile*10.0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),esigibilitaIva,descrizione_imposta,k)\r\n\r\n\r\n\r\n\r\n       if k=="53":\r\n           aliquota_iva="0.00"\r\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\r\n           imposta=(imponibile*0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),esigibilitaIva,descrizione_imposta,k)\r\n\r\n\r\n       if k=="54":\r\n           aliquota_iva="0.00"\r\n           descrizione_imposta=db(db.anagrafica_codici_iva.codice_iva == k).select().first()["descrizione"]\r\n           imposta=(imponibile*0)/100\r\n           fattura.addDatiRiepilogo(aliquota_iva,str("{:.2f}".format(imponibile)),str("{:.2f}".format(imposta)),"I",descrizione_imposta,k)\r\n\r\n\r\n    numero_linea=1\r\n    for articolo in articoli:\r\n        if "22" in articolo[12]:\r\n            aliquota="22.00"\r\n        elif "10" in articolo[12]:\r\n            aliquota="10.00"\r\n        else:\r\n            aliquota="0.00"\r\n   \r\n\r\n        descrizione=articolo[0]+" "+articolo[1]+" "+articolo[8] #riferimento ordine\r\n        qta=fixPrezzo(articolo[6])+".00"\r\n        prezzo=str(articolo[7])\r\n        codice_iva=str(articolo[12])\r\n        importo=str("{:.2f}".format(ritornaImponibile(qta,prezzo)))\r\n       \r\n\r\n        \r\n\r\n        fattura.addLinea(str(numero_linea),descrizione,qta,prezzo,importo,aliquota,codice_iva)\r\n        numero_linea+=1\r\n    \r\n\r\n    nome_file=fattura.writeXml()\r\n    #cwd = os.getcwd()+"/applications/gestionale/uploads/fatture/"\r\n    #id_cliente=args[\'0\']\r\n    #tipo_fattura=args[\'1\']\r\n\r\n    #data[\'error\']=None\r\n    data[\'msg\']="Tutapost"\r\n    data[\'filename\']=nome_file\r\n\r\n    return json.dumps(data)\r\n\nresponse._vars=response._caller(call)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__getslice__'
p12
S"<method-wrapper '__getslice__' of exceptions.IndentationError object>"
p13
sS'text'
p14
S"'                else:\\n'"
p15
sS'__str__'
p16
S"<method-wrapper '__str__' of exceptions.IndentationError object>"
p17
sS'__reduce__'
p18
S'<built-in method __reduce__ of exceptions.IndentationError object>'
p19
sS'__dict__'
p20
S'{}'
p21
sS'__sizeof__'
p22
S'<built-in method __sizeof__ of exceptions.IndentationError object>'
p23
sS'__init__'
p24
S"<method-wrapper '__init__' of exceptions.IndentationError object>"
p25
sS'__setattr__'
p26
S"<method-wrapper '__setattr__' of exceptions.IndentationError object>"
p27
sS'__reduce_ex__'
p28
S'<built-in method __reduce_ex__ of exceptions.IndentationError object>'
p29
sS'__new__'
p30
S'<built-in method __new__ of type object>'
p31
sS'__format__'
p32
S'<built-in method __format__ of exceptions.IndentationError object>'
p33
sS'__class__'
p34
S"<type 'exceptions.IndentationError'>"
p35
sS'filename'
p36
S"'/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py'"
p37
sS'lineno'
p38
S'1951'
p39
sS'msg'
p40
S"'unindent does not match any outer indentation level'"
p41
sS'__doc__'
p42
S"'Improper indentation.'"
p43
sS'__getitem__'
p44
S"<method-wrapper '__getitem__' of exceptions.IndentationError object>"
p45
sS'__setstate__'
p46
S'<built-in method __setstate__ of exceptions.IndentationError object>'
p47
sS'__getattribute__'
p48
S"<method-wrapper '__getattribute__' of exceptions.IndentationError object>"
p49
sS'print_file_and_line'
p50
S'None'
p51
sS'args'
p52
S"('unindent does not match any outer indentation level', ('/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py', 1951, 22, '                else:\\n'))"
p53
sS'__subclasshook__'
p54
S'<built-in method __subclasshook__ of type object>'
p55
sS'offset'
p56
S'22'
p57
sS'__unicode__'
p58
S'<built-in method __unicode__ of exceptions.IndentationError object>'
p59
sS'__delattr__'
p60
S"<method-wrapper '__delattr__' of exceptions.IndentationError object>"
p61
sS'__repr__'
p62
S"<method-wrapper '__repr__' of exceptions.IndentationError object>"
p63
sS'__hash__'
p64
S"<method-wrapper '__hash__' of exceptions.IndentationError object>"
p65
ssS'evalue'
p66
S'unindent does not match any outer indentation level (default.py, line 1951)'
p67
sS'request'
p68
cgluon.html
XML_unpickle
p69
(S's\x8eu\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">ajax</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">application</td><td style="vertical-align:top;">:</td><td><div>gestionale</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">args</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>jsonrpc</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cid</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">controller</td><td style="vertical-align:top;">:</td><td><div>default</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">PHPSESSID</td><td style="vertical-align:top;">:</td><td><div>dl9ummntum36divajifiapmvqo<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_admin</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-aaffabde-5767-4dfa-b2de-8f0400a197ab<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_carpalpa</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-ad0c1492-936a-4637-90cd-ffc443f800df<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_gestionale</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-45234626-d2ab-4a33-bc95-e09a1712e7fe<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_lucal</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-fb2f1943-ed20-4d1d-8658-f7d9e39d73f4<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_verpelli</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-99f17c0d-336f-4b79-a74e-7baeee4e62b1<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_welcome</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-9c021390-1fe7-473d-ad4f-4be01397800f<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">env</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>92</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT</td><td style="vertical-align:top;">:</td><td><div>*/*</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_ENCODING</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, br</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ACCEPT_LANGUAGE</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONNECTION</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_LENGTH</td><td style="vertical-align:top;">:</td><td><div>92</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_CONTENT_TYPE</td><td style="vertical-align:top;">:</td><td><div>json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_COOKIE</td><td style="vertical-align:top;">:</td><td><div>PHPSESSID=dl9ummntum36divajifiapmvqo; session_id_welcome=127.0.0.1-9c021390-1fe7-473d-ad4f-4be01397800f; session_id_carpalpa=127.0.0.1-ad0c1492-936a-4637-90cd-ffc443f800df; session_id_verpelli=127.0.0.1-99f17c0d-336f-4b79-a74e-7baeee4e62b1; session_id_lucal=127.0.0.1-fb2f1943-ed20-4d1d-8658-f7d9e39d73f4; session_id_admin=127.0.0.1-aaffabde-5767-4dfa-b2de-8f0400a197ab; session_id_gestionale=127.0.0.1-45234626-d2ab-4a33-bc95-e09a1712e7fe</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_HOST</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_ORIGIN</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_REFERER</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/gestionale/default/fatturazione_differita_2/1493</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_USER_AGENT</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">HTTP_X_REQUESTED_WITH</td><td style="vertical-align:top;">:</td><td><div>XMLHttpRequest</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">PATH_INFO</td><td style="vertical-align:top;">:</td><td><div>/gestionale/default/call/jsonrpc</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">QUERY_STRING</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_ADDR</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REMOTE_PORT</td><td style="vertical-align:top;">:</td><td><div>53402</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">REQUEST_METHOD</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SCRIPT_NAME</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_NAME</td><td style="vertical-align:top;">:</td><td><div>vale-laptop</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PORT</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_PROTOCOL</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">SERVER_SOFTWARE</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/media/vale/Samsung USB/web2py/applications/gestionale/&#x27;, &#x27;/media/vale/Samsung USB/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/media/vale/Samsung USB/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x7fef13930638: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;vale-laptop&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/media/vale/Samsung USB/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_length</td><td style="vertical-align:top;">:</td><td><div>92</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">content_type</td><td style="vertical-align:top;">:</td><td><div>json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/media/vale/Samsung USB/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept</td><td style="vertical-align:top;">:</td><td><div>*/*</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_encoding</td><td style="vertical-align:top;">:</td><td><div>gzip, deflate, br</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_accept_language</td><td style="vertical-align:top;">:</td><td><div>en-US,en;q=0.9</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_connection</td><td style="vertical-align:top;">:</td><td><div>keep-alive</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_length</td><td style="vertical-align:top;">:</td><td><div>92</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_content_type</td><td style="vertical-align:top;">:</td><td><div>json</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_cookie</td><td style="vertical-align:top;">:</td><td><div>PHPSESSID=dl9ummntum36divajifiapmvqo; session_id_welcome=127.0.0.1-9c021390-1fe7-473d-ad4f-4be01397800f; session_id_carpalpa=127.0.0.1-ad0c1492-936a-4637-90cd-ffc443f800df; session_id_verpelli=127.0.0.1-99f17c0d-336f-4b79-a74e-7baeee4e62b1; session_id_lucal=127.0.0.1-fb2f1943-ed20-4d1d-8658-f7d9e39d73f4; session_id_admin=127.0.0.1-aaffabde-5767-4dfa-b2de-8f0400a197ab; session_id_gestionale=127.0.0.1-45234626-d2ab-4a33-bc95-e09a1712e7fe</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_host</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_origin</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_referer</td><td style="vertical-align:top;">:</td><td><div>http://127.0.0.1:8000/gestionale/default/fatturazione_differita_2/1493</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_user_agent</td><td style="vertical-align:top;">:</td><td><div>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">http_x_requested_with</td><td style="vertical-align:top;">:</td><td><div>XMLHttpRequest</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>vale-laptop</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path_info</td><td style="vertical-align:top;">:</td><td><div>/gestionale/default/call/jsonrpc</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">query_string</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_addr</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remote_port</td><td style="vertical-align:top;">:</td><td><div>53402</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_method</td><td style="vertical-align:top;">:</td><td><div>POST</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">request_uri</td><td style="vertical-align:top;">:</td><td><div>/gestionale/default/call/jsonrpc</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">script_name</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_name</td><td style="vertical-align:top;">:</td><td><div>vale-laptop</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_port</td><td style="vertical-align:top;">:</td><td><div>8000</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_protocol</td><td style="vertical-align:top;">:</td><td><div>HTTP/1.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">server_software</td><td style="vertical-align:top;">:</td><td><div>Rocket 1.2.6</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_path</td><td style="vertical-align:top;">:</td><td><div>/media/vale/Samsung USB/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.6-stable+timestamp.2016.05.10.00.21.47</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7fef1e6d51e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x7fef16139c18&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x7feeddc32450&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi.version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_errors</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;&lt;stderr&gt;&#x27;, mode &#x27;w&#x27; at 0x7fef1e6d51e0&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_file_wrapper</td><td style="vertical-align:top;">:</td><td><div>&lt;class wsgiref.util.FileWrapper at 0x7fef16139c18&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_input</td><td style="vertical-align:top;">:</td><td><div>&lt;socket._fileobject object at 0x7feeddc32450&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multiprocess</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_multithread</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_run_once</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_url_scheme</td><td style="vertical-align:top;">:</td><td><div>http</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi_version</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>1</div></td></tr><tr><td><div>0</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">extension</td><td style="vertical-align:top;">:</td><td><div>html</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">folder</td><td style="vertical-align:top;">:</td><td><div>/media/vale/Samsung USB/web2py/applications/gestionale/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">function</td><td style="vertical-align:top;">:</td><td><div>call</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">global_settings</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">app_folders</td><td style="vertical-align:top;">:</td><td><div>set([&#x27;/media/vale/Samsung USB/web2py/applications/gestionale/&#x27;, &#x27;/media/vale/Samsung USB/web2py/applications/admin/&#x27;])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">applications_parent</td><td style="vertical-align:top;">:</td><td><div>/media/vale/Samsung USB/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_args</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cmd_options</td><td style="vertical-align:top;">:</td><td><div>&lt;Values at 0x7fef13930638: {&#x27;verbose&#x27;: False, &#x27;ip&#x27;: &#x27;127.0.0.1&#x27;, &#x27;debuglevel&#x27;: 30, &#x27;with_scheduler&#x27;: False, &#x27;shutdown_timeout&#x27;: 5, &#x27;taskbar&#x27;: False, &#x27;with_coverage&#x27;: False, &#x27;pid_filename&#x27;: &#x27;httpserver.pid&#x27;, &#x27;maxthreads&#x27;: None, &#x27;softcron&#x27;: False, &#x27;server_name&#x27;: &#x27;vale-laptop&#x27;, &#x27;bpython&#x27;: False, &#x27;nogui&#x27;: False, &#x27;port&#x27;: 8000, &#x27;print_errors&#x27;: False, &#x27;extcron&#x27;: False, &#x27;runcron&#x27;: False, &#x27;run_system_tests&#x27;: False, &#x27;test&#x27;: None, &#x27;folder&#x27;: &#x27;/media/vale/Samsung USB/web2py&#x27;, &#x27;config&#x27;: &#x27;&#x27;, &#x27;minthreads&#x27;: None, &#x27;shell&#x27;: None, &#x27;run&#x27;: &#x27;&#x27;, &#x27;log_filename&#x27;: &#x27;httpserver.log&#x27;, &#x27;profiler_dir&#x27;: None, &#x27;args&#x27;: [&#x27;&#x27;], &#x27;socket_timeout&#x27;: 5, &#x27;ssl_ca_certificate&#x27;: None, &#x27;scheduler&#x27;: None, &#x27;interfaces&#x27;: None, &#x27;ssl_private_key&#x27;: &#x27;&#x27;, &#x27;gae&#x27;: None, &#x27;password&#x27;: &#x27;******&#x27;, &#x27;request_queue_size&#x27;: 5, &#x27;ssl_certificate&#x27;: &#x27;&#x27;, &#x27;cronjob&#x27;: False, &#x27;numthreads&#x27;: None, &#x27;quiet&#x27;: False, &#x27;import_models&#x27;: False, &#x27;timeout&#x27;: 10, &#x27;plain&#x27;: False, &#x27;nobanner&#x27;: False}&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">db_sessions</td><td style="vertical-align:top;">:</td><td><div>set([])</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">debugging</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">gluon_parent</td><td style="vertical-align:top;">:</td><td><div>/media/vale/Samsung USB/web2py</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_jython</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_pypy</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_source</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">local_hosts</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>vale-laptop</div></td></tr><tr><td><div>::1</div></td></tr><tr><td><div>127.0.1.1</div></td></tr><tr><td><div>::ffff:127.0.0.1</div></td></tr><tr><td><div>127.0.0.1</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">web2py_version</td><td style="vertical-align:top;">:</td><td><div>2.14.6-stable+timestamp.2016.05.10.00.21.47</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_https</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_local</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_restful</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_scheduler</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">is_shell</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">now</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2019, 2, 21, 20, 19, 3, 642776)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_args</td><td style="vertical-align:top;">:</td><td><div>jsonrpc</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">raw_extension</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">url</td><td style="vertical-align:top;">:</td><td><div>/gestionale/default/call/jsonrpc</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">utcnow</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2019, 2, 21, 19, 19, 3, 642793)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">wsgi</td><td style="vertical-align:top;">:</td><td><div>&lt;gluon.main.LazyWSGI object at 0x7feedde20810&gt;</div></td></tr></table></div>'
tRp70
sS'frames'
p71
(lp72
(dp73
S'file'
p74
S'/media/vale/Samsung USB/web2py/gluon/restricted.py'
p75
sS'dump'
p76
(dp77
S'code'
p78
S"'# -*- coding: utf-8 -*-\\r\\n# this file is released...ps(data)\\r\\n\\nresponse._vars=response._caller(call)\\n'"
p79
sS'layer'
p80
S"'/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py'"
p81
sS'global compile2'
p82
S'<function compile2>'
p83
sS'ccode'
p84
S'undefined'
p85
ssS'lnum'
p86
I226
sS'lines'
p87
(dp88
I224
S'            ccode = code'
p89
sI225
S'        else:'
p90
sI226
S'            ccode = compile2(code, layer)'
p91
sI227
S'        exec ccode in environment'
p92
sI228
S'    except HTTP:'
p93
sI229
S'        raise'
p94
sI230
S'    except RestrictedError:'
p95
sI221
S"    environment['__name__'] = '__restricted__'"
p96
sI222
S'    try:'
p97
sI223
S'        if isinstance(code, types.CodeType):'
p98
ssS'call'
p99
S"(code='# -*- coding: utf-8 -*-\\r\\n# this file is released...ps(data)\\r\\n\\nresponse._vars=response._caller(call)\\n', environment={'A': <class 'gluon.html.A'>, 'ANY_OF': <class 'gluon.validators.ANY_OF'>, 'ASSIGNJS': <function ASSIGNJS>, 'AppConfig': <function AppConfig>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, ...}, layer='/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py')"
p100
sS'func'
p101
S'restricted'
p102
sa(dp103
g74
S'/media/vale/Samsung USB/web2py/gluon/restricted.py'
p104
sg76
(dp105
S'builtincompile'
p106
S'<built-in function compile>'
p107
sS'code'
p108
S"'# -*- coding: utf-8 -*-\\r\\n# this file is released...ps(data)\\r\\n\\nresponse._vars=response._caller(call)\\n'"
p109
sS'code.rstrip'
p110
S'<built-in method rstrip of str object>'
p111
sS').replace'
p112
g85
sS'layer'
p113
S"'/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py'"
p114
ssg86
I209
sg87
(dp115
I204
S'def compile2(code, layer):'
p116
sI205
S'    """'
p117
sI206
S"    The ``+'\\\\n'`` is necessary else compile fails when code ends in a comment."
p118
sI207
S'    """'
p119
sI208
S''
sI209
S"    return compile(code.rstrip().replace('\\r\\n', '\\n') + '\\n', layer, 'exec')"
p120
sI210
S''
sI211
S''
sI212
S"def restricted(code, environment=None, layer='Unknown'):"
p121
sI213
S'    """'
p122
ssg99
S"(code='# -*- coding: utf-8 -*-\\r\\n# this file is released...ps(data)\\r\\n\\nresponse._vars=response._caller(call)\\n', layer='/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py')"
p123
sg101
S'compile2'
p124
sasS'pyver'
p125
S'Python 2.7.15rc1: /usr/bin/python (prefix: /usr)'
p126
sS'session'
p127
g69
(S's\xf4\x08\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">auth</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">expiration</td><td style="vertical-align:top;">:</td><td><div>3600</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">hmac_key</td><td style="vertical-align:top;">:</td><td><div>1e6da041-02e1-478b-a9f8-9e43536ec37e</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_visit</td><td style="vertical-align:top;">:</td><td><div>datetime.datetime(2019, 2, 21, 20, 16, 30, 38865)</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">remember_me</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">email</td><td style="vertical-align:top;">:</td><td><div>info@microcarp.com</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">first_name</td><td style="vertical-align:top;">:</td><td><div>ornella</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">id</td><td style="vertical-align:top;">:</td><td><div>2L</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">last_name</td><td style="vertical-align:top;">:</td><td><div>ornella</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_id</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">registration_key</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">reset_password_key</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">username</td><td style="vertical-align:top;">:</td><td><div>ornella</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">user_groups</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr></table></div>'
tRp128
sS'etype'
p129
S"<type 'exceptions.IndentationError'>"
p130
sS'date'
p131
S'Thu Feb 21 20:19:03 2019'
p132
sS'response'
p133
g69
(S's\xccG\x00\x00<div><table><tr><td style="font-weight:bold;vertical-align:top;">body</td><td style="vertical-align:top;">:</td><td><div>&lt;cStringIO.StringO object at 0x7feedca48730&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">cookies</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">session_id_gestionale</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-45234626-d2ab-4a33-bc95-e09a1712e7fe<table><tr><td style="font-weight:bold;vertical-align:top;">comment</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">domain</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">expires</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">httponly</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">max-age</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">path</td><td style="vertical-align:top;">:</td><td><div>/</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">secure</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">version</td><td style="vertical-align:top;">:</td><td><div></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">delimiters</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>{{</div></td></tr><tr><td><div>}}</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">files</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">flash</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">form_label_separator</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">formstyle</td><td style="vertical-align:top;">:</td><td><div>bootstrap3_inline</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generic_patterns</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>*</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">google_analytics_id</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">headers</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">X-Powered-By</td><td style="vertical-align:top;">:</td><td><div>web2py</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">logo</td><td style="vertical-align:top;">:</td><td><div><a class="navbar-brand" href="http://www.web2py.com/" id="web2py-logo"><b>web<span>2</span>py</b>&trade;&nbsp;</a></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">menu</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div><table><tr><td><div>Admin</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/adminpanel</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Gestione Utenti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/appadmin/manage/auth</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione codici causali</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/gestione_codici_causali</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione codici pagamenti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/gestione_codici_pagamenti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione numero fattura</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/gestione_numero_fattura</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione numero ddt</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/gestione_numero_ddt</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione bolli</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/gestione_bolli</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione causali</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/causali</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione porto</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/porto</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione vettori</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/vettori</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione aspetto_esteriore_dei_beni</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/aspetto_esteriore_dei_beni</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Manutenzione righe ordini clienti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/manutenzione_righe_ordini_clienti</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Contabilit\xc3\xa0</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/contabilita_panel</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Inserimento piano dei conti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/gestione_piano_dei_conti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Fatturazione differita</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/fatturazione_differita</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Fatturazione immediata</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/fatturazione_istantanea</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Nota di accredito</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/nota_di_accredito</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Emissione Riba</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/emissione_riba</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafiche</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/vendite_panel</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Anagrafica clienti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_clienti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica fornitori</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_fornitori</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica articoli</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_articoli</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica listini</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_listini</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica banche clienti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_banche</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica banche microcarp</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_banche_azienda</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica sottoconti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_piano_dei_conti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica codici iva</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_codici_iva</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica magazzini interni</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_magazzini_interni</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Anagrafica causali trasporti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/anagrafica_causali_trasporti</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Ordini</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/ordini_panel</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Ordini clienti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/ordini_clienti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Ordini fornitori</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/ordini_fornitori</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>DDT</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/ordini_panel</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>DDT clienti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/ddt_clienti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>DDT fornitori</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/ddt_fornitori</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Modifica DDT clienti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/mod_ddt_clienti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Cancella DDT clienti</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/del_ddt_clienti</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Report</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/default</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Situazione fatturato mensile</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/calcola_totale_per_mese_da_ddt_cliente</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Situazione fatturato annuale</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/calcola_totale_per_anno</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Situazione fatturato Leonardo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/calcola_totale_per_anno_leonardo</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Scadenzario per mese</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/scadenziario</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Articoli in produzione</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/articoli_in_produzione</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Storico articoli prodotti cliente</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/storico_articoli_prodotti</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Storico articoli prodotti fornitore</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/storico_articoli_prodotti_fornitore</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Produzione</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/default</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Aggiorna produzione articoli</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/aggiorna_giacenze</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione lavorazioni</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/gestione_lavorazioni</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Gestione lavorazioni per articolo</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/produzione/lista_articoli</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Stampa fasi articoli da ordine</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/produzione/stampa_fasi_articoli_da_ordine</div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Controllo integrit\xc3\xa0</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/default</div></td></tr><tr><td><div><table><tr><td><div><table><tr><td><div>Visualizza errori</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div>/gestionale/default/controllo_errori</div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Visualizza ultima fattura creata</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div><a href="/gestionale/static/fattura.pdf" target="_blank">Visualizza ultima fattura creata</a></div></td></tr></table></div></td></tr><tr><td><div><table><tr><td><div>Visualizza ultima ddt creato</div></td></tr><tr><td><div>False</div></td></tr><tr><td><div><a href="/gestionale/static/html.pdf" target="_blank">Visualizza ultimo ddt creato</a></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">meta</td><td style="vertical-align:top;">:</td><td><div><table><tr><td style="font-weight:bold;vertical-align:top;">author</td><td style="vertical-align:top;">:</td><td><div>Your Name &lt;you@example.com&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">description</td><td style="vertical-align:top;">:</td><td><div>a cool new app</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">generator</td><td style="vertical-align:top;">:</td><td><div>Web2py Web Framework</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">keywords</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>web2py</div></td></tr><tr><td><div>python</div></td></tr><tr><td><div>framework</div></td></tr></table></div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">models_to_run</td><td style="vertical-align:top;">:</td><td><div><table><tr><td><div>^\\w+\\.py$</div></td></tr><tr><td><div>^default/\\w+\\.py$</div></td></tr><tr><td><div>^default/call/\\w+\\.py$</div></td></tr></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">postprocessing</td><td style="vertical-align:top;">:</td><td><div><table></table></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_client</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_compression_level</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_cookie_expires</td><td style="vertical-align:top;">:</td><td><div>None</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_data_name</td><td style="vertical-align:top;">:</td><td><div>session_data_gestionale</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_file</td><td style="vertical-align:top;">:</td><td><div>&lt;open file &#x27;/media/vale/Samsung USB/web2py/applications/gestionale/sessions/120/18e/127.0.0.1-45234626-d2ab-4a33-bc95-e09a1712e7fe&#x27;, mode &#x27;rb+&#x27; at 0x7feed7791150&gt;</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_filename</td><td style="vertical-align:top;">:</td><td><div>/media/vale/Samsung USB/web2py/applications/gestionale/sessions/127.0.0.1-45234626-d2ab-4a33-bc95-e09a1712e7fe</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_hash</td><td style="vertical-align:top;">:</td><td><div>a8ed21f9f779318c3f5298719f997d3c</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id</td><td style="vertical-align:top;">:</td><td><div>127.0.0.1-45234626-d2ab-4a33-bc95-e09a1712e7fe</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_id_name</td><td style="vertical-align:top;">:</td><td><div>session_id_gestionale</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_locked</td><td style="vertical-align:top;">:</td><td><div>True</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_masterapp</td><td style="vertical-align:top;">:</td><td><div>gestionale</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_new</td><td style="vertical-align:top;">:</td><td><div>False</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">session_storage_type</td><td style="vertical-align:top;">:</td><td><div>file</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">status</td><td style="vertical-align:top;">:</td><td><div>200</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">subtitle</td><td style="vertical-align:top;">:</td><td><div></div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">title</td><td style="vertical-align:top;">:</td><td><div>Gestionale</div></td></tr><tr><td style="font-weight:bold;vertical-align:top;">view</td><td style="vertical-align:top;">:</td><td><div>default/call.html</div></td></tr></table></div>'
tRp134
sS'locals'
p135
(dp136
g4
S"'/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py'"
p137
sg6
S"'# -*- coding: utf-8 -*-\\r\\n# this file is released...ps(data)\\r\\n\\nresponse._vars=response._caller(call)\\n'"
p138
sssS'traceback'
p139
S'Traceback (most recent call last):\n  File "/media/vale/Samsung USB/web2py/gluon/restricted.py", line 226, in restricted\n    ccode = compile2(code, layer)\n  File "/media/vale/Samsung USB/web2py/gluon/restricted.py", line 209, in compile2\n    return compile(code.rstrip().replace(\'\\r\\n\', \'\\n\') + \'\\n\', layer, \'exec\')\n  File "/media/vale/Samsung USB/web2py/applications/gestionale/controllers/default.py", line 1951\n    else:\n        ^\nIndentationError: unindent does not match any outer indentation level\n'
p140
s.